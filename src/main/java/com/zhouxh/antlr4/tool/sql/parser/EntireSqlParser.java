// Generated from D:/code/git/bigdata/udap-blood/nl-assets-tools/src/main/resources/antlr\EntireSql.g4 by ANTLR 4.7.2
package com.zhouxh.antlr4.tool.sql.parser;

import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNDeserializer;
import org.antlr.v4.runtime.atn.ParserATNSimulator;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.Utils;
import org.antlr.v4.runtime.tree.ParseTreeListener;
import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.tree.TerminalNode;

import java.util.ArrayList;
import java.util.List;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class EntireSqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, ADD=13, ALL=14, ALTER=15, ANALYZE=16, AND=17, 
		ANY=18, ARRAY=19, AS=20, ASC=21, AT=22, BERNOULLI=23, BETWEEN=24, BY=25, 
		CALL=26, CASCADE=27, CASE=28, CAST=29, CATALOGS=30, COLUMN=31, COLUMNS=32, 
		COMMENT=33, COMMIT=34, COMMITTED=35, CONSTRAINT=36, CREATE=37, CROSS=38, 
		CUBE=39, CURRENT=40, CURRENT_DATE=41, CURRENT_PATH=42, CURRENT_TIME=43, 
		CURRENT_TIMESTAMP=44, CURRENT_USER=45, DATA=46, DATE=47, DAY=48, DEALLOCATE=49, 
		DELETE=50, DESC=51, DESCRIBE=52, DISTINCT=53, DISTRIBUTED=54, DROP=55, 
		ELSE=56, END=57, ESCAPE=58, EXCEPT=59, EXCLUDING=60, EXECUTE=61, EXISTS=62, 
		EXPLAIN=63, EXTRACT=64, FALSE=65, FILTER=66, FIRST=67, FOLLOWING=68, FOR=69, 
		FORMAT=70, FROM=71, FULL=72, FUNCTIONS=73, GRANT=74, GRANTS=75, GRAPHVIZ=76, 
		GROUP=77, GROUPING=78, HAVING=79, HOUR=80, IF=81, IN=82, INCLUDING=83, 
		INNER=84, INPUT=85, INSERT=86, INTERSECT=87, MINUSES=88, INTERVAL=89, 
		INTO=90, IO=91, IS=92, ISOLATION=93, JSON=94, JOIN=95, LAST=96, LATERAL=97, 
		LEFT=98, LEVEL=99, LIKE=100, LIMIT=101, LISTAGG=102, LOCALTIME=103, LOCALTIMESTAMP=104, 
		LOGICAL=105, MAP=106, MINUTE=107, MONTH=108, MODIFY=109, NATURAL=110, 
		NFC=111, NFD=112, NFKC=113, NFKD=114, NO=115, NORMALIZE=116, NOT=117, 
		NULL=118, NULLIF=119, NULLS=120, ON=121, ONLY=122, OPTION=123, OR=124, 
		ORDER=125, ORDINALITY=126, OUTER=127, OUTPUT=128, OVER=129, OVERWRITE=130, 
		PARTITION=131, PARTITIONS=132, PATH=133, POSITION=134, PRECEDING=135, 
		PREPARE=136, PRIVILEGES=137, PROPERTIES=138, PUBLIC=139, RANGE=140, READ=141, 
		RECURSIVE=142, RENAME=143, REPEATABLE=144, REPLACE=145, RESET=146, RESTRICT=147, 
		REVOKE=148, RIGHT=149, ROLLBACK=150, ROLLUP=151, ROW=152, ROWS=153, SCHEMA=154, 
		SCHEMAS=155, SECOND=156, SELECT=157, SERIALIZABLE=158, SESSION=159, SET=160, 
		SETS=161, SHOW=162, SOME=163, START=164, STATS=165, SUBSTRING=166, SYSTEM=167, 
		TABLE=168, TABLES=169, TABLESAMPLE=170, TEXT=171, THEN=172, TIME=173, 
		TIMESTAMP=174, TO=175, TRANSACTION=176, TRUE=177, TRY_CAST=178, TYPE=179, 
		TRUNCATE=180, UPDATE=181, UESCAPE=182, UNBOUNDED=183, UNCOMMITTED=184, 
		UNION=185, UNNEST=186, USE=187, USING=188, VALIDATE=189, VALUES=190, VERBOSE=191, 
		VIEW=192, WHEN=193, WHERE=194, WITH=195, WITHIN=196, WORK=197, WRITE=198, 
		YEAR=199, ZONE=200, SEMI=201, SORT=202, OFFSET=203, DEFAULT=204, TABLESPACE=205, 
		EXTERNAL=206, PURGE=207, TEMPORARY=208, PRIMARY=209, KEY=210, DISABLE=211, 
		NOVALIDATE=212, FOREIGN=213, REFERENCES=214, PARTITIONED=215, CLUSTERED=216, 
		SORTED=217, BUCKETS=218, SKEWED=219, STORED=220, DELIMITED=221, FIELDS=222, 
		TERMINATED=223, ESCAPED=224, COLLECTION=225, ITEMS=226, KEYS=227, LINES=228, 
		DEFINED=229, SEQUENCEFILE=230, TEXTFILE=231, RCFILE=232, ORC=233, ORCFILE=234, 
		PARQUET=235, AVRO=236, JSONFILE=237, INPUTFORMAT=238, OUTPUTFORMAT=239, 
		SERDE=240, SERDEPROPERTIES=241, LOCATION=242, TBLPROPERTIES=243, RELY=244, 
		EXCHANGE=245, RECOVER=246, ARCHIVE=247, UNARCHIVE=248, IGNORE=249, PROTECTION=250, 
		TOUCH=251, ENABLE=252, NO_DROP=253, OFFLINE=254, COMPACT=255, WAIT=256, 
		CONCATENATE=257, CHANGE=258, AFTER=259, DEFERRED=260, REBUILD=261, INDEX=262, 
		IDXPROPERTIES=263, FUNCTION=264, JAR=265, FILE=266, DATABASE=267, DBPROPERTIES=268, 
		OWNER=269, RELOAD=270, USER=271, ROLE=272, FILEFORMAT=273, LOAD=274, LOCAL=275, 
		INPATH=276, DIRECTORY=277, VACUUM=278, LIST=279, SUBPARTITION=280, SUBPARTITIONS=281, 
		EVERY=282, INCLUSIVE=283, EXCLUSIVE=284, TEMPLATE=285, ENCODING=286, LOG=287, 
		ERRORS=288, SEGMENT=289, REJECT=290, PERCENT=291, WRITABLE=292, CHECK=293, 
		UNIQUE=294, CONCURRENTLY=295, BITMAP=296, FORCE=297, SPLIT=298, REINDEX=299, 
		FREEZE=300, MSCK=301, REPAIR=302, FETCH=303, DEFINITION=304, LESS=305, 
		THAN=306, HASH=307, STORE=308, NOLOGGING=309, STRUCT=310, GLOBAL=311, 
		PRESERVE=312, AUTO_INCREMENT=313, ENGINE=314, CHARSET=315, COMPRESS=316, 
		EXPRESS=317, REPLICATED=318, NOCOPIES=319, SPACE=320, SHRINK=321, KEY_BLOCK_SIZE=322, 
		KEY_DC_SIZE=323, AUTOEXTEND=324, NEXT=325, OFF=326, MATCHED=327, MERGE=328, 
		OUTFILE=329, OPTIONALLY=330, ENCLOSED=331, DOUBLE_ENCLOSED=332, NULL_VALUE=333, 
		OUTFILEMODE=334, HDFS=335, WRITEMODE=336, NORMAL=337, OVERWRITES=338, 
		FILECOUNT=339, FILESIZE=340, CHARACTER=341, GBK=342, UTF8=343, HEAD=344, 
		RMTSELECT=345, INFILE=346, DATA_FORMAT=347, SEPARATOR=348, BLANKS=349, 
		AUTOFILL=350, LENGTH=351, TABLE_FIELDS=352, MAX_BAD_RECORDS=353, DATETIME=354, 
		TRACE=355, TRACE_PATH=356, NOSPLIT=357, PARALLEL=358, MAX_DATA_PROCESSORS=359, 
		MIN_CHUNK_SIZE=360, SKIP_BAD_FILE=361, NUM=362, FILE_FORMAT=363, IMMEDIATE=364, 
		STARTING=365, ENDING=366, INITIALLY=367, REFRESH=368, ACTIVATE=369, LOGGED=370, 
		EMPTY=371, SEQUENCE=372, INCREMENT=373, MINVALUE=374, MAXVALUE=375, OVERLAY=376, 
		PLACING=377, TRIM=378, LTRIM=379, RTRIM=380, BOTH=381, TO_CHAR=382, AGE=383, 
		DATE_PART=384, ISFINITE=385, JUSTIFY_DAYS=386, JUSTIFY_HOURS=387, JUSTIFY_INTERVAL=388, 
		INT=389, UNSIGNED=390, REGEXP=391, BINARY=392, LEADING=393, TRAILING=394, 
		RLIKE=395, DATE_SUB=396, ADDDATE=397, DATE_ADD=398, YEAR_MONTH=399, DAY_HOUR=400, 
		DAY_MINUTE=401, DAY_SECOND=402, HOUR_MINUTE=403, HOUR_SECOND=404, MINUTE_SECOND=405, 
		UNKNOWN=406, NULLEQ=407, EQ=408, NEQ=409, LT=410, LTE=411, GT=412, GTE=413, 
		PLUS=414, MINUS=415, ASTERISK=416, SLASH=417, MATHPERCENT=418, MATHMOD=419, 
		CONCAT=420, LOGICALAND=421, LOGICALOR=422, LOGICALEXCLUSIVEOR=423, LOGICALNOT=424, 
		XOR=425, STRING=426, UNICODE_STRING=427, BINARY_LITERAL=428, INTEGER_VALUE=429, 
		DECIMAL_VALUE=430, DOUBLE_VALUE=431, IDENTIFIER=432, DIGIT_IDENTIFIER=433, 
		QUOTED_IDENTIFIER=434, BACKQUOTED_IDENTIFIER=435, TIME_WITH_TIME_ZONE=436, 
		TIMESTAMP_WITH_TIME_ZONE=437, INT_UNSIGNED=438, DOUBLE_PRECISION=439, 
		SIMPLE_COMMENT=440, BRACKETED_COMMENT=441, WS=442, UNRECOGNIZED=443, DELIMITER=444, 
		BLOBMODE=445;
	public static final int
		RULE_multiStatement = 0, RULE_singleStatement = 1, RULE_allStatement = 2, 
		RULE_db2Statement = 3, RULE_gBaseStatement = 4, RULE_gbaseLoadDataOptions = 5, 
		RULE_loadDataFiledsOptions = 6, RULE_outfileOption = 7, RULE_fieldsOutputOptions = 8, 
		RULE_fieldsOutputOption = 9, RULE_lineOutputOptions = 10, RULE_lineOutputOption = 11, 
		RULE_otherOutputOptions = 12, RULE_hiveStatement = 13, RULE_gpStatement = 14, 
		RULE_gpPartitionItems = 15, RULE_gpPartitionItem = 16, RULE_gpSubpartitionItems = 17, 
		RULE_gpSubPartitionItem = 18, RULE_hiveWriteDataToFileStm = 19, RULE_constraintSpecification = 20, 
		RULE_fileFormat = 21, RULE_rowFormat = 22, RULE_stringExp = 23, RULE_stringAndNumberExp = 24, 
		RULE_multiStrEvaluation = 25, RULE_multiKeyEvaluation = 26, RULE_columnDefinitionNoType = 27, 
		RULE_nullExp = 28, RULE_standaloneExpression = 29, RULE_standalonePathSpecification = 30, 
		RULE_queryStatement = 31, RULE_statementNoEof = 32, RULE_statement = 33, 
		RULE_insertStm = 34, RULE_query = 35, RULE_with = 36, RULE_oracleComment = 37, 
		RULE_oraclePartitionItems = 38, RULE_db2PartitionItems = 39, RULE_db2CreateTableAsSelectItem = 40, 
		RULE_oracleTemporayItem = 41, RULE_mysqlTemporayItem = 42, RULE_gbaseTemporayItem = 43, 
		RULE_oracleRangePartitionItems = 44, RULE_oracleRangePartitionItem = 45, 
		RULE_oracleListPartitionItems = 46, RULE_oracleListPartitionItem = 47, 
		RULE_oracleHashPartitionItems = 48, RULE_oracleHashPartitionItem = 49, 
		RULE_oracleCompositePartitionItems = 50, RULE_oracleCompositePartitionItem = 51, 
		RULE_constraintInfo = 52, RULE_mysqlColumnCreateIndex = 53, RULE_gbaseColumnCreateIndex = 54, 
		RULE_tableElement = 55, RULE_tableElements = 56, RULE_columnDefinitions = 57, 
		RULE_columnDefinition = 58, RULE_autoIncrement = 59, RULE_compressType = 60, 
		RULE_columnNullable = 61, RULE_columnConstraint = 62, RULE_likeClause = 63, 
		RULE_properties = 64, RULE_property = 65, RULE_queryNoWith = 66, RULE_limitStat = 67, 
		RULE_queryTerm = 68, RULE_queryPrimary = 69, RULE_insertValues = 70, RULE_sortItem = 71, 
		RULE_querySpecification = 72, RULE_groupBy = 73, RULE_groupingElement = 74, 
		RULE_groupingSet = 75, RULE_namedQuery = 76, RULE_setQuantifier = 77, 
		RULE_selectItem = 78, RULE_aliasName = 79, RULE_relation = 80, RULE_joinType = 81, 
		RULE_joinCriteria = 82, RULE_sampledRelation = 83, RULE_sampleType = 84, 
		RULE_aliasedRelation = 85, RULE_columnAliases = 86, RULE_lengthDesc = 87, 
		RULE_columnAliasesByOrder = 88, RULE_relationPrimary = 89, RULE_expression = 90, 
		RULE_partitionSpec = 91, RULE_partitionInfo = 92, RULE_booleanExpression = 93, 
		RULE_predicate = 94, RULE_valueExpression = 95, RULE_shiftOpt = 96, RULE_primaryExpression = 97, 
		RULE_gpFunctionCalls = 98, RULE_mysqlFunctionCalls = 99, RULE_oracleJoinType = 100, 
		RULE_typeConstructor = 101, RULE_string = 102, RULE_timeZoneSpecifier = 103, 
		RULE_comparisonOperator = 104, RULE_comparisonQuantifier = 105, RULE_booleanValue = 106, 
		RULE_interval = 107, RULE_intervalField = 108, RULE_normalForm = 109, 
		RULE_type = 110, RULE_typeParameter = 111, RULE_baseType = 112, RULE_whenClause = 113, 
		RULE_filter = 114, RULE_over = 115, RULE_windowFrame = 116, RULE_frameBound = 117, 
		RULE_explainOption = 118, RULE_transactionMode = 119, RULE_levelOfIsolation = 120, 
		RULE_callArgument = 121, RULE_pathElement = 122, RULE_pathSpecification = 123, 
		RULE_privilege = 124, RULE_qualifiedName = 125, RULE_identifier = 126, 
		RULE_identifier_ext = 127, RULE_number = 128, RULE_reserved = 129, RULE_nonReserved = 130;
	private static String[] makeRuleNames() {
		return new String[] {
			"multiStatement", "singleStatement", "allStatement", "db2Statement", 
			"gBaseStatement", "gbaseLoadDataOptions", "loadDataFiledsOptions", "outfileOption", 
			"fieldsOutputOptions", "fieldsOutputOption", "lineOutputOptions", "lineOutputOption", 
			"otherOutputOptions", "hiveStatement", "gpStatement", "gpPartitionItems", 
			"gpPartitionItem", "gpSubpartitionItems", "gpSubPartitionItem", "hiveWriteDataToFileStm", 
			"constraintSpecification", "fileFormat", "rowFormat", "stringExp", "stringAndNumberExp", 
			"multiStrEvaluation", "multiKeyEvaluation", "columnDefinitionNoType", 
			"nullExp", "standaloneExpression", "standalonePathSpecification", "queryStatement", 
			"statementNoEof", "statement", "insertStm", "query", "with", "oracleComment", 
			"oraclePartitionItems", "db2PartitionItems", "db2CreateTableAsSelectItem", 
			"oracleTemporayItem", "mysqlTemporayItem", "gbaseTemporayItem", "oracleRangePartitionItems", 
			"oracleRangePartitionItem", "oracleListPartitionItems", "oracleListPartitionItem", 
			"oracleHashPartitionItems", "oracleHashPartitionItem", "oracleCompositePartitionItems", 
			"oracleCompositePartitionItem", "constraintInfo", "mysqlColumnCreateIndex", 
			"gbaseColumnCreateIndex", "tableElement", "tableElements", "columnDefinitions", 
			"columnDefinition", "autoIncrement", "compressType", "columnNullable", 
			"columnConstraint", "likeClause", "properties", "property", "queryNoWith", 
			"limitStat", "queryTerm", "queryPrimary", "insertValues", "sortItem", 
			"querySpecification", "groupBy", "groupingElement", "groupingSet", "namedQuery", 
			"setQuantifier", "selectItem", "aliasName", "relation", "joinType", "joinCriteria", 
			"sampledRelation", "sampleType", "aliasedRelation", "columnAliases", 
			"lengthDesc", "columnAliasesByOrder", "relationPrimary", "expression", 
			"partitionSpec", "partitionInfo", "booleanExpression", "predicate", "valueExpression", 
			"shiftOpt", "primaryExpression", "gpFunctionCalls", "mysqlFunctionCalls", 
			"oracleJoinType", "typeConstructor", "string", "timeZoneSpecifier", "comparisonOperator", 
			"comparisonQuantifier", "booleanValue", "interval", "intervalField", 
			"normalForm", "type", "typeParameter", "baseType", "whenClause", "filter", 
			"over", "windowFrame", "frameBound", "explainOption", "transactionMode", 
			"levelOfIsolation", "callArgument", "pathElement", "pathSpecification", 
			"privilege", "qualifiedName", "identifier", "identifier_ext", "number", 
			"reserved", "nonReserved"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "';'", "'('", "','", "')'", "'.'", "'::'", "'?'", "'->'", "'['", 
			"']'", "'=>'", "':'", null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, "'<=>'", "'='", null, "'<'", "'<='", "'>'", "'>='", "'+'", 
			"'-'", "'*'", "'/'", "'%'", null, "'||'", "'&'", "'|'", "'^'", "'!'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, "ADD", "ALL", "ALTER", "ANALYZE", "AND", "ANY", "ARRAY", "AS", 
			"ASC", "AT", "BERNOULLI", "BETWEEN", "BY", "CALL", "CASCADE", "CASE", 
			"CAST", "CATALOGS", "COLUMN", "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", 
			"CONSTRAINT", "CREATE", "CROSS", "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_PATH", 
			"CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "DATA", "DATE", 
			"DAY", "DEALLOCATE", "DELETE", "DESC", "DESCRIBE", "DISTINCT", "DISTRIBUTED", 
			"DROP", "ELSE", "END", "ESCAPE", "EXCEPT", "EXCLUDING", "EXECUTE", "EXISTS", 
			"EXPLAIN", "EXTRACT", "FALSE", "FILTER", "FIRST", "FOLLOWING", "FOR", 
			"FORMAT", "FROM", "FULL", "FUNCTIONS", "GRANT", "GRANTS", "GRAPHVIZ", 
			"GROUP", "GROUPING", "HAVING", "HOUR", "IF", "IN", "INCLUDING", "INNER", 
			"INPUT", "INSERT", "INTERSECT", "MINUSES", "INTERVAL", "INTO", "IO", 
			"IS", "ISOLATION", "JSON", "JOIN", "LAST", "LATERAL", "LEFT", "LEVEL", 
			"LIKE", "LIMIT", "LISTAGG", "LOCALTIME", "LOCALTIMESTAMP", "LOGICAL", 
			"MAP", "MINUTE", "MONTH", "MODIFY", "NATURAL", "NFC", "NFD", "NFKC", 
			"NFKD", "NO", "NORMALIZE", "NOT", "NULL", "NULLIF", "NULLS", "ON", "ONLY", 
			"OPTION", "OR", "ORDER", "ORDINALITY", "OUTER", "OUTPUT", "OVER", "OVERWRITE", 
			"PARTITION", "PARTITIONS", "PATH", "POSITION", "PRECEDING", "PREPARE", 
			"PRIVILEGES", "PROPERTIES", "PUBLIC", "RANGE", "READ", "RECURSIVE", "RENAME", 
			"REPEATABLE", "REPLACE", "RESET", "RESTRICT", "REVOKE", "RIGHT", "ROLLBACK", 
			"ROLLUP", "ROW", "ROWS", "SCHEMA", "SCHEMAS", "SECOND", "SELECT", "SERIALIZABLE", 
			"SESSION", "SET", "SETS", "SHOW", "SOME", "START", "STATS", "SUBSTRING", 
			"SYSTEM", "TABLE", "TABLES", "TABLESAMPLE", "TEXT", "THEN", "TIME", "TIMESTAMP", 
			"TO", "TRANSACTION", "TRUE", "TRY_CAST", "TYPE", "TRUNCATE", "UPDATE", 
			"UESCAPE", "UNBOUNDED", "UNCOMMITTED", "UNION", "UNNEST", "USE", "USING", 
			"VALIDATE", "VALUES", "VERBOSE", "VIEW", "WHEN", "WHERE", "WITH", "WITHIN", 
			"WORK", "WRITE", "YEAR", "ZONE", "SEMI", "SORT", "OFFSET", "DEFAULT", 
			"TABLESPACE", "EXTERNAL", "PURGE", "TEMPORARY", "PRIMARY", "KEY", "DISABLE", 
			"NOVALIDATE", "FOREIGN", "REFERENCES", "PARTITIONED", "CLUSTERED", "SORTED", 
			"BUCKETS", "SKEWED", "STORED", "DELIMITED", "FIELDS", "TERMINATED", "ESCAPED", 
			"COLLECTION", "ITEMS", "KEYS", "LINES", "DEFINED", "SEQUENCEFILE", "TEXTFILE", 
			"RCFILE", "ORC", "ORCFILE", "PARQUET", "AVRO", "JSONFILE", "INPUTFORMAT", 
			"OUTPUTFORMAT", "SERDE", "SERDEPROPERTIES", "LOCATION", "TBLPROPERTIES", 
			"RELY", "EXCHANGE", "RECOVER", "ARCHIVE", "UNARCHIVE", "IGNORE", "PROTECTION", 
			"TOUCH", "ENABLE", "NO_DROP", "OFFLINE", "COMPACT", "WAIT", "CONCATENATE", 
			"CHANGE", "AFTER", "DEFERRED", "REBUILD", "INDEX", "IDXPROPERTIES", "FUNCTION", 
			"JAR", "FILE", "DATABASE", "DBPROPERTIES", "OWNER", "RELOAD", "USER", 
			"ROLE", "FILEFORMAT", "LOAD", "LOCAL", "INPATH", "DIRECTORY", "VACUUM", 
			"LIST", "SUBPARTITION", "SUBPARTITIONS", "EVERY", "INCLUSIVE", "EXCLUSIVE", 
			"TEMPLATE", "ENCODING", "LOG", "ERRORS", "SEGMENT", "REJECT", "PERCENT", 
			"WRITABLE", "CHECK", "UNIQUE", "CONCURRENTLY", "BITMAP", "FORCE", "SPLIT", 
			"REINDEX", "FREEZE", "MSCK", "REPAIR", "FETCH", "DEFINITION", "LESS", 
			"THAN", "HASH", "STORE", "NOLOGGING", "STRUCT", "GLOBAL", "PRESERVE", 
			"AUTO_INCREMENT", "ENGINE", "CHARSET", "COMPRESS", "EXPRESS", "REPLICATED", 
			"NOCOPIES", "SPACE", "SHRINK", "KEY_BLOCK_SIZE", "KEY_DC_SIZE", "AUTOEXTEND", 
			"NEXT", "OFF", "MATCHED", "MERGE", "OUTFILE", "OPTIONALLY", "ENCLOSED", 
			"DOUBLE_ENCLOSED", "NULL_VALUE", "OUTFILEMODE", "HDFS", "WRITEMODE", 
			"NORMAL", "OVERWRITES", "FILECOUNT", "FILESIZE", "CHARACTER", "GBK", 
			"UTF8", "HEAD", "RMTSELECT", "INFILE", "DATA_FORMAT", "SEPARATOR", "BLANKS", 
			"AUTOFILL", "LENGTH", "TABLE_FIELDS", "MAX_BAD_RECORDS", "DATETIME", 
			"TRACE", "TRACE_PATH", "NOSPLIT", "PARALLEL", "MAX_DATA_PROCESSORS", 
			"MIN_CHUNK_SIZE", "SKIP_BAD_FILE", "NUM", "FILE_FORMAT", "IMMEDIATE", 
			"STARTING", "ENDING", "INITIALLY", "REFRESH", "ACTIVATE", "LOGGED", "EMPTY", 
			"SEQUENCE", "INCREMENT", "MINVALUE", "MAXVALUE", "OVERLAY", "PLACING", 
			"TRIM", "LTRIM", "RTRIM", "BOTH", "TO_CHAR", "AGE", "DATE_PART", "ISFINITE", 
			"JUSTIFY_DAYS", "JUSTIFY_HOURS", "JUSTIFY_INTERVAL", "INT", "UNSIGNED", 
			"REGEXP", "BINARY", "LEADING", "TRAILING", "RLIKE", "DATE_SUB", "ADDDATE", 
			"DATE_ADD", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", 
			"HOUR_SECOND", "MINUTE_SECOND", "UNKNOWN", "NULLEQ", "EQ", "NEQ", "LT", 
			"LTE", "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", "MATHPERCENT", 
			"MATHMOD", "CONCAT", "LOGICALAND", "LOGICALOR", "LOGICALEXCLUSIVEOR", 
			"LOGICALNOT", "XOR", "STRING", "UNICODE_STRING", "BINARY_LITERAL", "INTEGER_VALUE", 
			"DECIMAL_VALUE", "DOUBLE_VALUE", "IDENTIFIER", "DIGIT_IDENTIFIER", "QUOTED_IDENTIFIER", 
			"BACKQUOTED_IDENTIFIER", "TIME_WITH_TIME_ZONE", "TIMESTAMP_WITH_TIME_ZONE", 
			"INT_UNSIGNED", "DOUBLE_PRECISION", "SIMPLE_COMMENT", "BRACKETED_COMMENT", 
			"WS", "UNRECOGNIZED", "DELIMITER", "BLOBMODE"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "EntireSql.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }


	    public boolean hiveType = false;
	    public boolean oracleType = false;
	    public boolean mysqlType = false;
	    public boolean exploreType = false;
	    public boolean gpType = false;
	    public boolean db2Type = false;
	    public boolean gbaseType = false;
	    public boolean sqlserverType = false;

	    public boolean isSqlserverType() {return sqlserverType;}
	    public boolean isHiveType() {return hiveType;}
	    public boolean isOracleType() {return oracleType;}
	    public boolean isMysqlType() {return mysqlType;}
	    public boolean isGpType() {return gpType;}
	    public boolean isExploreType() {return exploreType;}
	    public boolean isDb2Type() {return db2Type;}
	    public boolean isGbaseType() {return gbaseType;}
	    public void setAllTypeTrue() {hiveType = true; oracleType = true;mysqlType = true;gpType = true;db2Type = true;gbaseType=true;sqlserverType=true;}

	public EntireSqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class MultiStatementContext extends ParserRuleContext {
		public List<AllStatementContext> allStatement() {
			return getRuleContexts(AllStatementContext.class);
		}
		public AllStatementContext allStatement(int i) {
			return getRuleContext(AllStatementContext.class,i);
		}
		public TerminalNode EOF() { return getToken(EntireSqlParser.EOF, 0); }
		public MultiStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterMultiStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitMultiStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitMultiStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultiStatementContext multiStatement() throws RecognitionException {
		MultiStatementContext _localctx = new MultiStatementContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_multiStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(262);
			allStatement();
			setState(267);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,0,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(263);
					match(T__0);
					setState(264);
					allStatement();
					}
					}
				}
				setState(269);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,0,_ctx);
			}
			setState(271);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__0) {
				{
				setState(270);
				match(T__0);
				}
			}

			setState(273);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleStatementContext extends ParserRuleContext {
		public AllStatementContext allStatement() {
			return getRuleContext(AllStatementContext.class,0);
		}
		public TerminalNode EOF() { return getToken(EntireSqlParser.EOF, 0); }
		public SingleStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterSingleStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitSingleStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitSingleStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleStatementContext singleStatement() throws RecognitionException {
		SingleStatementContext _localctx = new SingleStatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_singleStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(275);
			allStatement();
			setState(276);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllStatementContext extends ParserRuleContext {
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public GBaseStatementContext gBaseStatement() {
			return getRuleContext(GBaseStatementContext.class,0);
		}
		public HiveStatementContext hiveStatement() {
			return getRuleContext(HiveStatementContext.class,0);
		}
		public GpStatementContext gpStatement() {
			return getRuleContext(GpStatementContext.class,0);
		}
		public Db2StatementContext db2Statement() {
			return getRuleContext(Db2StatementContext.class,0);
		}
		public AllStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterAllStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitAllStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitAllStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllStatementContext allStatement() throws RecognitionException {
		AllStatementContext _localctx = new AllStatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_allStatement);
		try {
			setState(287);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(278);
				statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(279);
				if (!(isGbaseType())) throw new FailedPredicateException(this, "isGbaseType()");
				setState(280);
				gBaseStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(281);
				if (!(isHiveType())) throw new FailedPredicateException(this, "isHiveType()");
				setState(282);
				hiveStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(283);
				if (!(isGpType())) throw new FailedPredicateException(this, "isGpType()");
				setState(284);
				gpStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(285);
				if (!(isDb2Type())) throw new FailedPredicateException(this, "isDb2Type()");
				setState(286);
				db2Statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db2StatementContext extends ParserRuleContext {
		public Db2StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db2Statement; }

		public Db2StatementContext() { }
		public void copyFrom(Db2StatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Db2CreateSequenceContext extends Db2StatementContext {
		public IdentifierContext sequenceName;
		public TerminalNode CREATE() { return getToken(EntireSqlParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(EntireSqlParser.SEQUENCE, 0); }
		public TerminalNode INCREMENT() { return getToken(EntireSqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(EntireSqlParser.BY, 0); }
		public List<NumberContext> number() {
			return getRuleContexts(NumberContext.class);
		}
		public NumberContext number(int i) {
			return getRuleContext(NumberContext.class,i);
		}
		public TerminalNode MINVALUE() { return getToken(EntireSqlParser.MINVALUE, 0); }
		public TerminalNode START() { return getToken(EntireSqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(EntireSqlParser.WITH, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(EntireSqlParser.MAXVALUE, 0); }
		public TerminalNode NO() { return getToken(EntireSqlParser.NO, 0); }
		public Db2CreateSequenceContext(Db2StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterDb2CreateSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitDb2CreateSequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitDb2CreateSequence(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Db2AlterModifyContext extends Db2StatementContext {
		public QualifiedNameContext tablename;
		public IdentifierContext constraintName;
		public QualifiedNameContext otherTablename;
		public IdentifierContext colName;
		public IdentifierContext columnName;
		public List<TerminalNode> ALTER() { return getTokens(EntireSqlParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(EntireSqlParser.ALTER, i);
		}
		public List<TerminalNode> TABLE() { return getTokens(EntireSqlParser.TABLE); }
		public TerminalNode TABLE(int i) {
			return getToken(EntireSqlParser.TABLE, i);
		}
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public TerminalNode ADD() { return getToken(EntireSqlParser.ADD, 0); }
		public TerminalNode CONSTRAINT() { return getToken(EntireSqlParser.CONSTRAINT, 0); }
		public TerminalNode PRIMARY() { return getToken(EntireSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(EntireSqlParser.KEY, 0); }
		public List<ColumnAliasesContext> columnAliases() {
			return getRuleContexts(ColumnAliasesContext.class);
		}
		public ColumnAliasesContext columnAliases(int i) {
			return getRuleContext(ColumnAliasesContext.class,i);
		}
		public TerminalNode FOREIGN() { return getToken(EntireSqlParser.FOREIGN, 0); }
		public TerminalNode REFERENCES() { return getToken(EntireSqlParser.REFERENCES, 0); }
		public TerminalNode UNIQUE() { return getToken(EntireSqlParser.UNIQUE, 0); }
		public TerminalNode DROP() { return getToken(EntireSqlParser.DROP, 0); }
		public TerminalNode SET() { return getToken(EntireSqlParser.SET, 0); }
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(EntireSqlParser.NULL, 0); }
		public TerminalNode COLUMN() { return getToken(EntireSqlParser.COLUMN, 0); }
		public TerminalNode DEFAULT() { return getToken(EntireSqlParser.DEFAULT, 0); }
		public TerminalNode DATA() { return getToken(EntireSqlParser.DATA, 0); }
		public TerminalNode TYPE() { return getToken(EntireSqlParser.TYPE, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode ACTIVATE() { return getToken(EntireSqlParser.ACTIVATE, 0); }
		public TerminalNode LOGGED() { return getToken(EntireSqlParser.LOGGED, 0); }
		public TerminalNode INITIALLY() { return getToken(EntireSqlParser.INITIALLY, 0); }
		public TerminalNode WITH() { return getToken(EntireSqlParser.WITH, 0); }
		public TerminalNode EMPTY() { return getToken(EntireSqlParser.EMPTY, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public Db2AlterModifyContext(Db2StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterDb2AlterModify(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitDb2AlterModify(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitDb2AlterModify(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Db2CreateTableByLikeContext extends Db2StatementContext {
		public QualifiedNameContext tableNameDst;
		public QualifiedNameContext tableNameSrc;
		public TerminalNode CREATE() { return getToken(EntireSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode LIKE() { return getToken(EntireSqlParser.LIKE, 0); }
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public TerminalNode TEMPORARY() { return getToken(EntireSqlParser.TEMPORARY, 0); }
		public TerminalNode IF() { return getToken(EntireSqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(EntireSqlParser.EXISTS, 0); }
		public Db2CreateTableByLikeContext(Db2StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterDb2CreateTableByLike(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitDb2CreateTableByLike(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitDb2CreateTableByLike(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Db2RefreshTableContext extends Db2StatementContext {
		public TerminalNode REFRESH() { return getToken(EntireSqlParser.REFRESH, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public Db2RefreshTableContext(Db2StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterDb2RefreshTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitDb2RefreshTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitDb2RefreshTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Db2TruncateTableContext extends Db2StatementContext {
		public TerminalNode TRUNCATE() { return getToken(EntireSqlParser.TRUNCATE, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode IMMEDIATE() { return getToken(EntireSqlParser.IMMEDIATE, 0); }
		public Db2TruncateTableContext(Db2StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterDb2TruncateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitDb2TruncateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitDb2TruncateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Db2CreateViewContext extends Db2StatementContext {
		public QualifiedNameContext viewName;
		public TerminalNode CREATE() { return getToken(EntireSqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(EntireSqlParser.VIEW, 0); }
		public TerminalNode AS() { return getToken(EntireSqlParser.AS, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(EntireSqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(EntireSqlParser.EXISTS, 0); }
		public List<ColumnDefinitionNoTypeContext> columnDefinitionNoType() {
			return getRuleContexts(ColumnDefinitionNoTypeContext.class);
		}
		public ColumnDefinitionNoTypeContext columnDefinitionNoType(int i) {
			return getRuleContext(ColumnDefinitionNoTypeContext.class,i);
		}
		public TerminalNode COMMENT() { return getToken(EntireSqlParser.COMMENT, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Db2CreateViewContext(Db2StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterDb2CreateView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitDb2CreateView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitDb2CreateView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Db2StatementContext db2Statement() throws RecognitionException {
		Db2StatementContext _localctx = new Db2StatementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_db2Statement);
		int _la;
		try {
			setState(431);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				_localctx = new Db2AlterModifyContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(289);
				match(ALTER);
				setState(290);
				match(TABLE);
				setState(291);
				((Db2AlterModifyContext)_localctx).tablename = qualifiedName();
				setState(360);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
				case 1:
					{
					setState(292);
					match(ADD);
					setState(293);
					match(CONSTRAINT);
					setState(294);
					((Db2AlterModifyContext)_localctx).constraintName = identifier(0);
					setState(295);
					match(PRIMARY);
					setState(296);
					match(KEY);
					setState(297);
					columnAliases();
					}
					break;
				case 2:
					{
					setState(299);
					match(ADD);
					setState(300);
					match(CONSTRAINT);
					setState(301);
					((Db2AlterModifyContext)_localctx).constraintName = identifier(0);
					setState(302);
					match(FOREIGN);
					setState(303);
					match(KEY);
					setState(304);
					columnAliases();
					setState(305);
					match(REFERENCES);
					setState(306);
					((Db2AlterModifyContext)_localctx).otherTablename = qualifiedName();
					setState(307);
					columnAliases();
					}
					break;
				case 3:
					{
					setState(309);
					match(ADD);
					setState(310);
					match(CONSTRAINT);
					setState(311);
					((Db2AlterModifyContext)_localctx).constraintName = identifier(0);
					setState(312);
					match(UNIQUE);
					setState(313);
					columnAliases();
					}
					break;
				case 4:
					{
					setState(315);
					match(DROP);
					setState(316);
					match(PRIMARY);
					setState(317);
					match(KEY);
					}
					break;
				case 5:
					{
					setState(318);
					match(DROP);
					setState(319);
					match(CONSTRAINT);
					setState(320);
					((Db2AlterModifyContext)_localctx).constraintName = identifier(0);
					}
					break;
				case 6:
					{
					setState(321);
					match(ALTER);
					setState(322);
					((Db2AlterModifyContext)_localctx).colName = identifier(0);
					setState(323);
					match(SET);
					setState(324);
					match(NOT);
					setState(325);
					match(NULL);
					}
					break;
				case 7:
					{
					setState(327);
					match(ALTER);
					setState(328);
					match(COLUMN);
					setState(329);
					((Db2AlterModifyContext)_localctx).columnName = identifier(0);
					setState(330);
					match(SET);
					setState(331);
					match(DEFAULT);
					setState(335);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
					case UNICODE_STRING:
						{
						setState(332);
						string();
						}
						break;
					case ADD:
					case ALL:
					case ANALYZE:
					case AND:
					case ANY:
					case ARRAY:
					case AS:
					case ASC:
					case AT:
					case BERNOULLI:
					case BETWEEN:
					case BY:
					case CALL:
					case CASCADE:
					case CASE:
					case CAST:
					case CATALOGS:
					case COLUMN:
					case COLUMNS:
					case COMMENT:
					case COMMIT:
					case COMMITTED:
					case CONSTRAINT:
					case CROSS:
					case CUBE:
					case CURRENT:
					case CURRENT_DATE:
					case CURRENT_PATH:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case CURRENT_USER:
					case DATA:
					case DATE:
					case DAY:
					case DEALLOCATE:
					case DESC:
					case DESCRIBE:
					case DISTINCT:
					case DISTRIBUTED:
					case DROP:
					case ELSE:
					case ESCAPE:
					case EXCEPT:
					case EXCLUDING:
					case EXECUTE:
					case EXISTS:
					case EXPLAIN:
					case EXTRACT:
					case FILTER:
					case FIRST:
					case FOLLOWING:
					case FOR:
					case FORMAT:
					case FULL:
					case FUNCTIONS:
					case GRANT:
					case GRANTS:
					case GRAPHVIZ:
					case GROUP:
					case GROUPING:
					case HAVING:
					case HOUR:
					case IF:
					case IN:
					case INCLUDING:
					case INNER:
					case INPUT:
					case INSERT:
					case INTERSECT:
					case MINUSES:
					case INTERVAL:
					case INTO:
					case IO:
					case IS:
					case ISOLATION:
					case JSON:
					case JOIN:
					case LAST:
					case LATERAL:
					case LEFT:
					case LEVEL:
					case LIKE:
					case LIMIT:
					case LISTAGG:
					case LOCALTIME:
					case LOCALTIMESTAMP:
					case LOGICAL:
					case MAP:
					case MINUTE:
					case MONTH:
					case MODIFY:
					case NATURAL:
					case NFC:
					case NFD:
					case NFKC:
					case NFKD:
					case NO:
					case NORMALIZE:
					case NULLIF:
					case NULLS:
					case ON:
					case ONLY:
					case OPTION:
					case OR:
					case ORDER:
					case ORDINALITY:
					case OUTER:
					case OUTPUT:
					case OVER:
					case PARTITION:
					case PARTITIONS:
					case PATH:
					case POSITION:
					case PRECEDING:
					case PREPARE:
					case PRIVILEGES:
					case PROPERTIES:
					case PUBLIC:
					case RANGE:
					case READ:
					case RECURSIVE:
					case RENAME:
					case REPEATABLE:
					case REPLACE:
					case RESET:
					case RESTRICT:
					case REVOKE:
					case RIGHT:
					case ROLLBACK:
					case ROLLUP:
					case ROW:
					case ROWS:
					case SCHEMA:
					case SCHEMAS:
					case SECOND:
					case SERIALIZABLE:
					case SESSION:
					case SET:
					case SETS:
					case SHOW:
					case SOME:
					case START:
					case STATS:
					case SUBSTRING:
					case SYSTEM:
					case TABLES:
					case TABLESAMPLE:
					case TEXT:
					case THEN:
					case TIME:
					case TIMESTAMP:
					case TO:
					case TRANSACTION:
					case TRY_CAST:
					case TYPE:
					case TRUNCATE:
					case UPDATE:
					case UESCAPE:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNION:
					case UNNEST:
					case USE:
					case VALIDATE:
					case VERBOSE:
					case VIEW:
					case WHEN:
					case WITH:
					case WITHIN:
					case WORK:
					case WRITE:
					case YEAR:
					case ZONE:
					case SEMI:
					case SORT:
					case OFFSET:
					case DEFAULT:
					case TABLESPACE:
					case EXTERNAL:
					case PURGE:
					case TEMPORARY:
					case PRIMARY:
					case KEY:
					case DISABLE:
					case NOVALIDATE:
					case FOREIGN:
					case REFERENCES:
					case PARTITIONED:
					case CLUSTERED:
					case SORTED:
					case BUCKETS:
					case SKEWED:
					case STORED:
					case DELIMITED:
					case FIELDS:
					case TERMINATED:
					case ESCAPED:
					case COLLECTION:
					case ITEMS:
					case KEYS:
					case LINES:
					case DEFINED:
					case SEQUENCEFILE:
					case TEXTFILE:
					case RCFILE:
					case ORC:
					case ORCFILE:
					case PARQUET:
					case AVRO:
					case JSONFILE:
					case INPUTFORMAT:
					case OUTPUTFORMAT:
					case SERDE:
					case SERDEPROPERTIES:
					case LOCATION:
					case TBLPROPERTIES:
					case RELY:
					case EXCHANGE:
					case RECOVER:
					case ARCHIVE:
					case UNARCHIVE:
					case IGNORE:
					case PROTECTION:
					case TOUCH:
					case ENABLE:
					case NO_DROP:
					case OFFLINE:
					case COMPACT:
					case WAIT:
					case CONCATENATE:
					case CHANGE:
					case AFTER:
					case DEFERRED:
					case REBUILD:
					case INDEX:
					case IDXPROPERTIES:
					case FUNCTION:
					case JAR:
					case FILE:
					case DATABASE:
					case DBPROPERTIES:
					case OWNER:
					case RELOAD:
					case USER:
					case ROLE:
					case FILEFORMAT:
					case LOAD:
					case LOCAL:
					case INPATH:
					case DIRECTORY:
					case VACUUM:
					case LIST:
					case SUBPARTITION:
					case SUBPARTITIONS:
					case EVERY:
					case INCLUSIVE:
					case EXCLUSIVE:
					case TEMPLATE:
					case ENCODING:
					case LOG:
					case ERRORS:
					case SEGMENT:
					case REJECT:
					case PERCENT:
					case WRITABLE:
					case CHECK:
					case UNIQUE:
					case CONCURRENTLY:
					case BITMAP:
					case FORCE:
					case SPLIT:
					case REINDEX:
					case FREEZE:
					case MSCK:
					case REPAIR:
					case FETCH:
					case DEFINITION:
					case LESS:
					case THAN:
					case HASH:
					case NOLOGGING:
					case STRUCT:
					case GLOBAL:
					case PRESERVE:
					case AUTO_INCREMENT:
					case ENGINE:
					case CHARSET:
					case COMPRESS:
					case EXPRESS:
					case REPLICATED:
					case NOCOPIES:
					case SPACE:
					case SHRINK:
					case KEY_BLOCK_SIZE:
					case KEY_DC_SIZE:
					case AUTOEXTEND:
					case NEXT:
					case OFF:
					case MATCHED:
					case MERGE:
					case OUTFILE:
					case OPTIONALLY:
					case ENCLOSED:
					case DOUBLE_ENCLOSED:
					case NULL_VALUE:
					case OUTFILEMODE:
					case HDFS:
					case WRITEMODE:
					case NORMAL:
					case OVERWRITES:
					case FILECOUNT:
					case FILESIZE:
					case CHARACTER:
					case GBK:
					case UTF8:
					case HEAD:
					case RMTSELECT:
					case INFILE:
					case DATA_FORMAT:
					case SEPARATOR:
					case BLANKS:
					case AUTOFILL:
					case LENGTH:
					case TABLE_FIELDS:
					case MAX_BAD_RECORDS:
					case DATETIME:
					case TRACE:
					case TRACE_PATH:
					case NOSPLIT:
					case PARALLEL:
					case MAX_DATA_PROCESSORS:
					case MIN_CHUNK_SIZE:
					case SKIP_BAD_FILE:
					case NUM:
					case FILE_FORMAT:
					case IMMEDIATE:
					case STARTING:
					case ENDING:
					case INITIALLY:
					case REFRESH:
					case ACTIVATE:
					case LOGGED:
					case EMPTY:
					case SEQUENCE:
					case INCREMENT:
					case MINVALUE:
					case MAXVALUE:
					case OVERLAY:
					case PLACING:
					case TRIM:
					case LTRIM:
					case RTRIM:
					case BOTH:
					case TO_CHAR:
					case AGE:
					case DATE_PART:
					case ISFINITE:
					case INT:
					case UNSIGNED:
					case REGEXP:
					case BINARY:
					case LEADING:
					case TRAILING:
					case RLIKE:
					case DATE_SUB:
					case ADDDATE:
					case DATE_ADD:
					case YEAR_MONTH:
					case DAY_HOUR:
					case DAY_MINUTE:
					case DAY_SECOND:
					case HOUR_MINUTE:
					case HOUR_SECOND:
					case MINUTE_SECOND:
					case UNKNOWN:
					case IDENTIFIER:
					case DIGIT_IDENTIFIER:
					case QUOTED_IDENTIFIER:
					case BACKQUOTED_IDENTIFIER:
						{
						setState(333);
						identifier(0);
						}
						break;
					case INTEGER_VALUE:
					case DECIMAL_VALUE:
					case DOUBLE_VALUE:
						{
						setState(334);
						number();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 8:
					{
					setState(337);
					match(ALTER);
					setState(338);
					match(COLUMN);
					setState(339);
					((Db2AlterModifyContext)_localctx).columnName = identifier(0);
					setState(340);
					match(SET);
					setState(341);
					match(NOT);
					setState(342);
					match(NULL);
					}
					break;
				case 9:
					{
					setState(344);
					match(ALTER);
					setState(345);
					((Db2AlterModifyContext)_localctx).constraintName = identifier(0);
					setState(346);
					match(SET);
					setState(347);
					match(DATA);
					setState(348);
					match(TYPE);
					setState(349);
					type(0);
					}
					break;
				case 10:
					{
					setState(351);
					match(ACTIVATE);
					setState(352);
					match(NOT);
					setState(353);
					match(LOGGED);
					setState(354);
					match(INITIALLY);
					setState(355);
					match(WITH);
					setState(356);
					match(EMPTY);
					setState(357);
					match(TABLE);
					}
					break;
				case 11:
					{
					setState(358);
					match(DROP);
					setState(359);
					((Db2AlterModifyContext)_localctx).colName = identifier(0);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new Db2TruncateTableContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(362);
				match(TRUNCATE);
				setState(363);
				match(TABLE);
				setState(364);
				qualifiedName();
				setState(366);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IMMEDIATE) {
					{
					setState(365);
					match(IMMEDIATE);
					}
				}

				}
				break;
			case 3:
				_localctx = new Db2CreateTableByLikeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(368);
				match(CREATE);
				setState(370);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(369);
					match(TEMPORARY);
					}
				}

				setState(372);
				match(TABLE);
				setState(376);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
				case 1:
					{
					setState(373);
					match(IF);
					setState(374);
					match(NOT);
					setState(375);
					match(EXISTS);
					}
					break;
				}
				setState(378);
				((Db2CreateTableByLikeContext)_localctx).tableNameDst = qualifiedName();
				setState(379);
				match(LIKE);
				setState(380);
				((Db2CreateTableByLikeContext)_localctx).tableNameSrc = qualifiedName();
				}
				break;
			case 4:
				_localctx = new Db2RefreshTableContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(382);
				match(REFRESH);
				setState(383);
				match(TABLE);
				setState(384);
				qualifiedName();
				}
				break;
			case 5:
				_localctx = new Db2CreateViewContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(385);
				match(CREATE);
				setState(386);
				match(VIEW);
				setState(390);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
				case 1:
					{
					setState(387);
					match(IF);
					setState(388);
					match(NOT);
					setState(389);
					match(EXISTS);
					}
					break;
				}
				setState(392);
				((Db2CreateViewContext)_localctx).viewName = qualifiedName();
				setState(404);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__1) {
					{
					setState(393);
					match(T__1);
					setState(394);
					columnDefinitionNoType();
					setState(399);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(395);
						match(T__2);
						setState(396);
						columnDefinitionNoType();
						}
						}
						setState(401);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(402);
					match(T__3);
					}
				}

				setState(408);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(406);
					match(COMMENT);
					setState(407);
					string();
					}
				}

				setState(410);
				match(AS);
				setState(411);
				query();
				}
				break;
			case 6:
				_localctx = new Db2CreateSequenceContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(413);
				match(CREATE);
				setState(414);
				match(SEQUENCE);
				setState(415);
				((Db2CreateSequenceContext)_localctx).sequenceName = identifier(0);
				setState(416);
				match(INCREMENT);
				setState(417);
				match(BY);
				setState(418);
				number();
				setState(419);
				match(MINVALUE);
				setState(420);
				number();
				setState(425);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MAXVALUE:
					{
					setState(421);
					match(MAXVALUE);
					setState(422);
					number();
					}
					break;
				case NO:
					{
					setState(423);
					match(NO);
					setState(424);
					match(MAXVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(427);
				match(START);
				setState(428);
				match(WITH);
				setState(429);
				number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GBaseStatementContext extends ParserRuleContext {
		public GBaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gBaseStatement; }

		public GBaseStatementContext() { }
		public void copyFrom(GBaseStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class GBaseAlterViewContext extends GBaseStatementContext {
		public QualifiedNameContext tableName;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(EntireSqlParser.VIEW, 0); }
		public TerminalNode AS() { return getToken(EntireSqlParser.AS, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public ColumnAliasesContext columnAliases() {
			return getRuleContext(ColumnAliasesContext.class,0);
		}
		public GBaseAlterViewContext(GBaseStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGBaseAlterView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGBaseAlterView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGBaseAlterView(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GBaseAlterModifyContext extends GBaseStatementContext {
		public QualifiedNameContext tableName;
		public IdentifierContext colNewName;
		public TypeContext columnType;
		public IdentifierContext columnName;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode MODIFY() { return getToken(EntireSqlParser.MODIFY, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(EntireSqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(EntireSqlParser.AFTER, 0); }
		public GBaseAlterModifyContext(GBaseStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGBaseAlterModify(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGBaseAlterModify(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGBaseAlterModify(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GBaseSelectIntoOutfileContext extends GBaseStatementContext {
		public StringContext fileName;
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode INTO() { return getToken(EntireSqlParser.INTO, 0); }
		public TerminalNode OUTFILE() { return getToken(EntireSqlParser.OUTFILE, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public List<OutfileOptionContext> outfileOption() {
			return getRuleContexts(OutfileOptionContext.class);
		}
		public OutfileOptionContext outfileOption(int i) {
			return getRuleContext(OutfileOptionContext.class,i);
		}
		public GBaseSelectIntoOutfileContext(GBaseStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGBaseSelectIntoOutfile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGBaseSelectIntoOutfile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGBaseSelectIntoOutfile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GBaseCreateTableAsContext extends GBaseStatementContext {
		public QualifiedNameContext tableName;
		public TerminalNode CREATE() { return getToken(EntireSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(EntireSqlParser.TEMPORARY, 0); }
		public TerminalNode IF() { return getToken(EntireSqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(EntireSqlParser.EXISTS, 0); }
		public ColumnAliasesContext columnAliases() {
			return getRuleContext(ColumnAliasesContext.class,0);
		}
		public TerminalNode NOCOPIES() { return getToken(EntireSqlParser.NOCOPIES, 0); }
		public TerminalNode REPLICATED() { return getToken(EntireSqlParser.REPLICATED, 0); }
		public TerminalNode DISTRIBUTED() { return getToken(EntireSqlParser.DISTRIBUTED, 0); }
		public TerminalNode BY() { return getToken(EntireSqlParser.BY, 0); }
		public TerminalNode AS() { return getToken(EntireSqlParser.AS, 0); }
		public GBaseCreateTableAsContext(GBaseStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGBaseCreateTableAs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGBaseCreateTableAs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGBaseCreateTableAs(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GBaseRenameTableContext extends GBaseStatementContext {
		public QualifiedNameContext oldTableName;
		public QualifiedNameContext newTableName;
		public TerminalNode RENAME() { return getToken(EntireSqlParser.RENAME, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode TO() { return getToken(EntireSqlParser.TO, 0); }
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public GBaseRenameTableContext(GBaseStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGBaseRenameTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGBaseRenameTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGBaseRenameTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GBaseAlterChangeContext extends GBaseStatementContext {
		public QualifiedNameContext tableName;
		public IdentifierContext colOldName;
		public IdentifierContext colNewName;
		public TypeContext columnType;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode CHANGE() { return getToken(EntireSqlParser.CHANGE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public GBaseAlterChangeContext(GBaseStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGBaseAlterChange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGBaseAlterChange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGBaseAlterChange(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GBaseDropIndexContext extends GBaseStatementContext {
		public QualifiedNameContext indexName;
		public QualifiedNameContext tableName;
		public TerminalNode DROP() { return getToken(EntireSqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(EntireSqlParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(EntireSqlParser.ON, 0); }
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public TerminalNode IF() { return getToken(EntireSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(EntireSqlParser.EXISTS, 0); }
		public GBaseDropIndexContext(GBaseStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGBaseDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGBaseDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGBaseDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GBaseAlterIndexContext extends GBaseStatementContext {
		public QualifiedNameContext tableName;
		public IdentifierContext idx;
		public IdentifierContext col;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode ADD() { return getToken(EntireSqlParser.ADD, 0); }
		public TerminalNode INDEX() { return getToken(EntireSqlParser.INDEX, 0); }
		public TerminalNode USING() { return getToken(EntireSqlParser.USING, 0); }
		public TerminalNode HASH() { return getToken(EntireSqlParser.HASH, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode KEY_DC_SIZE() { return getToken(EntireSqlParser.KEY_DC_SIZE, 0); }
		public List<TerminalNode> EQ() { return getTokens(EntireSqlParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(EntireSqlParser.EQ, i);
		}
		public List<NumberContext> number() {
			return getRuleContexts(NumberContext.class);
		}
		public NumberContext number(int i) {
			return getRuleContext(NumberContext.class,i);
		}
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(EntireSqlParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode GLOBAL() { return getToken(EntireSqlParser.GLOBAL, 0); }
		public GBaseAlterIndexContext(GBaseStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGBaseAlterIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGBaseAlterIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGBaseAlterIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GBaseDropNocopiesContext extends GBaseStatementContext {
		public QualifiedNameContext tableName;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode DROP() { return getToken(EntireSqlParser.DROP, 0); }
		public TerminalNode NOCOPIES() { return getToken(EntireSqlParser.NOCOPIES, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public GBaseDropNocopiesContext(GBaseStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGBaseDropNocopies(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGBaseDropNocopies(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGBaseDropNocopies(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GBaseShrinkSpaceContext extends GBaseStatementContext {
		public QualifiedNameContext tableName;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode SHRINK() { return getToken(EntireSqlParser.SHRINK, 0); }
		public TerminalNode SPACE() { return getToken(EntireSqlParser.SPACE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public GBaseShrinkSpaceContext(GBaseStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGBaseShrinkSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGBaseShrinkSpace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGBaseShrinkSpace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GBaseAlterAutoextendContext extends GBaseStatementContext {
		public QualifiedNameContext tableName;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode AUTOEXTEND() { return getToken(EntireSqlParser.AUTOEXTEND, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode OFF() { return getToken(EntireSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(EntireSqlParser.ON, 0); }
		public TerminalNode NEXT() { return getToken(EntireSqlParser.NEXT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public GBaseAlterAutoextendContext(GBaseStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGBaseAlterAutoextend(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGBaseAlterAutoextend(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGBaseAlterAutoextend(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GBaseMergeContext extends GBaseStatementContext {
		public QualifiedNameContext tableName;
		public IdentifierContext tableNameAlias;
		public QualifiedNameContext tableReference;
		public IdentifierContext tableReferenceAlias;
		public TerminalNode MERGE() { return getToken(EntireSqlParser.MERGE, 0); }
		public TerminalNode USING() { return getToken(EntireSqlParser.USING, 0); }
		public TerminalNode ON() { return getToken(EntireSqlParser.ON, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public TerminalNode INTO() { return getToken(EntireSqlParser.INTO, 0); }
		public List<TerminalNode> WHEN() { return getTokens(EntireSqlParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(EntireSqlParser.WHEN, i);
		}
		public List<TerminalNode> MATCHED() { return getTokens(EntireSqlParser.MATCHED); }
		public TerminalNode MATCHED(int i) {
			return getToken(EntireSqlParser.MATCHED, i);
		}
		public List<TerminalNode> THEN() { return getTokens(EntireSqlParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(EntireSqlParser.THEN, i);
		}
		public TerminalNode UPDATE() { return getToken(EntireSqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(EntireSqlParser.SET, 0); }
		public List<PrimaryExpressionContext> primaryExpression() {
			return getRuleContexts(PrimaryExpressionContext.class);
		}
		public PrimaryExpressionContext primaryExpression(int i) {
			return getRuleContext(PrimaryExpressionContext.class,i);
		}
		public List<TerminalNode> EQ() { return getTokens(EntireSqlParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(EntireSqlParser.EQ, i);
		}
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public TerminalNode INSERT() { return getToken(EntireSqlParser.INSERT, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public InsertValuesContext insertValues() {
			return getRuleContext(InsertValuesContext.class,0);
		}
		public GBaseMergeContext(GBaseStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGBaseMerge(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGBaseMerge(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGBaseMerge(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GbaseLoadDataContext extends GBaseStatementContext {
		public StringContext fileList;
		public QualifiedNameContext tablename;
		public TerminalNode LOAD() { return getToken(EntireSqlParser.LOAD, 0); }
		public TerminalNode DATA() { return getToken(EntireSqlParser.DATA, 0); }
		public TerminalNode INFILE() { return getToken(EntireSqlParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(EntireSqlParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode REPLACE() { return getToken(EntireSqlParser.REPLACE, 0); }
		public List<GbaseLoadDataOptionsContext> gbaseLoadDataOptions() {
			return getRuleContexts(GbaseLoadDataOptionsContext.class);
		}
		public GbaseLoadDataOptionsContext gbaseLoadDataOptions(int i) {
			return getRuleContext(GbaseLoadDataOptionsContext.class,i);
		}
		public GbaseLoadDataContext(GBaseStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGbaseLoadData(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGbaseLoadData(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGbaseLoadData(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GBaseCreateTableByLikeContext extends GBaseStatementContext {
		public QualifiedNameContext tableNameDst;
		public QualifiedNameContext tableNameSrc;
		public TerminalNode CREATE() { return getToken(EntireSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode LIKE() { return getToken(EntireSqlParser.LIKE, 0); }
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public TerminalNode TEMPORARY() { return getToken(EntireSqlParser.TEMPORARY, 0); }
		public TerminalNode IF() { return getToken(EntireSqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(EntireSqlParser.EXISTS, 0); }
		public GBaseCreateTableByLikeContext(GBaseStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGBaseCreateTableByLike(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGBaseCreateTableByLike(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGBaseCreateTableByLike(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GBaseAlterTableCompressContext extends GBaseStatementContext {
		public QualifiedNameContext tableName;
		public List<TerminalNode> ALTER() { return getTokens(EntireSqlParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(EntireSqlParser.ALTER, i);
		}
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode COMPRESS() { return getToken(EntireSqlParser.COMPRESS, 0); }
		public List<TerminalNode> INTEGER_VALUE() { return getTokens(EntireSqlParser.INTEGER_VALUE); }
		public TerminalNode INTEGER_VALUE(int i) {
			return getToken(EntireSqlParser.INTEGER_VALUE, i);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public GBaseAlterTableCompressContext(GBaseStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGBaseAlterTableCompress(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGBaseAlterTableCompress(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGBaseAlterTableCompress(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GBaseCreateIndexContext extends GBaseStatementContext {
		public IdentifierContext idx;
		public QualifiedNameContext tableName;
		public IdentifierContext col;
		public TerminalNode CREATE() { return getToken(EntireSqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(EntireSqlParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(EntireSqlParser.ON, 0); }
		public TerminalNode USING() { return getToken(EntireSqlParser.USING, 0); }
		public TerminalNode HASH() { return getToken(EntireSqlParser.HASH, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode KEY_DC_SIZE() { return getToken(EntireSqlParser.KEY_DC_SIZE, 0); }
		public List<TerminalNode> EQ() { return getTokens(EntireSqlParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(EntireSqlParser.EQ, i);
		}
		public List<NumberContext> number() {
			return getRuleContexts(NumberContext.class);
		}
		public NumberContext number(int i) {
			return getRuleContext(NumberContext.class,i);
		}
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(EntireSqlParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode LOCAL() { return getToken(EntireSqlParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(EntireSqlParser.GLOBAL, 0); }
		public GBaseCreateIndexContext(GBaseStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGBaseCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGBaseCreateIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGBaseCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GBaseAlterColCompressContext extends GBaseStatementContext {
		public QualifiedNameContext tableName;
		public IdentifierContext col;
		public List<TerminalNode> ALTER() { return getTokens(EntireSqlParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(EntireSqlParser.ALTER, i);
		}
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode COMPRESS() { return getToken(EntireSqlParser.COMPRESS, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(EntireSqlParser.INTEGER_VALUE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(EntireSqlParser.COLUMN, 0); }
		public GBaseAlterColCompressContext(GBaseStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGBaseAlterColCompress(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGBaseAlterColCompress(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGBaseAlterColCompress(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GBaseStatementContext gBaseStatement() throws RecognitionException {
		GBaseStatementContext _localctx = new GBaseStatementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_gBaseStatement);
		int _la;
		try {
			setState(703);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
			case 1:
				_localctx = new GBaseCreateTableAsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(433);
				match(CREATE);
				setState(435);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(434);
					match(TEMPORARY);
					}
				}

				setState(437);
				match(TABLE);
				setState(441);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
				case 1:
					{
					setState(438);
					match(IF);
					setState(439);
					match(NOT);
					setState(440);
					match(EXISTS);
					}
					break;
				}
				setState(443);
				((GBaseCreateTableAsContext)_localctx).tableName = qualifiedName();
				setState(445);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
				case 1:
					{
					setState(444);
					columnAliases();
					}
					break;
				}
				setState(448);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOCOPIES) {
					{
					setState(447);
					match(NOCOPIES);
					}
				}

				setState(451);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REPLICATED) {
					{
					setState(450);
					match(REPLICATED);
					}
				}

				setState(455);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISTRIBUTED) {
					{
					setState(453);
					match(DISTRIBUTED);
					setState(454);
					match(BY);
					}
				}

				setState(458);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(457);
					match(AS);
					}
				}

				setState(460);
				query();
				}
				break;
			case 2:
				_localctx = new GBaseCreateTableByLikeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(462);
				match(CREATE);
				setState(464);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(463);
					match(TEMPORARY);
					}
				}

				setState(466);
				match(TABLE);
				setState(470);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
				case 1:
					{
					setState(467);
					match(IF);
					setState(468);
					match(NOT);
					setState(469);
					match(EXISTS);
					}
					break;
				}
				setState(472);
				((GBaseCreateTableByLikeContext)_localctx).tableNameDst = qualifiedName();
				setState(473);
				match(LIKE);
				setState(474);
				((GBaseCreateTableByLikeContext)_localctx).tableNameSrc = qualifiedName();
				}
				break;
			case 3:
				_localctx = new GBaseDropNocopiesContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(476);
				match(ALTER);
				setState(477);
				match(TABLE);
				setState(478);
				((GBaseDropNocopiesContext)_localctx).tableName = qualifiedName();
				setState(479);
				match(DROP);
				setState(480);
				match(NOCOPIES);
				}
				break;
			case 4:
				_localctx = new GBaseShrinkSpaceContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(482);
				match(ALTER);
				setState(483);
				match(TABLE);
				setState(484);
				((GBaseShrinkSpaceContext)_localctx).tableName = qualifiedName();
				setState(485);
				match(SHRINK);
				setState(486);
				match(SPACE);
				}
				break;
			case 5:
				_localctx = new GBaseAlterChangeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(488);
				match(ALTER);
				setState(489);
				match(TABLE);
				setState(490);
				((GBaseAlterChangeContext)_localctx).tableName = qualifiedName();
				setState(491);
				match(CHANGE);
				setState(492);
				((GBaseAlterChangeContext)_localctx).colOldName = identifier(0);
				setState(493);
				((GBaseAlterChangeContext)_localctx).colNewName = identifier(0);
				setState(494);
				((GBaseAlterChangeContext)_localctx).columnType = type(0);
				}
				break;
			case 6:
				_localctx = new GBaseAlterModifyContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(496);
				match(ALTER);
				setState(497);
				match(TABLE);
				setState(498);
				((GBaseAlterModifyContext)_localctx).tableName = qualifiedName();
				setState(499);
				match(MODIFY);
				setState(500);
				((GBaseAlterModifyContext)_localctx).colNewName = identifier(0);
				setState(501);
				((GBaseAlterModifyContext)_localctx).columnType = type(0);
				setState(505);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(502);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					{
					setState(503);
					match(AFTER);
					setState(504);
					((GBaseAlterModifyContext)_localctx).columnName = identifier(0);
					}
					}
					break;
				case EOF:
				case T__0:
					break;
				default:
					break;
				}
				}
				break;
			case 7:
				_localctx = new GBaseRenameTableContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(507);
				match(RENAME);
				setState(508);
				match(TABLE);
				setState(509);
				((GBaseRenameTableContext)_localctx).oldTableName = qualifiedName();
				setState(510);
				match(TO);
				setState(511);
				((GBaseRenameTableContext)_localctx).newTableName = qualifiedName();
				}
				break;
			case 8:
				_localctx = new GBaseAlterViewContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(513);
				match(ALTER);
				setState(514);
				match(VIEW);
				setState(515);
				((GBaseAlterViewContext)_localctx).tableName = qualifiedName();
				setState(517);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__1) {
					{
					setState(516);
					columnAliases();
					}
				}

				setState(519);
				match(AS);
				setState(520);
				query();
				}
				break;
			case 9:
				_localctx = new GBaseCreateIndexContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(522);
				match(CREATE);
				setState(523);
				match(INDEX);
				setState(524);
				((GBaseCreateIndexContext)_localctx).idx = identifier(0);
				setState(525);
				match(ON);
				setState(526);
				((GBaseCreateIndexContext)_localctx).tableName = qualifiedName();
				setState(527);
				match(T__1);
				setState(528);
				((GBaseCreateIndexContext)_localctx).col = identifier(0);
				setState(529);
				match(T__3);
				setState(533);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KEY_DC_SIZE) {
					{
					setState(530);
					match(KEY_DC_SIZE);
					setState(531);
					match(EQ);
					setState(532);
					number();
					}
				}

				setState(538);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KEY_BLOCK_SIZE) {
					{
					setState(535);
					match(KEY_BLOCK_SIZE);
					setState(536);
					match(EQ);
					setState(537);
					number();
					}
				}

				setState(540);
				match(USING);
				setState(541);
				match(HASH);
				setState(543);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL || _la==GLOBAL) {
					{
					setState(542);
					_la = _input.LA(1);
					if ( !(_la==LOCAL || _la==GLOBAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 10:
				_localctx = new GBaseAlterIndexContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(545);
				match(ALTER);
				setState(546);
				match(TABLE);
				setState(547);
				((GBaseAlterIndexContext)_localctx).tableName = qualifiedName();
				setState(548);
				match(ADD);
				setState(549);
				match(INDEX);
				setState(550);
				((GBaseAlterIndexContext)_localctx).idx = identifier(0);
				setState(551);
				match(T__1);
				setState(552);
				((GBaseAlterIndexContext)_localctx).col = identifier(0);
				setState(553);
				match(T__3);
				setState(557);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KEY_DC_SIZE) {
					{
					setState(554);
					match(KEY_DC_SIZE);
					setState(555);
					match(EQ);
					setState(556);
					number();
					}
				}

				setState(562);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KEY_BLOCK_SIZE) {
					{
					setState(559);
					match(KEY_BLOCK_SIZE);
					setState(560);
					match(EQ);
					setState(561);
					number();
					}
				}

				setState(564);
				match(USING);
				setState(565);
				match(HASH);
				setState(567);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL) {
					{
					setState(566);
					match(GLOBAL);
					}
				}

				}
				break;
			case 11:
				_localctx = new GBaseDropIndexContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(569);
				match(DROP);
				setState(570);
				match(INDEX);
				setState(573);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
				case 1:
					{
					setState(571);
					match(IF);
					setState(572);
					match(EXISTS);
					}
					break;
				}
				setState(575);
				((GBaseDropIndexContext)_localctx).indexName = qualifiedName();
				setState(576);
				match(ON);
				setState(577);
				((GBaseDropIndexContext)_localctx).tableName = qualifiedName();
				}
				break;
			case 12:
				_localctx = new GBaseAlterAutoextendContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(579);
				match(ALTER);
				setState(580);
				match(TABLE);
				setState(581);
				((GBaseAlterAutoextendContext)_localctx).tableName = qualifiedName();
				setState(582);
				match(AUTOEXTEND);
				setState(587);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					{
					setState(583);
					match(ON);
					setState(584);
					match(NEXT);
					setState(585);
					identifier(0);
					}
					}
					break;
				case OFF:
					{
					setState(586);
					match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 13:
				_localctx = new GBaseAlterColCompressContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(589);
				match(ALTER);
				setState(590);
				match(TABLE);
				setState(591);
				((GBaseAlterColCompressContext)_localctx).tableName = qualifiedName();
				setState(592);
				match(ALTER);
				setState(594);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
				case 1:
					{
					setState(593);
					match(COLUMN);
					}
					break;
				}
				setState(596);
				((GBaseAlterColCompressContext)_localctx).col = identifier(0);
				setState(597);
				match(COMPRESS);
				setState(598);
				match(T__1);
				setState(599);
				match(INTEGER_VALUE);
				setState(600);
				match(T__3);
				}
				break;
			case 14:
				_localctx = new GBaseAlterTableCompressContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(602);
				match(ALTER);
				setState(603);
				match(TABLE);
				setState(604);
				((GBaseAlterTableCompressContext)_localctx).tableName = qualifiedName();
				setState(605);
				match(ALTER);
				setState(606);
				match(COMPRESS);
				setState(607);
				match(T__1);
				setState(608);
				match(INTEGER_VALUE);
				setState(609);
				match(T__2);
				setState(610);
				match(INTEGER_VALUE);
				setState(611);
				match(T__3);
				}
				break;
			case 15:
				_localctx = new GBaseMergeContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(613);
				match(MERGE);
				setState(615);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {
				case 1:
					{
					setState(614);
					match(INTO);
					}
					break;
				}
				setState(617);
				((GBaseMergeContext)_localctx).tableName = qualifiedName();
				setState(619);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALL) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << AT) | (1L << BERNOULLI) | (1L << BETWEEN) | (1L << BY) | (1L << CALL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONSTRAINT) | (1L << CROSS) | (1L << CUBE) | (1L << CURRENT) | (1L << CURRENT_DATE) | (1L << CURRENT_PATH) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DATA) | (1L << DATE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DESC) | (1L << DESCRIBE) | (1L << DISTINCT) | (1L << DISTRIBUTED) | (1L << DROP) | (1L << ELSE) | (1L << ESCAPE) | (1L << EXCEPT) | (1L << EXCLUDING) | (1L << EXECUTE) | (1L << EXISTS) | (1L << EXPLAIN))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXTRACT - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FOR - 64)) | (1L << (FORMAT - 64)) | (1L << (FULL - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUP - 64)) | (1L << (GROUPING - 64)) | (1L << (HAVING - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IN - 64)) | (1L << (INCLUDING - 64)) | (1L << (INNER - 64)) | (1L << (INPUT - 64)) | (1L << (INSERT - 64)) | (1L << (INTERSECT - 64)) | (1L << (MINUSES - 64)) | (1L << (INTERVAL - 64)) | (1L << (INTO - 64)) | (1L << (IO - 64)) | (1L << (IS - 64)) | (1L << (ISOLATION - 64)) | (1L << (JSON - 64)) | (1L << (JOIN - 64)) | (1L << (LAST - 64)) | (1L << (LATERAL - 64)) | (1L << (LEFT - 64)) | (1L << (LEVEL - 64)) | (1L << (LIKE - 64)) | (1L << (LIMIT - 64)) | (1L << (LISTAGG - 64)) | (1L << (LOCALTIME - 64)) | (1L << (LOCALTIMESTAMP - 64)) | (1L << (LOGICAL - 64)) | (1L << (MAP - 64)) | (1L << (MINUTE - 64)) | (1L << (MONTH - 64)) | (1L << (MODIFY - 64)) | (1L << (NATURAL - 64)) | (1L << (NFC - 64)) | (1L << (NFD - 64)) | (1L << (NFKC - 64)) | (1L << (NFKD - 64)) | (1L << (NO - 64)) | (1L << (NORMALIZE - 64)) | (1L << (NULLIF - 64)) | (1L << (NULLS - 64)) | (1L << (ON - 64)) | (1L << (ONLY - 64)) | (1L << (OPTION - 64)) | (1L << (OR - 64)) | (1L << (ORDER - 64)) | (1L << (ORDINALITY - 64)) | (1L << (OUTER - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (OVER - 128)) | (1L << (PARTITION - 128)) | (1L << (PARTITIONS - 128)) | (1L << (PATH - 128)) | (1L << (POSITION - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROPERTIES - 128)) | (1L << (PUBLIC - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (RECURSIVE - 128)) | (1L << (RENAME - 128)) | (1L << (REPEATABLE - 128)) | (1L << (REPLACE - 128)) | (1L << (RESET - 128)) | (1L << (RESTRICT - 128)) | (1L << (REVOKE - 128)) | (1L << (RIGHT - 128)) | (1L << (ROLLBACK - 128)) | (1L << (ROLLUP - 128)) | (1L << (ROW - 128)) | (1L << (ROWS - 128)) | (1L << (SCHEMA - 128)) | (1L << (SCHEMAS - 128)) | (1L << (SECOND - 128)) | (1L << (SERIALIZABLE - 128)) | (1L << (SESSION - 128)) | (1L << (SET - 128)) | (1L << (SETS - 128)) | (1L << (SHOW - 128)) | (1L << (SOME - 128)) | (1L << (START - 128)) | (1L << (STATS - 128)) | (1L << (SUBSTRING - 128)) | (1L << (SYSTEM - 128)) | (1L << (TABLES - 128)) | (1L << (TABLESAMPLE - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TIMESTAMP - 128)) | (1L << (TO - 128)) | (1L << (TRANSACTION - 128)) | (1L << (TRY_CAST - 128)) | (1L << (TYPE - 128)) | (1L << (TRUNCATE - 128)) | (1L << (UPDATE - 128)) | (1L << (UESCAPE - 128)) | (1L << (UNBOUNDED - 128)) | (1L << (UNCOMMITTED - 128)) | (1L << (UNION - 128)) | (1L << (UNNEST - 128)) | (1L << (USE - 128)) | (1L << (VALIDATE - 128)) | (1L << (VERBOSE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (VIEW - 192)) | (1L << (WHEN - 192)) | (1L << (WITH - 192)) | (1L << (WITHIN - 192)) | (1L << (WORK - 192)) | (1L << (WRITE - 192)) | (1L << (YEAR - 192)) | (1L << (ZONE - 192)) | (1L << (SEMI - 192)) | (1L << (SORT - 192)) | (1L << (OFFSET - 192)) | (1L << (DEFAULT - 192)) | (1L << (TABLESPACE - 192)) | (1L << (EXTERNAL - 192)) | (1L << (PURGE - 192)) | (1L << (TEMPORARY - 192)) | (1L << (PRIMARY - 192)) | (1L << (KEY - 192)) | (1L << (DISABLE - 192)) | (1L << (NOVALIDATE - 192)) | (1L << (FOREIGN - 192)) | (1L << (REFERENCES - 192)) | (1L << (PARTITIONED - 192)) | (1L << (CLUSTERED - 192)) | (1L << (SORTED - 192)) | (1L << (BUCKETS - 192)) | (1L << (SKEWED - 192)) | (1L << (STORED - 192)) | (1L << (DELIMITED - 192)) | (1L << (FIELDS - 192)) | (1L << (TERMINATED - 192)) | (1L << (ESCAPED - 192)) | (1L << (COLLECTION - 192)) | (1L << (ITEMS - 192)) | (1L << (KEYS - 192)) | (1L << (LINES - 192)) | (1L << (DEFINED - 192)) | (1L << (SEQUENCEFILE - 192)) | (1L << (TEXTFILE - 192)) | (1L << (RCFILE - 192)) | (1L << (ORC - 192)) | (1L << (ORCFILE - 192)) | (1L << (PARQUET - 192)) | (1L << (AVRO - 192)) | (1L << (JSONFILE - 192)) | (1L << (INPUTFORMAT - 192)) | (1L << (OUTPUTFORMAT - 192)) | (1L << (SERDE - 192)) | (1L << (SERDEPROPERTIES - 192)) | (1L << (LOCATION - 192)) | (1L << (TBLPROPERTIES - 192)) | (1L << (RELY - 192)) | (1L << (EXCHANGE - 192)) | (1L << (RECOVER - 192)) | (1L << (ARCHIVE - 192)) | (1L << (UNARCHIVE - 192)) | (1L << (IGNORE - 192)) | (1L << (PROTECTION - 192)) | (1L << (TOUCH - 192)) | (1L << (ENABLE - 192)) | (1L << (NO_DROP - 192)) | (1L << (OFFLINE - 192)) | (1L << (COMPACT - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (WAIT - 256)) | (1L << (CONCATENATE - 256)) | (1L << (CHANGE - 256)) | (1L << (AFTER - 256)) | (1L << (DEFERRED - 256)) | (1L << (REBUILD - 256)) | (1L << (INDEX - 256)) | (1L << (IDXPROPERTIES - 256)) | (1L << (FUNCTION - 256)) | (1L << (JAR - 256)) | (1L << (FILE - 256)) | (1L << (DATABASE - 256)) | (1L << (DBPROPERTIES - 256)) | (1L << (OWNER - 256)) | (1L << (RELOAD - 256)) | (1L << (USER - 256)) | (1L << (ROLE - 256)) | (1L << (FILEFORMAT - 256)) | (1L << (LOAD - 256)) | (1L << (LOCAL - 256)) | (1L << (INPATH - 256)) | (1L << (DIRECTORY - 256)) | (1L << (VACUUM - 256)) | (1L << (LIST - 256)) | (1L << (SUBPARTITION - 256)) | (1L << (SUBPARTITIONS - 256)) | (1L << (EVERY - 256)) | (1L << (INCLUSIVE - 256)) | (1L << (EXCLUSIVE - 256)) | (1L << (TEMPLATE - 256)) | (1L << (ENCODING - 256)) | (1L << (LOG - 256)) | (1L << (ERRORS - 256)) | (1L << (SEGMENT - 256)) | (1L << (REJECT - 256)) | (1L << (PERCENT - 256)) | (1L << (WRITABLE - 256)) | (1L << (CHECK - 256)) | (1L << (UNIQUE - 256)) | (1L << (CONCURRENTLY - 256)) | (1L << (BITMAP - 256)) | (1L << (FORCE - 256)) | (1L << (SPLIT - 256)) | (1L << (REINDEX - 256)) | (1L << (FREEZE - 256)) | (1L << (MSCK - 256)) | (1L << (REPAIR - 256)) | (1L << (FETCH - 256)) | (1L << (DEFINITION - 256)) | (1L << (LESS - 256)) | (1L << (THAN - 256)) | (1L << (HASH - 256)) | (1L << (NOLOGGING - 256)) | (1L << (STRUCT - 256)) | (1L << (GLOBAL - 256)) | (1L << (PRESERVE - 256)) | (1L << (AUTO_INCREMENT - 256)) | (1L << (ENGINE - 256)) | (1L << (CHARSET - 256)) | (1L << (COMPRESS - 256)) | (1L << (EXPRESS - 256)) | (1L << (REPLICATED - 256)) | (1L << (NOCOPIES - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (SPACE - 320)) | (1L << (SHRINK - 320)) | (1L << (KEY_BLOCK_SIZE - 320)) | (1L << (KEY_DC_SIZE - 320)) | (1L << (AUTOEXTEND - 320)) | (1L << (NEXT - 320)) | (1L << (OFF - 320)) | (1L << (MATCHED - 320)) | (1L << (MERGE - 320)) | (1L << (OUTFILE - 320)) | (1L << (OPTIONALLY - 320)) | (1L << (ENCLOSED - 320)) | (1L << (DOUBLE_ENCLOSED - 320)) | (1L << (NULL_VALUE - 320)) | (1L << (OUTFILEMODE - 320)) | (1L << (HDFS - 320)) | (1L << (WRITEMODE - 320)) | (1L << (NORMAL - 320)) | (1L << (OVERWRITES - 320)) | (1L << (FILECOUNT - 320)) | (1L << (FILESIZE - 320)) | (1L << (CHARACTER - 320)) | (1L << (GBK - 320)) | (1L << (UTF8 - 320)) | (1L << (HEAD - 320)) | (1L << (RMTSELECT - 320)) | (1L << (INFILE - 320)) | (1L << (DATA_FORMAT - 320)) | (1L << (SEPARATOR - 320)) | (1L << (BLANKS - 320)) | (1L << (AUTOFILL - 320)) | (1L << (LENGTH - 320)) | (1L << (TABLE_FIELDS - 320)) | (1L << (MAX_BAD_RECORDS - 320)) | (1L << (DATETIME - 320)) | (1L << (TRACE - 320)) | (1L << (TRACE_PATH - 320)) | (1L << (NOSPLIT - 320)) | (1L << (PARALLEL - 320)) | (1L << (MAX_DATA_PROCESSORS - 320)) | (1L << (MIN_CHUNK_SIZE - 320)) | (1L << (SKIP_BAD_FILE - 320)) | (1L << (NUM - 320)) | (1L << (FILE_FORMAT - 320)) | (1L << (IMMEDIATE - 320)) | (1L << (STARTING - 320)) | (1L << (ENDING - 320)) | (1L << (INITIALLY - 320)) | (1L << (REFRESH - 320)) | (1L << (ACTIVATE - 320)) | (1L << (LOGGED - 320)) | (1L << (EMPTY - 320)) | (1L << (SEQUENCE - 320)) | (1L << (INCREMENT - 320)) | (1L << (MINVALUE - 320)) | (1L << (MAXVALUE - 320)) | (1L << (OVERLAY - 320)) | (1L << (PLACING - 320)) | (1L << (TRIM - 320)) | (1L << (LTRIM - 320)) | (1L << (RTRIM - 320)) | (1L << (BOTH - 320)) | (1L << (TO_CHAR - 320)) | (1L << (AGE - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (DATE_PART - 384)) | (1L << (ISFINITE - 384)) | (1L << (INT - 384)) | (1L << (UNSIGNED - 384)) | (1L << (REGEXP - 384)) | (1L << (BINARY - 384)) | (1L << (LEADING - 384)) | (1L << (TRAILING - 384)) | (1L << (RLIKE - 384)) | (1L << (DATE_SUB - 384)) | (1L << (ADDDATE - 384)) | (1L << (DATE_ADD - 384)) | (1L << (YEAR_MONTH - 384)) | (1L << (DAY_HOUR - 384)) | (1L << (DAY_MINUTE - 384)) | (1L << (DAY_SECOND - 384)) | (1L << (HOUR_MINUTE - 384)) | (1L << (HOUR_SECOND - 384)) | (1L << (MINUTE_SECOND - 384)) | (1L << (UNKNOWN - 384)) | (1L << (IDENTIFIER - 384)) | (1L << (DIGIT_IDENTIFIER - 384)) | (1L << (QUOTED_IDENTIFIER - 384)) | (1L << (BACKQUOTED_IDENTIFIER - 384)))) != 0)) {
					{
					setState(618);
					((GBaseMergeContext)_localctx).tableNameAlias = identifier(0);
					}
				}

				setState(621);
				match(USING);
				setState(622);
				((GBaseMergeContext)_localctx).tableReference = qualifiedName();
				setState(624);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
				case 1:
					{
					setState(623);
					((GBaseMergeContext)_localctx).tableReferenceAlias = identifier(0);
					}
					break;
				}
				setState(626);
				match(ON);
				setState(627);
				booleanExpression(0);
				setState(646);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					setState(628);
					match(WHEN);
					setState(629);
					match(MATCHED);
					setState(630);
					match(THEN);
					setState(631);
					match(UPDATE);
					setState(632);
					match(SET);
					setState(633);
					primaryExpression(0);
					setState(634);
					match(EQ);
					setState(635);
					valueExpression(0);
					setState(643);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(636);
						match(T__2);
						setState(637);
						primaryExpression(0);
						setState(638);
						match(EQ);
						setState(639);
						valueExpression(0);
						}
						}
						setState(645);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(675);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(648);
					match(WHEN);
					setState(649);
					match(NOT);
					setState(650);
					match(MATCHED);
					setState(651);
					match(THEN);
					setState(652);
					match(INSERT);
					setState(653);
					match(T__1);
					setState(657);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
					case 1:
						{
						setState(654);
						identifier(0);
						setState(655);
						match(T__4);
						}
						break;
					}
					setState(659);
					identifier(0);
					setState(669);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(660);
						match(T__2);
						setState(664);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
						case 1:
							{
							setState(661);
							identifier(0);
							setState(662);
							match(T__4);
							}
							break;
						}
						setState(666);
						identifier(0);
						}
						}
						setState(671);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(672);
					match(T__3);
					setState(673);
					insertValues();
					}
				}

				}
				break;
			case 16:
				_localctx = new GBaseSelectIntoOutfileContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(677);
				query();
				setState(678);
				match(INTO);
				setState(679);
				match(OUTFILE);
				setState(680);
				((GBaseSelectIntoOutfileContext)_localctx).fileName = string();
				setState(684);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COLUMNS || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (WITH - 195)) | (1L << (FIELDS - 195)) | (1L << (LINES - 195)))) != 0) || ((((_la - 333)) & ~0x3f) == 0 && ((1L << (_la - 333)) & ((1L << (NULL_VALUE - 333)) | (1L << (OUTFILEMODE - 333)) | (1L << (WRITEMODE - 333)) | (1L << (FILECOUNT - 333)) | (1L << (FILESIZE - 333)) | (1L << (CHARACTER - 333)))) != 0)) {
					{
					{
					setState(681);
					outfileOption();
					}
					}
					setState(686);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 17:
				_localctx = new GbaseLoadDataContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(687);
				match(LOAD);
				setState(688);
				match(DATA);
				setState(689);
				match(INFILE);
				setState(690);
				((GbaseLoadDataContext)_localctx).fileList = string();
				setState(692);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REPLACE) {
					{
					setState(691);
					match(REPLACE);
					}
				}

				setState(694);
				match(INTO);
				setState(695);
				match(TABLE);
				setState(696);
				((GbaseLoadDataContext)_localctx).tablename = qualifiedName();
				setState(700);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==FIELDS || _la==LINES || ((((_la - 333)) & ~0x3f) == 0 && ((1L << (_la - 333)) & ((1L << (NULL_VALUE - 333)) | (1L << (CHARACTER - 333)) | (1L << (DATA_FORMAT - 333)))) != 0)) {
					{
					{
					setState(697);
					gbaseLoadDataOptions();
					}
					}
					setState(702);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GbaseLoadDataOptionsContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(EntireSqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(EntireSqlParser.SET, 0); }
		public TerminalNode GBK() { return getToken(EntireSqlParser.GBK, 0); }
		public TerminalNode UTF8() { return getToken(EntireSqlParser.UTF8, 0); }
		public TerminalNode DATA_FORMAT() { return getToken(EntireSqlParser.DATA_FORMAT, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode HAVING() { return getToken(EntireSqlParser.HAVING, 0); }
		public TerminalNode LINES() { return getToken(EntireSqlParser.LINES, 0); }
		public TerminalNode SEPARATOR() { return getToken(EntireSqlParser.SEPARATOR, 0); }
		public TerminalNode NULL_VALUE() { return getToken(EntireSqlParser.NULL_VALUE, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode FIELDS() { return getToken(EntireSqlParser.FIELDS, 0); }
		public List<LoadDataFiledsOptionsContext> loadDataFiledsOptions() {
			return getRuleContexts(LoadDataFiledsOptionsContext.class);
		}
		public LoadDataFiledsOptionsContext loadDataFiledsOptions(int i) {
			return getRuleContext(LoadDataFiledsOptionsContext.class,i);
		}
		public TerminalNode TERMINATED() { return getToken(EntireSqlParser.TERMINATED, 0); }
		public TerminalNode BY() { return getToken(EntireSqlParser.BY, 0); }
		public GbaseLoadDataOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gbaseLoadDataOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGbaseLoadDataOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGbaseLoadDataOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGbaseLoadDataOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GbaseLoadDataOptionsContext gbaseLoadDataOptions() throws RecognitionException {
		GbaseLoadDataOptionsContext _localctx = new GbaseLoadDataOptionsContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_gbaseLoadDataOptions);
		int _la;
		try {
			int _alt;
			setState(727);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARACTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(705);
				match(CHARACTER);
				setState(706);
				match(SET);
				setState(707);
				_la = _input.LA(1);
				if ( !(_la==GBK || _la==UTF8) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DATA_FORMAT:
				enterOuterAlt(_localctx, 2);
				{
				setState(708);
				match(DATA_FORMAT);
				setState(709);
				number();
				setState(713);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HAVING) {
					{
					setState(710);
					match(HAVING);
					setState(711);
					match(LINES);
					setState(712);
					match(SEPARATOR);
					}
				}

				}
				break;
			case NULL_VALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(715);
				match(NULL_VALUE);
				setState(716);
				string();
				}
				break;
			case FIELDS:
				enterOuterAlt(_localctx, 4);
				{
				setState(717);
				match(FIELDS);
				setState(719);
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(718);
						loadDataFiledsOptions();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(721);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,48,_ctx);
				} while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER );
				}
				break;
			case LINES:
				enterOuterAlt(_localctx, 5);
				{
				setState(723);
				match(LINES);
				setState(724);
				match(TERMINATED);
				setState(725);
				match(BY);
				setState(726);
				string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadDataFiledsOptionsContext extends ParserRuleContext {
		public StringContext format;
		public IdentifierContext col;
		public PrimaryExpressionContext val;
		public TerminalNode TERMINATED() { return getToken(EntireSqlParser.TERMINATED, 0); }
		public TerminalNode BY() { return getToken(EntireSqlParser.BY, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode ENCLOSED() { return getToken(EntireSqlParser.ENCLOSED, 0); }
		public TerminalNode PRESERVE() { return getToken(EntireSqlParser.PRESERVE, 0); }
		public TerminalNode BLANKS() { return getToken(EntireSqlParser.BLANKS, 0); }
		public TerminalNode AUTOFILL() { return getToken(EntireSqlParser.AUTOFILL, 0); }
		public TerminalNode LENGTH() { return getToken(EntireSqlParser.LENGTH, 0); }
		public TerminalNode TABLE_FIELDS() { return getToken(EntireSqlParser.TABLE_FIELDS, 0); }
		public TerminalNode LINES() { return getToken(EntireSqlParser.LINES, 0); }
		public TerminalNode MAX_BAD_RECORDS() { return getToken(EntireSqlParser.MAX_BAD_RECORDS, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode DATETIME() { return getToken(EntireSqlParser.DATETIME, 0); }
		public TerminalNode FORMAT() { return getToken(EntireSqlParser.FORMAT, 0); }
		public TerminalNode DATE() { return getToken(EntireSqlParser.DATE, 0); }
		public TerminalNode TIMESTAMP() { return getToken(EntireSqlParser.TIMESTAMP, 0); }
		public TerminalNode TIME() { return getToken(EntireSqlParser.TIME, 0); }
		public TerminalNode TRACE() { return getToken(EntireSqlParser.TRACE, 0); }
		public TerminalNode TRACE_PATH() { return getToken(EntireSqlParser.TRACE_PATH, 0); }
		public TerminalNode NOSPLIT() { return getToken(EntireSqlParser.NOSPLIT, 0); }
		public TerminalNode PARALLEL() { return getToken(EntireSqlParser.PARALLEL, 0); }
		public TerminalNode MAX_DATA_PROCESSORS() { return getToken(EntireSqlParser.MAX_DATA_PROCESSORS, 0); }
		public TerminalNode MIN_CHUNK_SIZE() { return getToken(EntireSqlParser.MIN_CHUNK_SIZE, 0); }
		public TerminalNode SKIP_BAD_FILE() { return getToken(EntireSqlParser.SKIP_BAD_FILE, 0); }
		public TerminalNode SET() { return getToken(EntireSqlParser.SET, 0); }
		public List<TerminalNode> EQ() { return getTokens(EntireSqlParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(EntireSqlParser.EQ, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<PrimaryExpressionContext> primaryExpression() {
			return getRuleContexts(PrimaryExpressionContext.class);
		}
		public PrimaryExpressionContext primaryExpression(int i) {
			return getRuleContext(PrimaryExpressionContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(EntireSqlParser.IGNORE, 0); }
		public TerminalNode NUM() { return getToken(EntireSqlParser.NUM, 0); }
		public TerminalNode FILE_FORMAT() { return getToken(EntireSqlParser.FILE_FORMAT, 0); }
		public LoadDataFiledsOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataFiledsOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterLoadDataFiledsOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitLoadDataFiledsOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitLoadDataFiledsOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadDataFiledsOptionsContext loadDataFiledsOptions() throws RecognitionException {
		LoadDataFiledsOptionsContext _localctx = new LoadDataFiledsOptionsContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_loadDataFiledsOptions);
		int _la;
		try {
			setState(794);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED:
				enterOuterAlt(_localctx, 1);
				{
				setState(729);
				match(TERMINATED);
				setState(730);
				match(BY);
				setState(731);
				string();
				}
				break;
			case ENCLOSED:
				enterOuterAlt(_localctx, 2);
				{
				setState(732);
				match(ENCLOSED);
				setState(733);
				match(BY);
				setState(734);
				string();
				}
				break;
			case PRESERVE:
				enterOuterAlt(_localctx, 3);
				{
				setState(735);
				match(PRESERVE);
				setState(736);
				match(BLANKS);
				}
				break;
			case AUTOFILL:
				enterOuterAlt(_localctx, 4);
				{
				setState(737);
				match(AUTOFILL);
				}
				break;
			case LENGTH:
				enterOuterAlt(_localctx, 5);
				{
				setState(738);
				match(LENGTH);
				setState(739);
				string();
				}
				break;
			case TABLE_FIELDS:
				enterOuterAlt(_localctx, 6);
				{
				setState(740);
				match(TABLE_FIELDS);
				setState(741);
				string();
				}
				break;
			case LINES:
				enterOuterAlt(_localctx, 7);
				{
				setState(742);
				match(LINES);
				setState(746);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
				case 1:
					{
					setState(743);
					match(TERMINATED);
					setState(744);
					match(BY);
					setState(745);
					string();
					}
					break;
				}
				}
				break;
			case MAX_BAD_RECORDS:
				enterOuterAlt(_localctx, 8);
				{
				setState(748);
				match(MAX_BAD_RECORDS);
				setState(749);
				number();
				}
				break;
			case DATETIME:
				enterOuterAlt(_localctx, 9);
				{
				setState(750);
				match(DATETIME);
				setState(751);
				match(FORMAT);
				setState(752);
				((LoadDataFiledsOptionsContext)_localctx).format = string();
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 10);
				{
				setState(753);
				match(DATE);
				setState(754);
				match(FORMAT);
				setState(755);
				((LoadDataFiledsOptionsContext)_localctx).format = string();
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 11);
				{
				setState(756);
				match(TIMESTAMP);
				setState(757);
				match(FORMAT);
				setState(758);
				((LoadDataFiledsOptionsContext)_localctx).format = string();
				}
				break;
			case TIME:
				enterOuterAlt(_localctx, 12);
				{
				setState(759);
				match(TIME);
				setState(760);
				match(FORMAT);
				setState(761);
				((LoadDataFiledsOptionsContext)_localctx).format = string();
				}
				break;
			case TRACE:
				enterOuterAlt(_localctx, 13);
				{
				setState(762);
				match(TRACE);
				setState(763);
				number();
				}
				break;
			case TRACE_PATH:
				enterOuterAlt(_localctx, 14);
				{
				setState(764);
				match(TRACE_PATH);
				setState(765);
				string();
				}
				break;
			case NOSPLIT:
				enterOuterAlt(_localctx, 15);
				{
				setState(766);
				match(NOSPLIT);
				}
				break;
			case PARALLEL:
				enterOuterAlt(_localctx, 16);
				{
				setState(767);
				match(PARALLEL);
				setState(768);
				number();
				}
				break;
			case MAX_DATA_PROCESSORS:
				enterOuterAlt(_localctx, 17);
				{
				setState(769);
				match(MAX_DATA_PROCESSORS);
				setState(770);
				number();
				}
				break;
			case MIN_CHUNK_SIZE:
				enterOuterAlt(_localctx, 18);
				{
				setState(771);
				match(MIN_CHUNK_SIZE);
				setState(772);
				number();
				}
				break;
			case SKIP_BAD_FILE:
				enterOuterAlt(_localctx, 19);
				{
				setState(773);
				match(SKIP_BAD_FILE);
				setState(774);
				number();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 20);
				{
				setState(775);
				match(SET);
				setState(776);
				((LoadDataFiledsOptionsContext)_localctx).col = identifier(0);
				setState(777);
				match(EQ);
				setState(778);
				((LoadDataFiledsOptionsContext)_localctx).val = primaryExpression(0);
				setState(786);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__2) {
					{
					{
					setState(779);
					match(T__2);
					setState(780);
					((LoadDataFiledsOptionsContext)_localctx).col = identifier(0);
					setState(781);
					match(EQ);
					setState(782);
					((LoadDataFiledsOptionsContext)_localctx).val = primaryExpression(0);
					}
					}
					setState(788);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case IGNORE:
				enterOuterAlt(_localctx, 21);
				{
				setState(789);
				match(IGNORE);
				setState(790);
				match(NUM);
				setState(791);
				match(LINES);
				}
				break;
			case FILE_FORMAT:
				enterOuterAlt(_localctx, 22);
				{
				setState(792);
				match(FILE_FORMAT);
				setState(793);
				((LoadDataFiledsOptionsContext)_localctx).format = string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OutfileOptionContext extends ParserRuleContext {
		public FieldsOutputOptionsContext fieldsOutputOptions() {
			return getRuleContext(FieldsOutputOptionsContext.class,0);
		}
		public LineOutputOptionsContext lineOutputOptions() {
			return getRuleContext(LineOutputOptionsContext.class,0);
		}
		public OtherOutputOptionsContext otherOutputOptions() {
			return getRuleContext(OtherOutputOptionsContext.class,0);
		}
		public OutfileOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outfileOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterOutfileOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitOutfileOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitOutfileOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OutfileOptionContext outfileOption() throws RecognitionException {
		OutfileOptionContext _localctx = new OutfileOptionContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_outfileOption);
		try {
			setState(799);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLUMNS:
			case FIELDS:
				enterOuterAlt(_localctx, 1);
				{
				setState(796);
				fieldsOutputOptions();
				}
				break;
			case LINES:
				enterOuterAlt(_localctx, 2);
				{
				setState(797);
				lineOutputOptions();
				}
				break;
			case WITH:
			case NULL_VALUE:
			case OUTFILEMODE:
			case WRITEMODE:
			case FILECOUNT:
			case FILESIZE:
			case CHARACTER:
				enterOuterAlt(_localctx, 3);
				{
				setState(798);
				otherOutputOptions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldsOutputOptionsContext extends ParserRuleContext {
		public TerminalNode FIELDS() { return getToken(EntireSqlParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(EntireSqlParser.COLUMNS, 0); }
		public List<FieldsOutputOptionContext> fieldsOutputOption() {
			return getRuleContexts(FieldsOutputOptionContext.class);
		}
		public FieldsOutputOptionContext fieldsOutputOption(int i) {
			return getRuleContext(FieldsOutputOptionContext.class,i);
		}
		public FieldsOutputOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldsOutputOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterFieldsOutputOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitFieldsOutputOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitFieldsOutputOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FieldsOutputOptionsContext fieldsOutputOptions() throws RecognitionException {
		FieldsOutputOptionsContext _localctx = new FieldsOutputOptionsContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_fieldsOutputOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(801);
			_la = _input.LA(1);
			if ( !(_la==COLUMNS || _la==FIELDS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(803);
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(802);
				fieldsOutputOption();
				}
				}
				setState(805);
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==TERMINATED || _la==ESCAPED || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (OPTIONALLY - 330)) | (1L << (ENCLOSED - 330)) | (1L << (DOUBLE_ENCLOSED - 330)) | (1L << (LENGTH - 330)))) != 0) || _la==BLOBMODE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldsOutputOptionContext extends ParserRuleContext {
		public TerminalNode TERMINATED() { return getToken(EntireSqlParser.TERMINATED, 0); }
		public TerminalNode BY() { return getToken(EntireSqlParser.BY, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode ENCLOSED() { return getToken(EntireSqlParser.ENCLOSED, 0); }
		public TerminalNode OPTIONALLY() { return getToken(EntireSqlParser.OPTIONALLY, 0); }
		public TerminalNode ESCAPED() { return getToken(EntireSqlParser.ESCAPED, 0); }
		public TerminalNode DOUBLE_ENCLOSED() { return getToken(EntireSqlParser.DOUBLE_ENCLOSED, 0); }
		public TerminalNode LENGTH() { return getToken(EntireSqlParser.LENGTH, 0); }
		public TerminalNode BLOBMODE() { return getToken(EntireSqlParser.BLOBMODE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FieldsOutputOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldsOutputOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterFieldsOutputOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitFieldsOutputOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitFieldsOutputOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FieldsOutputOptionContext fieldsOutputOption() throws RecognitionException {
		FieldsOutputOptionContext _localctx = new FieldsOutputOptionContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_fieldsOutputOption);
		int _la;
		try {
			setState(829);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(807);
				match(TERMINATED);
				setState(808);
				match(BY);
				setState(809);
				string();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(811);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY) {
					{
					setState(810);
					match(OPTIONALLY);
					}
				}

				setState(813);
				match(ENCLOSED);
				setState(814);
				match(BY);
				setState(815);
				string();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(816);
				match(ESCAPED);
				setState(817);
				match(BY);
				setState(818);
				string();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(820);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY) {
					{
					setState(819);
					match(OPTIONALLY);
					}
				}

				setState(822);
				match(DOUBLE_ENCLOSED);
				setState(823);
				match(BY);
				setState(824);
				string();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(825);
				match(LENGTH);
				setState(826);
				string();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(827);
				match(BLOBMODE);
				setState(828);
				identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LineOutputOptionsContext extends ParserRuleContext {
		public TerminalNode LINES() { return getToken(EntireSqlParser.LINES, 0); }
		public List<LineOutputOptionContext> lineOutputOption() {
			return getRuleContexts(LineOutputOptionContext.class);
		}
		public LineOutputOptionContext lineOutputOption(int i) {
			return getRuleContext(LineOutputOptionContext.class,i);
		}
		public LineOutputOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lineOutputOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterLineOutputOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitLineOutputOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitLineOutputOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LineOutputOptionsContext lineOutputOptions() throws RecognitionException {
		LineOutputOptionsContext _localctx = new LineOutputOptionsContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_lineOutputOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(831);
			match(LINES);
			setState(833);
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(832);
				lineOutputOption();
				}
				}
				setState(835);
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==TERMINATED || _la==STARTING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LineOutputOptionContext extends ParserRuleContext {
		public TerminalNode TERMINATED() { return getToken(EntireSqlParser.TERMINATED, 0); }
		public TerminalNode BY() { return getToken(EntireSqlParser.BY, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode STARTING() { return getToken(EntireSqlParser.STARTING, 0); }
		public LineOutputOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lineOutputOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterLineOutputOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitLineOutputOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitLineOutputOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LineOutputOptionContext lineOutputOption() throws RecognitionException {
		LineOutputOptionContext _localctx = new LineOutputOptionContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_lineOutputOption);
		try {
			setState(843);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED:
				enterOuterAlt(_localctx, 1);
				{
				setState(837);
				match(TERMINATED);
				setState(838);
				match(BY);
				setState(839);
				string();
				}
				break;
			case STARTING:
				enterOuterAlt(_localctx, 2);
				{
				setState(840);
				match(STARTING);
				setState(841);
				match(BY);
				setState(842);
				string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OtherOutputOptionsContext extends ParserRuleContext {
		public TerminalNode NULL_VALUE() { return getToken(EntireSqlParser.NULL_VALUE, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode OUTFILEMODE() { return getToken(EntireSqlParser.OUTFILEMODE, 0); }
		public TerminalNode BY() { return getToken(EntireSqlParser.BY, 0); }
		public TerminalNode LOCAL() { return getToken(EntireSqlParser.LOCAL, 0); }
		public TerminalNode HDFS() { return getToken(EntireSqlParser.HDFS, 0); }
		public TerminalNode WRITEMODE() { return getToken(EntireSqlParser.WRITEMODE, 0); }
		public TerminalNode NORMAL() { return getToken(EntireSqlParser.NORMAL, 0); }
		public TerminalNode OVERWRITES() { return getToken(EntireSqlParser.OVERWRITES, 0); }
		public TerminalNode FILECOUNT() { return getToken(EntireSqlParser.FILECOUNT, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode FILESIZE() { return getToken(EntireSqlParser.FILESIZE, 0); }
		public TerminalNode CHARACTER() { return getToken(EntireSqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(EntireSqlParser.SET, 0); }
		public TerminalNode GBK() { return getToken(EntireSqlParser.GBK, 0); }
		public TerminalNode UTF8() { return getToken(EntireSqlParser.UTF8, 0); }
		public TerminalNode WITH() { return getToken(EntireSqlParser.WITH, 0); }
		public TerminalNode HEAD() { return getToken(EntireSqlParser.HEAD, 0); }
		public OtherOutputOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_otherOutputOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterOtherOutputOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitOtherOutputOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitOtherOutputOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OtherOutputOptionsContext otherOutputOptions() throws RecognitionException {
		OtherOutputOptionsContext _localctx = new OtherOutputOptionsContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_otherOutputOptions);
		int _la;
		try {
			setState(862);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULL_VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(845);
				match(NULL_VALUE);
				setState(846);
				string();
				}
				break;
			case OUTFILEMODE:
				enterOuterAlt(_localctx, 2);
				{
				setState(847);
				match(OUTFILEMODE);
				setState(848);
				match(BY);
				setState(849);
				_la = _input.LA(1);
				if ( !(_la==LOCAL || _la==HDFS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case WRITEMODE:
				enterOuterAlt(_localctx, 3);
				{
				setState(850);
				match(WRITEMODE);
				setState(851);
				match(BY);
				setState(852);
				_la = _input.LA(1);
				if ( !(_la==NORMAL || _la==OVERWRITES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case FILECOUNT:
				enterOuterAlt(_localctx, 4);
				{
				setState(853);
				match(FILECOUNT);
				setState(854);
				number();
				}
				break;
			case FILESIZE:
				enterOuterAlt(_localctx, 5);
				{
				setState(855);
				match(FILESIZE);
				setState(856);
				number();
				}
				break;
			case CHARACTER:
				enterOuterAlt(_localctx, 6);
				{
				setState(857);
				match(CHARACTER);
				setState(858);
				match(SET);
				setState(859);
				_la = _input.LA(1);
				if ( !(_la==GBK || _la==UTF8) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 7);
				{
				setState(860);
				match(WITH);
				setState(861);
				match(HEAD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HiveStatementContext extends ParserRuleContext {
		public HiveStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hiveStatement; }

		public HiveStatementContext() { }
		public void copyFrom(HiveStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class HiveAlterTablePropertiesContext extends HiveStatementContext {
		public QualifiedNameContext tablename;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode SET() { return getToken(EntireSqlParser.SET, 0); }
		public TerminalNode TBLPROPERTIES() { return getToken(EntireSqlParser.TBLPROPERTIES, 0); }
		public MultiStrEvaluationContext multiStrEvaluation() {
			return getRuleContext(MultiStrEvaluationContext.class,0);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public HiveAlterTablePropertiesContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveAlterTableProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveAlterTableProperties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveAlterTableProperties(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveAlterTableStoragePropertiesContext extends HiveStatementContext {
		public QualifiedNameContext tablename;
		public Token numBuckets;
		public StringContext dir;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode CLUSTERED() { return getToken(EntireSqlParser.CLUSTERED, 0); }
		public List<TerminalNode> BY() { return getTokens(EntireSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(EntireSqlParser.BY, i);
		}
		public ColumnAliasesContext columnAliases() {
			return getRuleContext(ColumnAliasesContext.class,0);
		}
		public TerminalNode INTO() { return getToken(EntireSqlParser.INTO, 0); }
		public TerminalNode BUCKETS() { return getToken(EntireSqlParser.BUCKETS, 0); }
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public TerminalNode STORED() { return getToken(EntireSqlParser.STORED, 0); }
		public TerminalNode AS() { return getToken(EntireSqlParser.AS, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(EntireSqlParser.INTEGER_VALUE, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode SORTED() { return getToken(EntireSqlParser.SORTED, 0); }
		public List<SortItemContext> sortItem() {
			return getRuleContexts(SortItemContext.class);
		}
		public SortItemContext sortItem(int i) {
			return getRuleContext(SortItemContext.class,i);
		}
		public TerminalNode ASC() { return getToken(EntireSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(EntireSqlParser.DESC, 0); }
		public HiveAlterTableStoragePropertiesContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveAlterTableStorageProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveAlterTableStorageProperties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveAlterTableStorageProperties(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveAlterTableSerDeContext extends HiveStatementContext {
		public QualifiedNameContext tablename;
		public StringExpContext serdeClassName;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(EntireSqlParser.SET, 0); }
		public TerminalNode SERDEPROPERTIES() { return getToken(EntireSqlParser.SERDEPROPERTIES, 0); }
		public MultiStrEvaluationContext multiStrEvaluation() {
			return getRuleContext(MultiStrEvaluationContext.class,0);
		}
		public TerminalNode SERDE() { return getToken(EntireSqlParser.SERDE, 0); }
		public TerminalNode PARTITION() { return getToken(EntireSqlParser.PARTITION, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public StringExpContext stringExp() {
			return getRuleContext(StringExpContext.class,0);
		}
		public TerminalNode WITH() { return getToken(EntireSqlParser.WITH, 0); }
		public HiveAlterTableSerDeContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveAlterTableSerDe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveAlterTableSerDe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveAlterTableSerDe(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveDropIndexContext extends HiveStatementContext {
		public QualifiedNameContext indexName;
		public QualifiedNameContext tableName;
		public TerminalNode DROP() { return getToken(EntireSqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(EntireSqlParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(EntireSqlParser.ON, 0); }
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public TerminalNode IF() { return getToken(EntireSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(EntireSqlParser.EXISTS, 0); }
		public HiveDropIndexContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveCreateDatabaseContext extends HiveStatementContext {
		public QualifiedNameContext databaseName;
		public StringContext databaseComment;
		public StringExpContext hdfsPath;
		public TerminalNode CREATE() { return getToken(EntireSqlParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(EntireSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(EntireSqlParser.SCHEMA, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(EntireSqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(EntireSqlParser.EXISTS, 0); }
		public TerminalNode COMMENT() { return getToken(EntireSqlParser.COMMENT, 0); }
		public TerminalNode LOCATION() { return getToken(EntireSqlParser.LOCATION, 0); }
		public TerminalNode WITH() { return getToken(EntireSqlParser.WITH, 0); }
		public TerminalNode DBPROPERTIES() { return getToken(EntireSqlParser.DBPROPERTIES, 0); }
		public MultiKeyEvaluationContext multiKeyEvaluation() {
			return getRuleContext(MultiKeyEvaluationContext.class,0);
		}
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public StringExpContext stringExp() {
			return getRuleContext(StringExpContext.class,0);
		}
		public HiveCreateDatabaseContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveCreateDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveCreateDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveCreateDatabase(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveTruncateTableContext extends HiveStatementContext {
		public QualifiedNameContext tableName;
		public TerminalNode TRUNCATE() { return getToken(EntireSqlParser.TRUNCATE, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(EntireSqlParser.PARTITION, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public HiveTruncateTableContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveTruncateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveTruncateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveTruncateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveCreateTableContext extends HiveStatementContext {
		public QualifiedNameContext tablename;
		public StringContext tableComment;
		public TableElementsContext partionInfo;
		public Token numBuckets;
		public StringContext dir;
		public StringExpContext storageClassName;
		public StringExpContext hdfsPath;
		public TerminalNode CREATE() { return getToken(EntireSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(EntireSqlParser.TEMPORARY, 0); }
		public TerminalNode EXTERNAL() { return getToken(EntireSqlParser.EXTERNAL, 0); }
		public TerminalNode IF() { return getToken(EntireSqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(EntireSqlParser.EXISTS, 0); }
		public List<TableElementsContext> tableElements() {
			return getRuleContexts(TableElementsContext.class);
		}
		public TableElementsContext tableElements(int i) {
			return getRuleContext(TableElementsContext.class,i);
		}
		public ConstraintSpecificationContext constraintSpecification() {
			return getRuleContext(ConstraintSpecificationContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(EntireSqlParser.COMMENT, 0); }
		public TerminalNode PARTITIONED() { return getToken(EntireSqlParser.PARTITIONED, 0); }
		public List<TerminalNode> BY() { return getTokens(EntireSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(EntireSqlParser.BY, i);
		}
		public TerminalNode CLUSTERED() { return getToken(EntireSqlParser.CLUSTERED, 0); }
		public List<ColumnAliasesContext> columnAliases() {
			return getRuleContexts(ColumnAliasesContext.class);
		}
		public ColumnAliasesContext columnAliases(int i) {
			return getRuleContext(ColumnAliasesContext.class,i);
		}
		public TerminalNode INTO() { return getToken(EntireSqlParser.INTO, 0); }
		public TerminalNode BUCKETS() { return getToken(EntireSqlParser.BUCKETS, 0); }
		public TerminalNode SKEWED() { return getToken(EntireSqlParser.SKEWED, 0); }
		public TerminalNode ON() { return getToken(EntireSqlParser.ON, 0); }
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public List<TerminalNode> STORED() { return getTokens(EntireSqlParser.STORED); }
		public TerminalNode STORED(int i) {
			return getToken(EntireSqlParser.STORED, i);
		}
		public TerminalNode LOCATION() { return getToken(EntireSqlParser.LOCATION, 0); }
		public TerminalNode TBLPROPERTIES() { return getToken(EntireSqlParser.TBLPROPERTIES, 0); }
		public List<MultiStrEvaluationContext> multiStrEvaluation() {
			return getRuleContexts(MultiStrEvaluationContext.class);
		}
		public MultiStrEvaluationContext multiStrEvaluation(int i) {
			return getRuleContext(MultiStrEvaluationContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(EntireSqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(EntireSqlParser.AS, i);
		}
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode INTEGER_VALUE() { return getToken(EntireSqlParser.INTEGER_VALUE, 0); }
		public List<StringExpContext> stringExp() {
			return getRuleContexts(StringExpContext.class);
		}
		public StringExpContext stringExp(int i) {
			return getRuleContext(StringExpContext.class,i);
		}
		public TerminalNode SORTED() { return getToken(EntireSqlParser.SORTED, 0); }
		public List<SortItemContext> sortItem() {
			return getRuleContexts(SortItemContext.class);
		}
		public SortItemContext sortItem(int i) {
			return getRuleContext(SortItemContext.class,i);
		}
		public TerminalNode ROW() { return getToken(EntireSqlParser.ROW, 0); }
		public TerminalNode FORMAT() { return getToken(EntireSqlParser.FORMAT, 0); }
		public RowFormatContext rowFormat() {
			return getRuleContext(RowFormatContext.class,0);
		}
		public FileFormatContext fileFormat() {
			return getRuleContext(FileFormatContext.class,0);
		}
		public TerminalNode WITH() { return getToken(EntireSqlParser.WITH, 0); }
		public TerminalNode SERDEPROPERTIES() { return getToken(EntireSqlParser.SERDEPROPERTIES, 0); }
		public TerminalNode ASC() { return getToken(EntireSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(EntireSqlParser.DESC, 0); }
		public HiveCreateTableContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveAlterTableSkewedContext extends HiveStatementContext {
		public QualifiedNameContext tablename;
		public StringContext dir;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode SKEWED() { return getToken(EntireSqlParser.SKEWED, 0); }
		public TerminalNode BY() { return getToken(EntireSqlParser.BY, 0); }
		public List<ColumnAliasesContext> columnAliases() {
			return getRuleContexts(ColumnAliasesContext.class);
		}
		public ColumnAliasesContext columnAliases(int i) {
			return getRuleContext(ColumnAliasesContext.class,i);
		}
		public TerminalNode ON() { return getToken(EntireSqlParser.ON, 0); }
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public TerminalNode SET() { return getToken(EntireSqlParser.SET, 0); }
		public TerminalNode LOCATION() { return getToken(EntireSqlParser.LOCATION, 0); }
		public MultiKeyEvaluationContext multiKeyEvaluation() {
			return getRuleContext(MultiKeyEvaluationContext.class,0);
		}
		public TerminalNode STORED() { return getToken(EntireSqlParser.STORED, 0); }
		public TerminalNode AS() { return getToken(EntireSqlParser.AS, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public HiveAlterTableSkewedContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveAlterTableSkewed(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveAlterTableSkewed(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveAlterTableSkewed(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveCreatePermanentFunctionsContext extends HiveStatementContext {
		public QualifiedNameContext functionName;
		public StringExpContext className;
		public StringExpContext fileUri;
		public TerminalNode CREATE() { return getToken(EntireSqlParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(EntireSqlParser.FUNCTION, 0); }
		public TerminalNode AS() { return getToken(EntireSqlParser.AS, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public List<StringExpContext> stringExp() {
			return getRuleContexts(StringExpContext.class);
		}
		public StringExpContext stringExp(int i) {
			return getRuleContext(StringExpContext.class,i);
		}
		public TerminalNode USING() { return getToken(EntireSqlParser.USING, 0); }
		public List<TerminalNode> JAR() { return getTokens(EntireSqlParser.JAR); }
		public TerminalNode JAR(int i) {
			return getToken(EntireSqlParser.JAR, i);
		}
		public List<TerminalNode> FILE() { return getTokens(EntireSqlParser.FILE); }
		public TerminalNode FILE(int i) {
			return getToken(EntireSqlParser.FILE, i);
		}
		public List<TerminalNode> ARCHIVE() { return getTokens(EntireSqlParser.ARCHIVE); }
		public TerminalNode ARCHIVE(int i) {
			return getToken(EntireSqlParser.ARCHIVE, i);
		}
		public HiveCreatePermanentFunctionsContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveCreatePermanentFunctions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveCreatePermanentFunctions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveCreatePermanentFunctions(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveReloadFunctionsContext extends HiveStatementContext {
		public TerminalNode RELOAD() { return getToken(EntireSqlParser.RELOAD, 0); }
		public TerminalNode FUNCTION() { return getToken(EntireSqlParser.FUNCTION, 0); }
		public HiveReloadFunctionsContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveReloadFunctions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveReloadFunctions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveReloadFunctions(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveMultiInsertContext extends HiveStatementContext {
		public QualifiedNameContext tableName;
		public TerminalNode FROM() { return getToken(EntireSqlParser.FROM, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public List<InsertStmContext> insertStm() {
			return getRuleContexts(InsertStmContext.class);
		}
		public InsertStmContext insertStm(int i) {
			return getRuleContext(InsertStmContext.class,i);
		}
		public HiveMultiInsertContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveMultiInsert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveMultiInsert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveMultiInsert(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveDropDatabaseContext extends HiveStatementContext {
		public QualifiedNameContext databaseName;
		public TerminalNode DROP() { return getToken(EntireSqlParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(EntireSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(EntireSqlParser.SCHEMA, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(EntireSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(EntireSqlParser.EXISTS, 0); }
		public TerminalNode RESTRICT() { return getToken(EntireSqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(EntireSqlParser.CASCADE, 0); }
		public HiveDropDatabaseContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveDropDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveDropDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveDropDatabase(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveAlterColumnContext extends HiveStatementContext {
		public QualifiedNameContext tableName;
		public IdentifierContext colOldName;
		public IdentifierContext colNewName;
		public TypeContext columnType;
		public StringContext colComment;
		public IdentifierContext columnName;
		public IdentifierContext colName;
		public TypeContext dataType;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode CHANGE() { return getToken(EntireSqlParser.CHANGE, 0); }
		public TerminalNode COLUMNS() { return getToken(EntireSqlParser.COLUMNS, 0); }
		public TerminalNode PARTITION() { return getToken(EntireSqlParser.PARTITION, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode ADD() { return getToken(EntireSqlParser.ADD, 0); }
		public TerminalNode REPLACE() { return getToken(EntireSqlParser.REPLACE, 0); }
		public TerminalNode COLUMN() { return getToken(EntireSqlParser.COLUMN, 0); }
		public TerminalNode COMMENT() { return getToken(EntireSqlParser.COMMENT, 0); }
		public TerminalNode FIRST() { return getToken(EntireSqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(EntireSqlParser.AFTER, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode CASCADE() { return getToken(EntireSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(EntireSqlParser.RESTRICT, 0); }
		public HiveAlterColumnContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveAlterColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveAlterColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveAlterColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveLoadFileIntoTableContext extends HiveStatementContext {
		public StringExpContext filePath;
		public QualifiedNameContext tablename;
		public TerminalNode LOAD() { return getToken(EntireSqlParser.LOAD, 0); }
		public TerminalNode DATA() { return getToken(EntireSqlParser.DATA, 0); }
		public TerminalNode INPATH() { return getToken(EntireSqlParser.INPATH, 0); }
		public TerminalNode INTO() { return getToken(EntireSqlParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public StringExpContext stringExp() {
			return getRuleContext(StringExpContext.class,0);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(EntireSqlParser.LOCAL, 0); }
		public TerminalNode OVERWRITE() { return getToken(EntireSqlParser.OVERWRITE, 0); }
		public TerminalNode PARTITION() { return getToken(EntireSqlParser.PARTITION, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public HiveLoadFileIntoTableContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveLoadFileIntoTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveLoadFileIntoTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveLoadFileIntoTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveDropTableContext extends HiveStatementContext {
		public QualifiedNameContext tableName;
		public TerminalNode DROP() { return getToken(EntireSqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(EntireSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(EntireSqlParser.EXISTS, 0); }
		public TerminalNode PURGE() { return getToken(EntireSqlParser.PURGE, 0); }
		public HiveDropTableContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveDropTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveDropTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveDropTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveAlterTableConstraintsContext extends HiveStatementContext {
		public QualifiedNameContext tablename;
		public IdentifierContext constraintName;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public TerminalNode ADD() { return getToken(EntireSqlParser.ADD, 0); }
		public TerminalNode CONSTRAINT() { return getToken(EntireSqlParser.CONSTRAINT, 0); }
		public TerminalNode PRIMARY() { return getToken(EntireSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(EntireSqlParser.KEY, 0); }
		public List<ColumnAliasesContext> columnAliases() {
			return getRuleContexts(ColumnAliasesContext.class);
		}
		public ColumnAliasesContext columnAliases(int i) {
			return getRuleContext(ColumnAliasesContext.class,i);
		}
		public TerminalNode DISABLE() { return getToken(EntireSqlParser.DISABLE, 0); }
		public TerminalNode NOVALIDATE() { return getToken(EntireSqlParser.NOVALIDATE, 0); }
		public TerminalNode FOREIGN() { return getToken(EntireSqlParser.FOREIGN, 0); }
		public TerminalNode REFERENCES() { return getToken(EntireSqlParser.REFERENCES, 0); }
		public TerminalNode RELY() { return getToken(EntireSqlParser.RELY, 0); }
		public TerminalNode DROP() { return getToken(EntireSqlParser.DROP, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public HiveAlterTableConstraintsContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveAlterTableConstraints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveAlterTableConstraints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveAlterTableConstraints(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveDropViewContext extends HiveStatementContext {
		public QualifiedNameContext viewName;
		public TerminalNode DROP() { return getToken(EntireSqlParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(EntireSqlParser.VIEW, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(EntireSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(EntireSqlParser.EXISTS, 0); }
		public HiveDropViewContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveDropView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveDropView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveDropView(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveDropFunctionsContext extends HiveStatementContext {
		public QualifiedNameContext functionName;
		public TerminalNode DROP() { return getToken(EntireSqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(EntireSqlParser.FUNCTION, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(EntireSqlParser.TEMPORARY, 0); }
		public TerminalNode IF() { return getToken(EntireSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(EntireSqlParser.EXISTS, 0); }
		public HiveDropFunctionsContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveDropFunctions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveDropFunctions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveDropFunctions(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveAlterDatabaseContext extends HiveStatementContext {
		public QualifiedNameContext databaseName;
		public IdentifierContext userOrRole;
		public StringExpContext hdfsPath;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode SET() { return getToken(EntireSqlParser.SET, 0); }
		public TerminalNode DATABASE() { return getToken(EntireSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(EntireSqlParser.SCHEMA, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode DBPROPERTIES() { return getToken(EntireSqlParser.DBPROPERTIES, 0); }
		public MultiKeyEvaluationContext multiKeyEvaluation() {
			return getRuleContext(MultiKeyEvaluationContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(EntireSqlParser.OWNER, 0); }
		public TerminalNode LOCATION() { return getToken(EntireSqlParser.LOCATION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StringExpContext stringExp() {
			return getRuleContext(StringExpContext.class,0);
		}
		public TerminalNode USER() { return getToken(EntireSqlParser.USER, 0); }
		public TerminalNode ROLE() { return getToken(EntireSqlParser.ROLE, 0); }
		public HiveAlterDatabaseContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveAlterDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveAlterDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveAlterDatabase(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveAlterPartitionContext extends HiveStatementContext {
		public QualifiedNameContext tablename;
		public StringExpContext location;
		public QualifiedNameContext table_name;
		public StringExpContext compactionType;
		public List<TerminalNode> ALTER() { return getTokens(EntireSqlParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(EntireSqlParser.ALTER, i);
		}
		public List<TerminalNode> TABLE() { return getTokens(EntireSqlParser.TABLE); }
		public TerminalNode TABLE(int i) {
			return getToken(EntireSqlParser.TABLE, i);
		}
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public TerminalNode ADD() { return getToken(EntireSqlParser.ADD, 0); }
		public List<TerminalNode> PARTITION() { return getTokens(EntireSqlParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(EntireSqlParser.PARTITION, i);
		}
		public List<PartitionSpecContext> partitionSpec() {
			return getRuleContexts(PartitionSpecContext.class);
		}
		public PartitionSpecContext partitionSpec(int i) {
			return getRuleContext(PartitionSpecContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(EntireSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(EntireSqlParser.TO, 0); }
		public TerminalNode EXCHANGE() { return getToken(EntireSqlParser.EXCHANGE, 0); }
		public TerminalNode WITH() { return getToken(EntireSqlParser.WITH, 0); }
		public TerminalNode RECOVER() { return getToken(EntireSqlParser.RECOVER, 0); }
		public TerminalNode PARTITIONS() { return getToken(EntireSqlParser.PARTITIONS, 0); }
		public TerminalNode DROP() { return getToken(EntireSqlParser.DROP, 0); }
		public TerminalNode SET() { return getToken(EntireSqlParser.SET, 0); }
		public TerminalNode FILEFORMAT() { return getToken(EntireSqlParser.FILEFORMAT, 0); }
		public FileFormatContext fileFormat() {
			return getRuleContext(FileFormatContext.class,0);
		}
		public List<TerminalNode> LOCATION() { return getTokens(EntireSqlParser.LOCATION); }
		public TerminalNode LOCATION(int i) {
			return getToken(EntireSqlParser.LOCATION, i);
		}
		public TerminalNode TOUCH() { return getToken(EntireSqlParser.TOUCH, 0); }
		public TerminalNode COMPACT() { return getToken(EntireSqlParser.COMPACT, 0); }
		public TerminalNode CONCATENATE() { return getToken(EntireSqlParser.CONCATENATE, 0); }
		public TerminalNode UPDATE() { return getToken(EntireSqlParser.UPDATE, 0); }
		public TerminalNode COLUMNS() { return getToken(EntireSqlParser.COLUMNS, 0); }
		public List<StringExpContext> stringExp() {
			return getRuleContexts(StringExpContext.class);
		}
		public StringExpContext stringExp(int i) {
			return getRuleContext(StringExpContext.class,i);
		}
		public TerminalNode ENABLE() { return getToken(EntireSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(EntireSqlParser.DISABLE, 0); }
		public TerminalNode NO_DROP() { return getToken(EntireSqlParser.NO_DROP, 0); }
		public TerminalNode OFFLINE() { return getToken(EntireSqlParser.OFFLINE, 0); }
		public TerminalNode IF() { return getToken(EntireSqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(EntireSqlParser.EXISTS, 0); }
		public TerminalNode IGNORE() { return getToken(EntireSqlParser.IGNORE, 0); }
		public TerminalNode PROTECTION() { return getToken(EntireSqlParser.PROTECTION, 0); }
		public TerminalNode PURGE() { return getToken(EntireSqlParser.PURGE, 0); }
		public TerminalNode AND() { return getToken(EntireSqlParser.AND, 0); }
		public TerminalNode WAIT() { return getToken(EntireSqlParser.WAIT, 0); }
		public TerminalNode OVERWRITE() { return getToken(EntireSqlParser.OVERWRITE, 0); }
		public TerminalNode TBLPROPERTIES() { return getToken(EntireSqlParser.TBLPROPERTIES, 0); }
		public MultiStrEvaluationContext multiStrEvaluation() {
			return getRuleContext(MultiStrEvaluationContext.class,0);
		}
		public TerminalNode CASCADE() { return getToken(EntireSqlParser.CASCADE, 0); }
		public HiveAlterPartitionContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveAlterPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveAlterPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveAlterPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveWriteDataToFileContext extends HiveStatementContext {
		public HiveWriteDataToFileStmContext hiveWriteDataToFileStm() {
			return getRuleContext(HiveWriteDataToFileStmContext.class,0);
		}
		public HiveWriteDataToFileContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveWriteDataToFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveWriteDataToFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveWriteDataToFile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveSetPropertiesContext extends HiveStatementContext {
		public TerminalNode SET() { return getToken(EntireSqlParser.SET, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode EQ() { return getToken(EntireSqlParser.EQ, 0); }
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public HiveSetPropertiesContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveSetProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveSetProperties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveSetProperties(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ArchivePartitionContext extends HiveStatementContext {
		public QualifiedNameContext tableName;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode PARTITION() { return getToken(EntireSqlParser.PARTITION, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode ARCHIVE() { return getToken(EntireSqlParser.ARCHIVE, 0); }
		public TerminalNode UNARCHIVE() { return getToken(EntireSqlParser.UNARCHIVE, 0); }
		public ArchivePartitionContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterArchivePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitArchivePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitArchivePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveCreateTemporaryFunctionsContext extends HiveStatementContext {
		public QualifiedNameContext functionName;
		public StringExpContext className;
		public TerminalNode CREATE() { return getToken(EntireSqlParser.CREATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(EntireSqlParser.TEMPORARY, 0); }
		public TerminalNode FUNCTION() { return getToken(EntireSqlParser.FUNCTION, 0); }
		public TerminalNode AS() { return getToken(EntireSqlParser.AS, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public StringExpContext stringExp() {
			return getRuleContext(StringExpContext.class,0);
		}
		public HiveCreateTemporaryFunctionsContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveCreateTemporaryFunctions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveCreateTemporaryFunctions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveCreateTemporaryFunctions(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveCreateViewContext extends HiveStatementContext {
		public QualifiedNameContext viewName;
		public TerminalNode CREATE() { return getToken(EntireSqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(EntireSqlParser.VIEW, 0); }
		public TerminalNode AS() { return getToken(EntireSqlParser.AS, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(EntireSqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(EntireSqlParser.EXISTS, 0); }
		public List<ColumnDefinitionNoTypeContext> columnDefinitionNoType() {
			return getRuleContexts(ColumnDefinitionNoTypeContext.class);
		}
		public ColumnDefinitionNoTypeContext columnDefinitionNoType(int i) {
			return getRuleContext(ColumnDefinitionNoTypeContext.class,i);
		}
		public TerminalNode COMMENT() { return getToken(EntireSqlParser.COMMENT, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode TBLPROPERTIES() { return getToken(EntireSqlParser.TBLPROPERTIES, 0); }
		public MultiKeyEvaluationContext multiKeyEvaluation() {
			return getRuleContext(MultiKeyEvaluationContext.class,0);
		}
		public HiveCreateViewContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveCreateView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveCreateView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveCreateView(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveAlterViewAsSelectContext extends HiveStatementContext {
		public QualifiedNameContext viewName;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(EntireSqlParser.VIEW, 0); }
		public TerminalNode AS() { return getToken(EntireSqlParser.AS, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public HiveAlterViewAsSelectContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveAlterViewAsSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveAlterViewAsSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveAlterViewAsSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveCreateTableByLikeContext extends HiveStatementContext {
		public QualifiedNameContext tablename;
		public QualifiedNameContext existingTableOrViewName;
		public StringExpContext hdfsPath;
		public TerminalNode CREATE() { return getToken(EntireSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode LIKE() { return getToken(EntireSqlParser.LIKE, 0); }
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public TerminalNode TEMPORARY() { return getToken(EntireSqlParser.TEMPORARY, 0); }
		public TerminalNode EXTERNAL() { return getToken(EntireSqlParser.EXTERNAL, 0); }
		public TerminalNode IF() { return getToken(EntireSqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(EntireSqlParser.EXISTS, 0); }
		public TerminalNode LOCATION() { return getToken(EntireSqlParser.LOCATION, 0); }
		public StringExpContext stringExp() {
			return getRuleContext(StringExpContext.class,0);
		}
		public HiveCreateTableByLikeContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveCreateTableByLike(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveCreateTableByLike(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveCreateTableByLike(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveAlterIndexContext extends HiveStatementContext {
		public QualifiedNameContext indexName;
		public QualifiedNameContext tableName;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(EntireSqlParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(EntireSqlParser.ON, 0); }
		public TerminalNode REBUILD() { return getToken(EntireSqlParser.REBUILD, 0); }
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public TerminalNode PARTITION() { return getToken(EntireSqlParser.PARTITION, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public HiveAlterIndexContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveAlterIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveAlterIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveAlterIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveAlterViewContext extends HiveStatementContext {
		public QualifiedNameContext viewName;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(EntireSqlParser.VIEW, 0); }
		public TerminalNode SET() { return getToken(EntireSqlParser.SET, 0); }
		public TerminalNode TBLPROPERTIES() { return getToken(EntireSqlParser.TBLPROPERTIES, 0); }
		public MultiKeyEvaluationContext multiKeyEvaluation() {
			return getRuleContext(MultiKeyEvaluationContext.class,0);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public HiveAlterViewContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveAlterView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveAlterView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveAlterView(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveCreateIndexContext extends HiveStatementContext {
		public QualifiedNameContext indexName;
		public QualifiedNameContext baseTableName;
		public StringExpContext indexType;
		public QualifiedNameContext indexTableName;
		public StringExpContext storageClassName;
		public StringExpContext hdfsPath;
		public StringContext indexComment;
		public TerminalNode CREATE() { return getToken(EntireSqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(EntireSqlParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(EntireSqlParser.ON, 0); }
		public List<TerminalNode> TABLE() { return getTokens(EntireSqlParser.TABLE); }
		public TerminalNode TABLE(int i) {
			return getToken(EntireSqlParser.TABLE, i);
		}
		public List<TerminalNode> TBLPROPERTIES() { return getTokens(EntireSqlParser.TBLPROPERTIES); }
		public TerminalNode TBLPROPERTIES(int i) {
			return getToken(EntireSqlParser.TBLPROPERTIES, i);
		}
		public List<TerminalNode> AS() { return getTokens(EntireSqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(EntireSqlParser.AS, i);
		}
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public List<StringExpContext> stringExp() {
			return getRuleContexts(StringExpContext.class);
		}
		public StringExpContext stringExp(int i) {
			return getRuleContext(StringExpContext.class,i);
		}
		public ColumnAliasesContext columnAliases() {
			return getRuleContext(ColumnAliasesContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(EntireSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(EntireSqlParser.WITH, i);
		}
		public TerminalNode DEFERRED() { return getToken(EntireSqlParser.DEFERRED, 0); }
		public TerminalNode REBUILD() { return getToken(EntireSqlParser.REBUILD, 0); }
		public TerminalNode IDXPROPERTIES() { return getToken(EntireSqlParser.IDXPROPERTIES, 0); }
		public MultiKeyEvaluationContext multiKeyEvaluation() {
			return getRuleContext(MultiKeyEvaluationContext.class,0);
		}
		public TerminalNode IN() { return getToken(EntireSqlParser.IN, 0); }
		public TerminalNode PARTITION() { return getToken(EntireSqlParser.PARTITION, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TerminalNode STORED() { return getToken(EntireSqlParser.STORED, 0); }
		public TerminalNode BY() { return getToken(EntireSqlParser.BY, 0); }
		public TerminalNode LOCATION() { return getToken(EntireSqlParser.LOCATION, 0); }
		public List<MultiStrEvaluationContext> multiStrEvaluation() {
			return getRuleContexts(MultiStrEvaluationContext.class);
		}
		public MultiStrEvaluationContext multiStrEvaluation(int i) {
			return getRuleContext(MultiStrEvaluationContext.class,i);
		}
		public TerminalNode COMMENT() { return getToken(EntireSqlParser.COMMENT, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode ROW() { return getToken(EntireSqlParser.ROW, 0); }
		public TerminalNode FORMAT() { return getToken(EntireSqlParser.FORMAT, 0); }
		public RowFormatContext rowFormat() {
			return getRuleContext(RowFormatContext.class,0);
		}
		public FileFormatContext fileFormat() {
			return getRuleContext(FileFormatContext.class,0);
		}
		public TerminalNode SERDEPROPERTIES() { return getToken(EntireSqlParser.SERDEPROPERTIES, 0); }
		public HiveCreateIndexContext(HiveStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveCreateIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HiveStatementContext hiveStatement() throws RecognitionException {
		HiveStatementContext _localctx = new HiveStatementContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_hiveStatement);
		int _la;
		try {
			int _alt;
			setState(1548);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,164,_ctx) ) {
			case 1:
				_localctx = new HiveMultiInsertContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(864);
				match(FROM);
				setState(865);
				((HiveMultiInsertContext)_localctx).tableName = qualifiedName();
				setState(867);
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(866);
						insertStm();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(869);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,61,_ctx);
				} while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				_localctx = new HiveWriteDataToFileContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(871);
				hiveWriteDataToFileStm();
				}
				break;
			case 3:
				_localctx = new HiveSetPropertiesContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(872);
				match(SET);
				setState(873);
				qualifiedName();
				setState(874);
				match(EQ);
				setState(875);
				primaryExpression(0);
				}
				break;
			case 4:
				_localctx = new HiveCreateDatabaseContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(877);
				match(CREATE);
				setState(878);
				_la = _input.LA(1);
				if ( !(_la==SCHEMA || _la==DATABASE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(882);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,62,_ctx) ) {
				case 1:
					{
					setState(879);
					match(IF);
					setState(880);
					match(NOT);
					setState(881);
					match(EXISTS);
					}
					break;
				}
				setState(884);
				((HiveCreateDatabaseContext)_localctx).databaseName = qualifiedName();
				setState(887);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(885);
					match(COMMENT);
					setState(886);
					((HiveCreateDatabaseContext)_localctx).databaseComment = string();
					}
				}

				setState(891);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCATION) {
					{
					setState(889);
					match(LOCATION);
					setState(890);
					((HiveCreateDatabaseContext)_localctx).hdfsPath = stringExp();
					}
				}

				setState(896);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(893);
					match(WITH);
					setState(894);
					match(DBPROPERTIES);
					setState(895);
					multiKeyEvaluation();
					}
				}

				}
				break;
			case 5:
				_localctx = new HiveDropDatabaseContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(898);
				match(DROP);
				setState(899);
				_la = _input.LA(1);
				if ( !(_la==SCHEMA || _la==DATABASE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(902);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
				case 1:
					{
					setState(900);
					match(IF);
					setState(901);
					match(EXISTS);
					}
					break;
				}
				setState(904);
				((HiveDropDatabaseContext)_localctx).databaseName = qualifiedName();
				setState(906);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(905);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 6:
				_localctx = new HiveAlterDatabaseContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(908);
				match(ALTER);
				setState(909);
				_la = _input.LA(1);
				if ( !(_la==SCHEMA || _la==DATABASE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(910);
				((HiveAlterDatabaseContext)_localctx).databaseName = qualifiedName();
				setState(911);
				match(SET);
				setState(921);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DBPROPERTIES:
					{
					setState(912);
					match(DBPROPERTIES);
					setState(913);
					multiKeyEvaluation();
					}
					break;
				case OWNER:
					{
					setState(914);
					match(OWNER);
					setState(916);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
					case 1:
						{
						setState(915);
						_la = _input.LA(1);
						if ( !(_la==USER || _la==ROLE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					setState(918);
					((HiveAlterDatabaseContext)_localctx).userOrRole = identifier(0);
					}
					break;
				case LOCATION:
					{
					setState(919);
					match(LOCATION);
					setState(920);
					((HiveAlterDatabaseContext)_localctx).hdfsPath = stringExp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				_localctx = new HiveDropTableContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(923);
				match(DROP);
				setState(924);
				match(TABLE);
				setState(927);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
				case 1:
					{
					setState(925);
					match(IF);
					setState(926);
					match(EXISTS);
					}
					break;
				}
				setState(929);
				((HiveDropTableContext)_localctx).tableName = qualifiedName();
				setState(931);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PURGE) {
					{
					setState(930);
					match(PURGE);
					}
				}

				}
				break;
			case 8:
				_localctx = new HiveTruncateTableContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(933);
				match(TRUNCATE);
				setState(934);
				match(TABLE);
				setState(935);
				((HiveTruncateTableContext)_localctx).tableName = qualifiedName();
				setState(938);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(936);
					match(PARTITION);
					setState(937);
					partitionSpec();
					}
				}

				}
				break;
			case 9:
				_localctx = new HiveCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(940);
				match(CREATE);
				setState(942);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(941);
					match(TEMPORARY);
					}
				}

				setState(945);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(944);
					match(EXTERNAL);
					}
				}

				setState(947);
				match(TABLE);
				setState(951);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
				case 1:
					{
					setState(948);
					match(IF);
					setState(949);
					match(NOT);
					setState(950);
					match(EXISTS);
					}
					break;
				}
				setState(953);
				((HiveCreateTableContext)_localctx).tablename = qualifiedName();
				setState(959);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__1) {
					{
					setState(954);
					match(T__1);
					setState(955);
					tableElements();
					setState(956);
					constraintSpecification();
					setState(957);
					match(T__3);
					}
				}

				setState(963);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(961);
					match(COMMENT);
					setState(962);
					((HiveCreateTableContext)_localctx).tableComment = string();
					}
				}

				setState(971);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITIONED) {
					{
					setState(965);
					match(PARTITIONED);
					setState(966);
					match(BY);
					setState(967);
					match(T__1);
					setState(968);
					((HiveCreateTableContext)_localctx).partionInfo = tableElements();
					setState(969);
					match(T__3);
					}
				}

				setState(997);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CLUSTERED) {
					{
					setState(973);
					match(CLUSTERED);
					setState(974);
					match(BY);
					setState(975);
					columnAliases();
					setState(991);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==SORTED) {
						{
						setState(976);
						match(SORTED);
						setState(977);
						match(BY);
						setState(978);
						match(T__1);
						setState(979);
						sortItem();
						setState(984);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==T__2) {
							{
							{
							setState(980);
							match(T__2);
							setState(981);
							sortItem();
							}
							}
							setState(986);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(987);
						match(T__3);
						setState(989);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ASC || _la==DESC) {
							{
							setState(988);
							_la = _input.LA(1);
							if ( !(_la==ASC || _la==DESC) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
						}

						}
					}

					setState(993);
					match(INTO);
					setState(994);
					((HiveCreateTableContext)_localctx).numBuckets = match(INTEGER_VALUE);
					setState(995);
					match(BUCKETS);
					}
				}

				setState(1009);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SKEWED) {
					{
					setState(999);
					match(SKEWED);
					setState(1000);
					match(BY);
					setState(1001);
					columnAliases();
					setState(1002);
					match(ON);
					setState(1003);
					primaryExpression(0);
					setState(1007);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
					case 1:
						{
						setState(1004);
						match(STORED);
						setState(1005);
						match(AS);
						setState(1006);
						((HiveCreateTableContext)_localctx).dir = string();
						}
						break;
					}
					}
				}

				setState(1029);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
				case 1:
					{
					setState(1014);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ROW) {
						{
						setState(1011);
						match(ROW);
						setState(1012);
						match(FORMAT);
						setState(1013);
						rowFormat();
						}
					}

					setState(1019);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STORED) {
						{
						setState(1016);
						match(STORED);
						setState(1017);
						match(AS);
						setState(1018);
						fileFormat();
						}
					}

					}
					break;
				case 2:
					{
					setState(1021);
					match(STORED);
					setState(1022);
					match(BY);
					setState(1023);
					((HiveCreateTableContext)_localctx).storageClassName = stringExp();
					setState(1027);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(1024);
						match(WITH);
						setState(1025);
						match(SERDEPROPERTIES);
						setState(1026);
						multiStrEvaluation();
						}
					}

					}
					break;
				}
				setState(1033);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCATION) {
					{
					setState(1031);
					match(LOCATION);
					setState(1032);
					((HiveCreateTableContext)_localctx).hdfsPath = stringExp();
					}
				}

				setState(1037);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TBLPROPERTIES) {
					{
					setState(1035);
					match(TBLPROPERTIES);
					setState(1036);
					multiStrEvaluation();
					}
				}

				setState(1041);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1039);
					match(AS);
					setState(1040);
					query();
					}
				}

				}
				break;
			case 10:
				_localctx = new HiveCreateTableByLikeContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1043);
				match(CREATE);
				setState(1045);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1044);
					match(TEMPORARY);
					}
				}

				setState(1048);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(1047);
					match(EXTERNAL);
					}
				}

				setState(1050);
				match(TABLE);
				setState(1054);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,94,_ctx) ) {
				case 1:
					{
					setState(1051);
					match(IF);
					setState(1052);
					match(NOT);
					setState(1053);
					match(EXISTS);
					}
					break;
				}
				setState(1056);
				((HiveCreateTableByLikeContext)_localctx).tablename = qualifiedName();
				setState(1057);
				match(LIKE);
				setState(1058);
				((HiveCreateTableByLikeContext)_localctx).existingTableOrViewName = qualifiedName();
				setState(1061);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCATION) {
					{
					setState(1059);
					match(LOCATION);
					setState(1060);
					((HiveCreateTableByLikeContext)_localctx).hdfsPath = stringExp();
					}
				}

				}
				break;
			case 11:
				_localctx = new HiveAlterTablePropertiesContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1063);
				match(ALTER);
				setState(1064);
				match(TABLE);
				setState(1065);
				((HiveAlterTablePropertiesContext)_localctx).tablename = qualifiedName();
				setState(1066);
				match(SET);
				setState(1067);
				match(TBLPROPERTIES);
				setState(1068);
				multiStrEvaluation();
				}
				break;
			case 12:
				_localctx = new HiveAlterTableSerDeContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1070);
				match(ALTER);
				setState(1071);
				match(TABLE);
				setState(1072);
				((HiveAlterTableSerDeContext)_localctx).tablename = qualifiedName();
				setState(1075);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1073);
					match(PARTITION);
					setState(1074);
					partitionSpec();
					}
				}

				setState(1088);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,98,_ctx) ) {
				case 1:
					{
					setState(1077);
					match(SET);
					setState(1078);
					match(SERDEPROPERTIES);
					setState(1079);
					multiStrEvaluation();
					}
					break;
				case 2:
					{
					setState(1080);
					match(SET);
					setState(1081);
					match(SERDE);
					setState(1082);
					((HiveAlterTableSerDeContext)_localctx).serdeClassName = stringExp();
					setState(1086);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(1083);
						match(WITH);
						setState(1084);
						match(SERDEPROPERTIES);
						setState(1085);
						multiStrEvaluation();
						}
					}

					}
					break;
				}
				}
				break;
			case 13:
				_localctx = new HiveAlterTableStoragePropertiesContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1090);
				match(ALTER);
				setState(1091);
				match(TABLE);
				setState(1092);
				((HiveAlterTableStoragePropertiesContext)_localctx).tablename = qualifiedName();
				setState(1121);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CLUSTERED:
					{
					setState(1093);
					match(CLUSTERED);
					setState(1094);
					match(BY);
					setState(1095);
					columnAliases();
					setState(1111);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==SORTED) {
						{
						setState(1096);
						match(SORTED);
						setState(1097);
						match(BY);
						setState(1098);
						match(T__1);
						setState(1099);
						sortItem();
						setState(1104);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==T__2) {
							{
							{
							setState(1100);
							match(T__2);
							setState(1101);
							sortItem();
							}
							}
							setState(1106);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(1107);
						match(T__3);
						setState(1109);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ASC || _la==DESC) {
							{
							setState(1108);
							_la = _input.LA(1);
							if ( !(_la==ASC || _la==DESC) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
						}

						}
					}

					setState(1113);
					match(INTO);
					setState(1114);
					((HiveAlterTableStoragePropertiesContext)_localctx).numBuckets = match(INTEGER_VALUE);
					setState(1115);
					match(BUCKETS);
					}
					break;
				case NOT:
					{
					setState(1117);
					match(NOT);
					setState(1118);
					match(STORED);
					setState(1119);
					match(AS);
					setState(1120);
					((HiveAlterTableStoragePropertiesContext)_localctx).dir = string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 14:
				_localctx = new HiveAlterTableSkewedContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1123);
				match(ALTER);
				setState(1124);
				match(TABLE);
				setState(1125);
				((HiveAlterTableSkewedContext)_localctx).tablename = qualifiedName();
				setState(1142);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SKEWED:
					{
					setState(1126);
					match(SKEWED);
					setState(1127);
					match(BY);
					setState(1128);
					columnAliases();
					setState(1129);
					match(ON);
					setState(1130);
					columnAliases();
					setState(1134);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STORED) {
						{
						setState(1131);
						match(STORED);
						setState(1132);
						match(AS);
						setState(1133);
						((HiveAlterTableSkewedContext)_localctx).dir = string();
						}
					}

					}
					break;
				case NOT:
					{
					setState(1136);
					match(NOT);
					setState(1137);
					match(SKEWED);
					}
					break;
				case SET:
					{
					setState(1138);
					match(SET);
					setState(1139);
					match(SKEWED);
					setState(1140);
					match(LOCATION);
					setState(1141);
					multiKeyEvaluation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 15:
				_localctx = new HiveAlterTableConstraintsContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1144);
				match(ALTER);
				setState(1145);
				match(TABLE);
				setState(1146);
				((HiveAlterTableConstraintsContext)_localctx).tablename = qualifiedName();
				setState(1172);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
				case 1:
					{
					setState(1147);
					match(ADD);
					setState(1148);
					match(CONSTRAINT);
					setState(1149);
					((HiveAlterTableConstraintsContext)_localctx).constraintName = identifier(0);
					setState(1150);
					match(PRIMARY);
					setState(1151);
					match(KEY);
					setState(1152);
					columnAliases();
					setState(1153);
					match(DISABLE);
					setState(1154);
					match(NOVALIDATE);
					}
					break;
				case 2:
					{
					setState(1156);
					match(ADD);
					setState(1157);
					match(CONSTRAINT);
					setState(1158);
					((HiveAlterTableConstraintsContext)_localctx).constraintName = identifier(0);
					setState(1159);
					match(FOREIGN);
					setState(1160);
					match(KEY);
					setState(1161);
					columnAliases();
					setState(1162);
					match(REFERENCES);
					setState(1163);
					((HiveAlterTableConstraintsContext)_localctx).tablename = qualifiedName();
					setState(1164);
					columnAliases();
					setState(1165);
					match(DISABLE);
					setState(1166);
					match(NOVALIDATE);
					setState(1167);
					match(RELY);
					}
					break;
				case 3:
					{
					setState(1169);
					match(DROP);
					setState(1170);
					match(CONSTRAINT);
					setState(1171);
					((HiveAlterTableConstraintsContext)_localctx).constraintName = identifier(0);
					}
					break;
				}
				}
				break;
			case 16:
				_localctx = new HiveAlterPartitionContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(1174);
				match(ALTER);
				setState(1175);
				match(TABLE);
				setState(1176);
				((HiveAlterPartitionContext)_localctx).tablename = qualifiedName();
				setState(1305);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
				case 1:
					{
					setState(1177);
					match(ADD);
					setState(1181);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==IF) {
						{
						setState(1178);
						match(IF);
						setState(1179);
						match(NOT);
						setState(1180);
						match(EXISTS);
						}
					}

					setState(1183);
					match(PARTITION);
					setState(1184);
					partitionSpec();
					setState(1187);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LOCATION) {
						{
						setState(1185);
						match(LOCATION);
						setState(1186);
						((HiveAlterPartitionContext)_localctx).location = stringExp();
						}
					}

					setState(1200);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2 || _la==PARTITION) {
						{
						{
						setState(1190);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==T__2) {
							{
							setState(1189);
							match(T__2);
							}
						}

						setState(1192);
						match(PARTITION);
						setState(1193);
						partitionSpec();
						setState(1196);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==LOCATION) {
							{
							setState(1194);
							match(LOCATION);
							setState(1195);
							((HiveAlterPartitionContext)_localctx).location = stringExp();
							}
						}

						}
						}
						setState(1202);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case 2:
					{
					setState(1203);
					match(PARTITION);
					setState(1204);
					partitionSpec();
					setState(1205);
					match(RENAME);
					setState(1206);
					match(TO);
					setState(1207);
					match(PARTITION);
					setState(1208);
					partitionSpec();
					}
					break;
				case 3:
					{
					setState(1210);
					match(EXCHANGE);
					setState(1211);
					match(PARTITION);
					setState(1212);
					partitionSpec();
					setState(1213);
					match(WITH);
					setState(1214);
					match(TABLE);
					setState(1215);
					((HiveAlterPartitionContext)_localctx).table_name = qualifiedName();
					}
					break;
				case 4:
					{
					setState(1217);
					match(ALTER);
					setState(1218);
					match(TABLE);
					setState(1219);
					partitionSpec();
					setState(1220);
					match(RECOVER);
					setState(1221);
					match(PARTITIONS);
					}
					break;
				case 5:
					{
					setState(1223);
					match(DROP);
					setState(1226);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==IF) {
						{
						setState(1224);
						match(IF);
						setState(1225);
						match(EXISTS);
						}
					}

					setState(1228);
					match(PARTITION);
					setState(1229);
					partitionSpec();
					setState(1237);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2 || _la==PARTITION) {
						{
						{
						setState(1231);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==T__2) {
							{
							setState(1230);
							match(T__2);
							}
						}

						setState(1233);
						match(PARTITION);
						setState(1234);
						partitionSpec();
						}
						}
						setState(1239);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1242);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==IGNORE) {
						{
						setState(1240);
						match(IGNORE);
						setState(1241);
						match(PROTECTION);
						}
					}

					setState(1245);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PURGE) {
						{
						setState(1244);
						match(PURGE);
						}
					}

					}
					break;
				case 6:
					{
					setState(1249);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PARTITION) {
						{
						setState(1247);
						match(PARTITION);
						setState(1248);
						partitionSpec();
						}
					}

					setState(1251);
					match(SET);
					setState(1252);
					match(FILEFORMAT);
					setState(1253);
					fileFormat();
					}
					break;
				case 7:
					{
					setState(1256);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PARTITION) {
						{
						setState(1254);
						match(PARTITION);
						setState(1255);
						partitionSpec();
						}
					}

					setState(1258);
					match(SET);
					setState(1259);
					match(LOCATION);
					setState(1260);
					((HiveAlterPartitionContext)_localctx).location = stringExp();
					}
					break;
				case 8:
					{
					setState(1261);
					match(TOUCH);
					setState(1264);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PARTITION) {
						{
						setState(1262);
						match(PARTITION);
						setState(1263);
						partitionSpec();
						}
					}

					}
					break;
				case 9:
					{
					setState(1268);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PARTITION) {
						{
						setState(1266);
						match(PARTITION);
						setState(1267);
						partitionSpec();
						}
					}

					setState(1270);
					_la = _input.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1276);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NO_DROP:
						{
						setState(1271);
						match(NO_DROP);
						setState(1273);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==CASCADE) {
							{
							setState(1272);
							match(CASCADE);
							}
						}

						}
						break;
					case OFFLINE:
						{
						setState(1275);
						match(OFFLINE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 10:
					{
					setState(1280);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PARTITION) {
						{
						setState(1278);
						match(PARTITION);
						setState(1279);
						partitionSpec();
						}
					}

					setState(1282);
					match(COMPACT);
					setState(1283);
					((HiveAlterPartitionContext)_localctx).compactionType = stringExp();
					setState(1286);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AND) {
						{
						setState(1284);
						match(AND);
						setState(1285);
						match(WAIT);
						}
					}

					setState(1292);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(1288);
						match(WITH);
						setState(1289);
						match(OVERWRITE);
						setState(1290);
						match(TBLPROPERTIES);
						setState(1291);
						multiStrEvaluation();
						}
					}

					}
					break;
				case 11:
					{
					setState(1296);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PARTITION) {
						{
						setState(1294);
						match(PARTITION);
						setState(1295);
						partitionSpec();
						}
					}

					setState(1298);
					match(CONCATENATE);
					}
					break;
				case 12:
					{
					setState(1301);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PARTITION) {
						{
						setState(1299);
						match(PARTITION);
						setState(1300);
						partitionSpec();
						}
					}

					setState(1303);
					match(UPDATE);
					setState(1304);
					match(COLUMNS);
					}
					break;
				}
				}
				break;
			case 17:
				_localctx = new ArchivePartitionContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(1307);
				match(ALTER);
				setState(1308);
				match(TABLE);
				setState(1309);
				((ArchivePartitionContext)_localctx).tableName = qualifiedName();
				setState(1310);
				_la = _input.LA(1);
				if ( !(_la==ARCHIVE || _la==UNARCHIVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1311);
				match(PARTITION);
				setState(1312);
				partitionSpec();
				}
				break;
			case 18:
				_localctx = new HiveAlterColumnContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(1314);
				match(ALTER);
				setState(1315);
				match(TABLE);
				setState(1316);
				((HiveAlterColumnContext)_localctx).tableName = qualifiedName();
				setState(1319);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1317);
					match(PARTITION);
					setState(1318);
					partitionSpec();
					}
				}

				setState(1353);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHANGE:
					{
					setState(1321);
					match(CHANGE);
					setState(1323);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
					case 1:
						{
						setState(1322);
						match(COLUMN);
						}
						break;
					}
					setState(1325);
					((HiveAlterColumnContext)_localctx).colOldName = identifier(0);
					setState(1326);
					((HiveAlterColumnContext)_localctx).colNewName = identifier(0);
					setState(1327);
					((HiveAlterColumnContext)_localctx).columnType = type(0);
					setState(1330);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMENT) {
						{
						setState(1328);
						match(COMMENT);
						setState(1329);
						((HiveAlterColumnContext)_localctx).colComment = string();
						}
					}

					setState(1335);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FIRST:
						{
						setState(1332);
						match(FIRST);
						}
						break;
					case AFTER:
						{
						setState(1333);
						match(AFTER);
						setState(1334);
						((HiveAlterColumnContext)_localctx).columnName = identifier(0);
						}
						break;
					case EOF:
					case T__0:
					case CASCADE:
					case RESTRICT:
						break;
					default:
						break;
					}
					setState(1338);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CASCADE || _la==RESTRICT) {
						{
						setState(1337);
						_la = _input.LA(1);
						if ( !(_la==CASCADE || _la==RESTRICT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					break;
				case ADD:
				case REPLACE:
					{
					setState(1340);
					_la = _input.LA(1);
					if ( !(_la==ADD || _la==REPLACE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1341);
					match(COLUMNS);
					setState(1342);
					match(T__1);
					{
					setState(1343);
					((HiveAlterColumnContext)_localctx).colName = identifier(0);
					setState(1344);
					((HiveAlterColumnContext)_localctx).dataType = type(0);
					setState(1347);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMENT) {
						{
						setState(1345);
						match(COMMENT);
						setState(1346);
						((HiveAlterColumnContext)_localctx).colComment = string();
						}
					}

					}
					setState(1349);
					match(T__3);
					setState(1351);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CASCADE || _la==RESTRICT) {
						{
						setState(1350);
						_la = _input.LA(1);
						if ( !(_la==CASCADE || _la==RESTRICT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 19:
				_localctx = new HiveCreateViewContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(1355);
				match(CREATE);
				setState(1356);
				match(VIEW);
				setState(1360);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,136,_ctx) ) {
				case 1:
					{
					setState(1357);
					match(IF);
					setState(1358);
					match(NOT);
					setState(1359);
					match(EXISTS);
					}
					break;
				}
				setState(1362);
				((HiveCreateViewContext)_localctx).viewName = qualifiedName();
				setState(1374);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__1) {
					{
					setState(1363);
					match(T__1);
					setState(1364);
					columnDefinitionNoType();
					setState(1369);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(1365);
						match(T__2);
						setState(1366);
						columnDefinitionNoType();
						}
						}
						setState(1371);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1372);
					match(T__3);
					}
				}

				setState(1378);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(1376);
					match(COMMENT);
					setState(1377);
					string();
					}
				}

				setState(1382);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TBLPROPERTIES) {
					{
					setState(1380);
					match(TBLPROPERTIES);
					setState(1381);
					multiKeyEvaluation();
					}
				}

				setState(1384);
				match(AS);
				setState(1385);
				query();
				}
				break;
			case 20:
				_localctx = new HiveDropViewContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(1387);
				match(DROP);
				setState(1388);
				match(VIEW);
				setState(1391);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
				case 1:
					{
					setState(1389);
					match(IF);
					setState(1390);
					match(EXISTS);
					}
					break;
				}
				setState(1393);
				((HiveDropViewContext)_localctx).viewName = qualifiedName();
				}
				break;
			case 21:
				_localctx = new HiveAlterViewContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(1394);
				match(ALTER);
				setState(1395);
				match(VIEW);
				setState(1396);
				((HiveAlterViewContext)_localctx).viewName = qualifiedName();
				setState(1397);
				match(SET);
				setState(1398);
				match(TBLPROPERTIES);
				setState(1399);
				multiKeyEvaluation();
				}
				break;
			case 22:
				_localctx = new HiveAlterViewAsSelectContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(1401);
				match(ALTER);
				setState(1402);
				match(VIEW);
				setState(1403);
				((HiveAlterViewAsSelectContext)_localctx).viewName = qualifiedName();
				setState(1404);
				match(AS);
				setState(1405);
				query();
				}
				break;
			case 23:
				_localctx = new HiveCreateIndexContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(1407);
				match(CREATE);
				setState(1408);
				match(INDEX);
				setState(1409);
				((HiveCreateIndexContext)_localctx).indexName = qualifiedName();
				setState(1410);
				match(ON);
				setState(1411);
				match(TABLE);
				setState(1412);
				((HiveCreateIndexContext)_localctx).baseTableName = qualifiedName();
				setState(1414);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__1) {
					{
					setState(1413);
					columnAliases();
					}
				}

				setState(1416);
				match(TBLPROPERTIES);
				setState(1417);
				match(AS);
				setState(1418);
				((HiveCreateIndexContext)_localctx).indexType = stringExp();
				setState(1422);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1419);
					match(WITH);
					setState(1420);
					match(DEFERRED);
					setState(1421);
					match(REBUILD);
					}
				}

				setState(1426);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IDXPROPERTIES) {
					{
					setState(1424);
					match(IDXPROPERTIES);
					setState(1425);
					multiKeyEvaluation();
					}
				}

				setState(1431);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(1428);
					match(IN);
					setState(1429);
					match(TABLE);
					setState(1430);
					((HiveCreateIndexContext)_localctx).indexTableName = qualifiedName();
					}
				}

				setState(1435);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1433);
					match(PARTITION);
					setState(1434);
					partitionSpec();
					}
				}

				setState(1455);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,150,_ctx) ) {
				case 1:
					{
					setState(1440);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ROW) {
						{
						setState(1437);
						match(ROW);
						setState(1438);
						match(FORMAT);
						setState(1439);
						rowFormat();
						}
					}

					setState(1445);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STORED) {
						{
						setState(1442);
						match(STORED);
						setState(1443);
						match(AS);
						setState(1444);
						fileFormat();
						}
					}

					}
					break;
				case 2:
					{
					setState(1447);
					match(STORED);
					setState(1448);
					match(BY);
					setState(1449);
					((HiveCreateIndexContext)_localctx).storageClassName = stringExp();
					setState(1453);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(1450);
						match(WITH);
						setState(1451);
						match(SERDEPROPERTIES);
						setState(1452);
						multiStrEvaluation();
						}
					}

					}
					break;
				}
				setState(1459);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCATION) {
					{
					setState(1457);
					match(LOCATION);
					setState(1458);
					((HiveCreateIndexContext)_localctx).hdfsPath = stringExp();
					}
				}

				setState(1463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TBLPROPERTIES) {
					{
					setState(1461);
					match(TBLPROPERTIES);
					setState(1462);
					multiStrEvaluation();
					}
				}

				setState(1467);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(1465);
					match(COMMENT);
					setState(1466);
					((HiveCreateIndexContext)_localctx).indexComment = string();
					}
				}

				}
				break;
			case 24:
				_localctx = new HiveDropIndexContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(1469);
				match(DROP);
				setState(1470);
				match(INDEX);
				setState(1473);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
				case 1:
					{
					setState(1471);
					match(IF);
					setState(1472);
					match(EXISTS);
					}
					break;
				}
				setState(1475);
				((HiveDropIndexContext)_localctx).indexName = qualifiedName();
				setState(1476);
				match(ON);
				setState(1477);
				((HiveDropIndexContext)_localctx).tableName = qualifiedName();
				}
				break;
			case 25:
				_localctx = new HiveAlterIndexContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(1479);
				match(ALTER);
				setState(1480);
				match(INDEX);
				setState(1481);
				((HiveAlterIndexContext)_localctx).indexName = qualifiedName();
				setState(1482);
				match(ON);
				setState(1483);
				((HiveAlterIndexContext)_localctx).tableName = qualifiedName();
				setState(1486);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1484);
					match(PARTITION);
					setState(1485);
					partitionSpec();
					}
				}

				setState(1488);
				match(REBUILD);
				}
				break;
			case 26:
				_localctx = new HiveCreateTemporaryFunctionsContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(1490);
				match(CREATE);
				setState(1491);
				match(TEMPORARY);
				setState(1492);
				match(FUNCTION);
				setState(1493);
				((HiveCreateTemporaryFunctionsContext)_localctx).functionName = qualifiedName();
				setState(1494);
				match(AS);
				setState(1495);
				((HiveCreateTemporaryFunctionsContext)_localctx).className = stringExp();
				}
				break;
			case 27:
				_localctx = new HiveCreatePermanentFunctionsContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(1497);
				match(CREATE);
				setState(1498);
				match(FUNCTION);
				setState(1499);
				((HiveCreatePermanentFunctionsContext)_localctx).functionName = qualifiedName();
				setState(1500);
				match(AS);
				setState(1501);
				((HiveCreatePermanentFunctionsContext)_localctx).className = stringExp();
				setState(1517);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case USING:
					{
					setState(1502);
					match(USING);
					setState(1503);
					match(JAR);
					}
					break;
				case FILE:
					{
					setState(1504);
					match(FILE);
					}
					break;
				case ARCHIVE:
					{
					setState(1505);
					match(ARCHIVE);
					setState(1506);
					((HiveCreatePermanentFunctionsContext)_localctx).fileUri = stringExp();
					setState(1514);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2 || _la==ARCHIVE || _la==FILE) {
						{
						setState(1512);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case T__2:
							{
							setState(1507);
							match(T__2);
							setState(1508);
							match(JAR);
							}
							break;
						case FILE:
							{
							setState(1509);
							match(FILE);
							}
							break;
						case ARCHIVE:
							{
							setState(1510);
							match(ARCHIVE);
							setState(1511);
							((HiveCreatePermanentFunctionsContext)_localctx).fileUri = stringExp();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						setState(1516);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case EOF:
				case T__0:
					break;
				default:
					break;
				}
				}
				break;
			case 28:
				_localctx = new HiveDropFunctionsContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(1519);
				match(DROP);
				setState(1521);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1520);
					match(TEMPORARY);
					}
				}

				setState(1523);
				match(FUNCTION);
				setState(1526);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
				case 1:
					{
					setState(1524);
					match(IF);
					setState(1525);
					match(EXISTS);
					}
					break;
				}
				setState(1528);
				((HiveDropFunctionsContext)_localctx).functionName = qualifiedName();
				}
				break;
			case 29:
				_localctx = new HiveReloadFunctionsContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(1529);
				match(RELOAD);
				setState(1530);
				match(FUNCTION);
				}
				break;
			case 30:
				_localctx = new HiveLoadFileIntoTableContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(1531);
				match(LOAD);
				setState(1532);
				match(DATA);
				setState(1534);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL) {
					{
					setState(1533);
					match(LOCAL);
					}
				}

				setState(1536);
				match(INPATH);
				setState(1537);
				((HiveLoadFileIntoTableContext)_localctx).filePath = stringExp();
				setState(1539);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OVERWRITE) {
					{
					setState(1538);
					match(OVERWRITE);
					}
				}

				setState(1541);
				match(INTO);
				setState(1542);
				match(TABLE);
				setState(1543);
				((HiveLoadFileIntoTableContext)_localctx).tablename = qualifiedName();
				setState(1546);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1544);
					match(PARTITION);
					setState(1545);
					partitionSpec();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GpStatementContext extends ParserRuleContext {
		public GpStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gpStatement; }

		public GpStatementContext() { }
		public void copyFrom(GpStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class GpRecreateIndexContext extends GpStatementContext {
		public QualifiedNameContext indexName;
		public TerminalNode REINDEX() { return getToken(EntireSqlParser.REINDEX, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public GpRecreateIndexContext(GpStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGpRecreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGpRecreateIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGpRecreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GpCreateTableContext extends GpStatementContext {
		public QualifiedNameContext tablename;
		public QualifiedNameContext srcTablename;
		public QualifiedNameContext errTablename;
		public IdentifierContext data_ts;
		public IdentifierContext rec_id;
		public IdentifierContext mainPartition;
		public IdentifierContext subPartition;
		public TerminalNode CREATE() { return getToken(EntireSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public TerminalNode WRITABLE() { return getToken(EntireSqlParser.WRITABLE, 0); }
		public TerminalNode TEMPORARY() { return getToken(EntireSqlParser.TEMPORARY, 0); }
		public TerminalNode EXTERNAL() { return getToken(EntireSqlParser.EXTERNAL, 0); }
		public TerminalNode IF() { return getToken(EntireSqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(EntireSqlParser.EXISTS, 0); }
		public TerminalNode LOCATION() { return getToken(EntireSqlParser.LOCATION, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode FORMAT() { return getToken(EntireSqlParser.FORMAT, 0); }
		public TerminalNode ENCODING() { return getToken(EntireSqlParser.ENCODING, 0); }
		public TerminalNode LOG() { return getToken(EntireSqlParser.LOG, 0); }
		public TerminalNode ERRORS() { return getToken(EntireSqlParser.ERRORS, 0); }
		public TerminalNode INTO() { return getToken(EntireSqlParser.INTO, 0); }
		public TerminalNode SEGMENT() { return getToken(EntireSqlParser.SEGMENT, 0); }
		public TerminalNode REJECT() { return getToken(EntireSqlParser.REJECT, 0); }
		public TerminalNode LIMIT() { return getToken(EntireSqlParser.LIMIT, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(EntireSqlParser.PERCENT, 0); }
		public TerminalNode TABLESPACE() { return getToken(EntireSqlParser.TABLESPACE, 0); }
		public TerminalNode ON() { return getToken(EntireSqlParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(EntireSqlParser.COMMIT, 0); }
		public TerminalNode DELETE() { return getToken(EntireSqlParser.DELETE, 0); }
		public TerminalNode ROWS() { return getToken(EntireSqlParser.ROWS, 0); }
		public TerminalNode WITH() { return getToken(EntireSqlParser.WITH, 0); }
		public PropertiesContext properties() {
			return getRuleContext(PropertiesContext.class,0);
		}
		public TerminalNode DISTRIBUTED() { return getToken(EntireSqlParser.DISTRIBUTED, 0); }
		public List<TerminalNode> BY() { return getTokens(EntireSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(EntireSqlParser.BY, i);
		}
		public TerminalNode PARTITION() { return getToken(EntireSqlParser.PARTITION, 0); }
		public List<TerminalNode> SUBPARTITION() { return getTokens(EntireSqlParser.SUBPARTITION); }
		public TerminalNode SUBPARTITION(int i) {
			return getToken(EntireSqlParser.SUBPARTITION, i);
		}
		public TerminalNode TEMPLATE() { return getToken(EntireSqlParser.TEMPLATE, 0); }
		public GpSubpartitionItemsContext gpSubpartitionItems() {
			return getRuleContext(GpSubpartitionItemsContext.class,0);
		}
		public GpPartitionItemsContext gpPartitionItems() {
			return getRuleContext(GpPartitionItemsContext.class,0);
		}
		public TerminalNode AS() { return getToken(EntireSqlParser.AS, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> RANGE() { return getTokens(EntireSqlParser.RANGE); }
		public TerminalNode RANGE(int i) {
			return getToken(EntireSqlParser.RANGE, i);
		}
		public List<TerminalNode> LIST() { return getTokens(EntireSqlParser.LIST); }
		public TerminalNode LIST(int i) {
			return getToken(EntireSqlParser.LIST, i);
		}
		public TerminalNode LIKE() { return getToken(EntireSqlParser.LIKE, 0); }
		public TableElementsContext tableElements() {
			return getRuleContext(TableElementsContext.class,0);
		}
		public List<PrimaryExpressionContext> primaryExpression() {
			return getRuleContexts(PrimaryExpressionContext.class);
		}
		public PrimaryExpressionContext primaryExpression(int i) {
			return getRuleContext(PrimaryExpressionContext.class,i);
		}
		public GpCreateTableContext(GpStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGpCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGpCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGpCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GpAlterPartitionContext extends GpStatementContext {
		public QualifiedNameContext tablename;
		public IdentifierContext partitionName;
		public QualifiedNameContext otherTableName;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public List<TerminalNode> TABLE() { return getTokens(EntireSqlParser.TABLE); }
		public TerminalNode TABLE(int i) {
			return getToken(EntireSqlParser.TABLE, i);
		}
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public TerminalNode ADD() { return getToken(EntireSqlParser.ADD, 0); }
		public List<TerminalNode> PARTITION() { return getTokens(EntireSqlParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(EntireSqlParser.PARTITION, i);
		}
		public TerminalNode START() { return getToken(EntireSqlParser.START, 0); }
		public List<TypeConstructorContext> typeConstructor() {
			return getRuleContexts(TypeConstructorContext.class);
		}
		public TypeConstructorContext typeConstructor(int i) {
			return getRuleContext(TypeConstructorContext.class,i);
		}
		public TerminalNode END() { return getToken(EntireSqlParser.END, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(EntireSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(EntireSqlParser.DEFAULT, i);
		}
		public TerminalNode RENAME() { return getToken(EntireSqlParser.RENAME, 0); }
		public TerminalNode FOR() { return getToken(EntireSqlParser.FOR, 0); }
		public TerminalNode TO() { return getToken(EntireSqlParser.TO, 0); }
		public TerminalNode SPLIT() { return getToken(EntireSqlParser.SPLIT, 0); }
		public TerminalNode AT() { return getToken(EntireSqlParser.AT, 0); }
		public TerminalNode INTO() { return getToken(EntireSqlParser.INTO, 0); }
		public TerminalNode DROP() { return getToken(EntireSqlParser.DROP, 0); }
		public TerminalNode TRUNCATE() { return getToken(EntireSqlParser.TRUNCATE, 0); }
		public TerminalNode EXCHANGE() { return getToken(EntireSqlParser.EXCHANGE, 0); }
		public TerminalNode WITH() { return getToken(EntireSqlParser.WITH, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<PrimaryExpressionContext> primaryExpression() {
			return getRuleContexts(PrimaryExpressionContext.class);
		}
		public PrimaryExpressionContext primaryExpression(int i) {
			return getRuleContext(PrimaryExpressionContext.class,i);
		}
		public GpAlterPartitionContext(GpStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGpAlterPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGpAlterPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGpAlterPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GpAlterColumnContext extends GpStatementContext {
		public QualifiedNameContext tablename;
		public IdentifierContext columnName;
		public IdentifierContext newColumnName;
		public List<TerminalNode> ALTER() { return getTokens(EntireSqlParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(EntireSqlParser.ALTER, i);
		}
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode ADD() { return getToken(EntireSqlParser.ADD, 0); }
		public TerminalNode COLUMN() { return getToken(EntireSqlParser.COLUMN, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(EntireSqlParser.TYPE, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode SET() { return getToken(EntireSqlParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(EntireSqlParser.DEFAULT, 0); }
		public TerminalNode RENAME() { return getToken(EntireSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(EntireSqlParser.TO, 0); }
		public TerminalNode DROP() { return getToken(EntireSqlParser.DROP, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public GpAlterColumnContext(GpStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGpAlterColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGpAlterColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGpAlterColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GpTruncateContext extends GpStatementContext {
		public QualifiedNameContext tablename;
		public TerminalNode TRUNCATE() { return getToken(EntireSqlParser.TRUNCATE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public GpTruncateContext(GpStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGpTruncate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGpTruncate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGpTruncate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GpVacuumContext extends GpStatementContext {
		public QualifiedNameContext tablename;
		public TerminalNode VACUUM() { return getToken(EntireSqlParser.VACUUM, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode FULL() { return getToken(EntireSqlParser.FULL, 0); }
		public TerminalNode FREEZE() { return getToken(EntireSqlParser.FREEZE, 0); }
		public TerminalNode VERBOSE() { return getToken(EntireSqlParser.VERBOSE, 0); }
		public TerminalNode ANALYZE() { return getToken(EntireSqlParser.ANALYZE, 0); }
		public ColumnAliasesContext columnAliases() {
			return getRuleContext(ColumnAliasesContext.class,0);
		}
		public GpVacuumContext(GpStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGpVacuum(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGpVacuum(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGpVacuum(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GpCreateIndexContext extends GpStatementContext {
		public QualifiedNameContext indexName;
		public QualifiedNameContext tablename;
		public IdentifierContext method;
		public IdentifierContext data_ts;
		public TerminalNode CREATE() { return getToken(EntireSqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(EntireSqlParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(EntireSqlParser.ON, 0); }
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public TerminalNode UNIQUE() { return getToken(EntireSqlParser.UNIQUE, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(EntireSqlParser.CONCURRENTLY, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode USING() { return getToken(EntireSqlParser.USING, 0); }
		public TerminalNode WITH() { return getToken(EntireSqlParser.WITH, 0); }
		public PropertiesContext properties() {
			return getRuleContext(PropertiesContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(EntireSqlParser.TABLESPACE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public GpCreateIndexContext(GpStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGpCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGpCreateIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGpCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GpAlterConstraintContext extends GpStatementContext {
		public QualifiedNameContext tablename;
		public IdentifierContext ckId;
		public IdentifierContext constraintName;
		public QualifiedNameContext otherTablename;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public TerminalNode ADD() { return getToken(EntireSqlParser.ADD, 0); }
		public TerminalNode CONSTRAINT() { return getToken(EntireSqlParser.CONSTRAINT, 0); }
		public TerminalNode CHECK() { return getToken(EntireSqlParser.CHECK, 0); }
		public TerminalNode DROP() { return getToken(EntireSqlParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(EntireSqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(EntireSqlParser.KEY, 0); }
		public List<ColumnAliasesContext> columnAliases() {
			return getRuleContexts(ColumnAliasesContext.class);
		}
		public ColumnAliasesContext columnAliases(int i) {
			return getRuleContext(ColumnAliasesContext.class,i);
		}
		public TerminalNode REFERENCES() { return getToken(EntireSqlParser.REFERENCES, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public GpAlterConstraintContext(GpStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGpAlterConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGpAlterConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGpAlterConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GpStatementContext gpStatement() throws RecognitionException {
		GpStatementContext _localctx = new GpStatementContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_gpStatement);
		int _la;
		try {
			int _alt;
			setState(1870);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,204,_ctx) ) {
			case 1:
				_localctx = new GpVacuumContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1550);
				match(VACUUM);
				setState(1552);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
				case 1:
					{
					setState(1551);
					match(FULL);
					}
					break;
				}
				setState(1555);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,166,_ctx) ) {
				case 1:
					{
					setState(1554);
					match(FREEZE);
					}
					break;
				}
				setState(1558);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
				case 1:
					{
					setState(1557);
					match(VERBOSE);
					}
					break;
				}
				setState(1561);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
				case 1:
					{
					setState(1560);
					match(ANALYZE);
					}
					break;
				}
				setState(1563);
				((GpVacuumContext)_localctx).tablename = qualifiedName();
				setState(1565);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__1) {
					{
					setState(1564);
					columnAliases();
					}
				}

				}
				break;
			case 2:
				_localctx = new GpTruncateContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1567);
				match(TRUNCATE);
				setState(1568);
				((GpTruncateContext)_localctx).tablename = qualifiedName();
				}
				break;
			case 3:
				_localctx = new GpCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1569);
				match(CREATE);
				setState(1571);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WRITABLE) {
					{
					setState(1570);
					match(WRITABLE);
					}
				}

				setState(1574);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1573);
					match(TEMPORARY);
					}
				}

				setState(1577);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(1576);
					match(EXTERNAL);
					}
				}

				setState(1579);
				match(TABLE);
				setState(1583);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,173,_ctx) ) {
				case 1:
					{
					setState(1580);
					match(IF);
					setState(1581);
					match(NOT);
					setState(1582);
					match(EXISTS);
					}
					break;
				}
				setState(1585);
				((GpCreateTableContext)_localctx).tablename = qualifiedName();
				setState(1596);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
				case 1:
					{
					setState(1588);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LIKE) {
						{
						setState(1586);
						match(LIKE);
						setState(1587);
						((GpCreateTableContext)_localctx).srcTablename = qualifiedName();
						}
					}

					}
					break;
				case 2:
					{
					setState(1594);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
					case 1:
						{
						setState(1590);
						match(T__1);
						setState(1591);
						tableElements();
						setState(1592);
						match(T__3);
						}
						break;
					}
					}
					break;
				}
				setState(1623);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCATION) {
					{
					setState(1598);
					match(LOCATION);
					setState(1599);
					match(T__1);
					setState(1600);
					string();
					setState(1605);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(1601);
						match(T__2);
						setState(1602);
						string();
						}
						}
						setState(1607);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1608);
					match(T__3);
					setState(1609);
					match(FORMAT);
					setState(1610);
					string();
					setState(1611);
					match(T__1);
					setState(1618);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,179,_ctx);
					while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1612);
							primaryExpression(0);
							setState(1614);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
							case 1:
								{
								setState(1613);
								string();
								}
								break;
							}
							}
							}
						}
						setState(1620);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,179,_ctx);
					}
					setState(1621);
					match(T__3);
					}
				}

				setState(1627);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENCODING) {
					{
					setState(1625);
					match(ENCODING);
					setState(1626);
					string();
					}
				}

				setState(1633);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOG) {
					{
					setState(1629);
					match(LOG);
					setState(1630);
					match(ERRORS);
					setState(1631);
					match(INTO);
					setState(1632);
					((GpCreateTableContext)_localctx).errTablename = qualifiedName();
					}
				}

				setState(1641);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEGMENT) {
					{
					setState(1635);
					match(SEGMENT);
					setState(1636);
					match(REJECT);
					setState(1637);
					match(LIMIT);
					setState(1638);
					number();
					setState(1639);
					match(PERCENT);
					}
				}

				setState(1645);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLESPACE) {
					{
					setState(1643);
					match(TABLESPACE);
					setState(1644);
					((GpCreateTableContext)_localctx).data_ts = identifier(0);
					}
				}

				setState(1651);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(1647);
					match(ON);
					setState(1648);
					match(COMMIT);
					setState(1649);
					match(DELETE);
					setState(1650);
					match(ROWS);
					}
				}

				setState(1655);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1653);
					match(WITH);
					setState(1654);
					properties();
					}
				}

				setState(1663);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISTRIBUTED) {
					{
					setState(1657);
					match(DISTRIBUTED);
					setState(1658);
					match(BY);
					setState(1659);
					match(T__1);
					setState(1660);
					((GpCreateTableContext)_localctx).rec_id = identifier(0);
					setState(1661);
					match(T__3);
					}
				}

				setState(1672);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1665);
					match(PARTITION);
					setState(1666);
					match(BY);
					setState(1667);
					_la = _input.LA(1);
					if ( !(_la==RANGE || _la==LIST) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1668);
					match(T__1);
					setState(1669);
					((GpCreateTableContext)_localctx).mainPartition = identifier(0);
					setState(1670);
					match(T__3);
					}
				}

				setState(1681);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,189,_ctx) ) {
				case 1:
					{
					setState(1674);
					match(SUBPARTITION);
					setState(1675);
					match(BY);
					setState(1676);
					_la = _input.LA(1);
					if ( !(_la==RANGE || _la==LIST) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1677);
					match(T__1);
					setState(1678);
					((GpCreateTableContext)_localctx).subPartition = identifier(0);
					setState(1679);
					match(T__3);
					}
					break;
				}
				setState(1686);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1683);
					match(SUBPARTITION);
					setState(1684);
					match(TEMPLATE);
					setState(1685);
					gpSubpartitionItems();
					}
				}

				setState(1689);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__1) {
					{
					setState(1688);
					gpPartitionItems();
					}
				}

				setState(1693);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1691);
					match(AS);
					setState(1692);
					query();
					}
				}

				}
				break;
			case 4:
				_localctx = new GpCreateIndexContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1695);
				match(CREATE);
				setState(1697);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNIQUE) {
					{
					setState(1696);
					match(UNIQUE);
					}
				}

				setState(1699);
				match(INDEX);
				setState(1701);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
				case 1:
					{
					setState(1700);
					match(CONCURRENTLY);
					}
					break;
				}
				setState(1703);
				((GpCreateIndexContext)_localctx).indexName = qualifiedName();
				setState(1704);
				match(ON);
				setState(1706);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(1705);
					match(TABLE);
					}
				}

				setState(1708);
				((GpCreateIndexContext)_localctx).tablename = qualifiedName();
				setState(1711);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1709);
					match(USING);
					setState(1710);
					((GpCreateIndexContext)_localctx).method = identifier(0);
					}
				}

				setState(1713);
				match(T__1);
				setState(1714);
				primaryExpression(0);
				setState(1715);
				match(T__3);
				setState(1718);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1716);
					match(WITH);
					setState(1717);
					properties();
					}
				}

				setState(1722);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLESPACE) {
					{
					setState(1720);
					match(TABLESPACE);
					setState(1721);
					((GpCreateIndexContext)_localctx).data_ts = identifier(0);
					}
				}

				}
				break;
			case 5:
				_localctx = new GpRecreateIndexContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1724);
				match(REINDEX);
				setState(1725);
				((GpRecreateIndexContext)_localctx).indexName = qualifiedName();
				}
				break;
			case 6:
				_localctx = new GpAlterPartitionContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1726);
				match(ALTER);
				setState(1727);
				match(TABLE);
				setState(1728);
				((GpAlterPartitionContext)_localctx).tablename = qualifiedName();
				setState(1811);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
				case 1:
					{
					setState(1729);
					match(ADD);
					setState(1730);
					match(PARTITION);
					setState(1731);
					((GpAlterPartitionContext)_localctx).partitionName = identifier(0);
					setState(1732);
					match(START);
					setState(1733);
					match(T__1);
					setState(1734);
					typeConstructor();
					setState(1735);
					match(T__3);
					setState(1736);
					match(END);
					setState(1737);
					match(T__1);
					setState(1738);
					typeConstructor();
					setState(1739);
					match(T__3);
					}
					break;
				case 2:
					{
					setState(1741);
					match(ADD);
					setState(1742);
					match(DEFAULT);
					setState(1743);
					match(PARTITION);
					setState(1744);
					((GpAlterPartitionContext)_localctx).partitionName = identifier(0);
					}
					break;
				case 3:
					{
					setState(1745);
					match(RENAME);
					setState(1746);
					match(PARTITION);
					setState(1747);
					match(FOR);
					{
					setState(1748);
					primaryExpression(0);
					}
					setState(1749);
					match(TO);
					setState(1750);
					((GpAlterPartitionContext)_localctx).partitionName = identifier(0);
					}
					break;
				case 4:
					{
					setState(1752);
					match(SPLIT);
					setState(1753);
					match(PARTITION);
					setState(1754);
					match(FOR);
					{
					setState(1755);
					primaryExpression(0);
					}
					setState(1756);
					match(AT);
					{
					setState(1757);
					primaryExpression(0);
					}
					setState(1758);
					match(INTO);
					setState(1759);
					match(T__1);
					setState(1760);
					match(PARTITION);
					setState(1761);
					((GpAlterPartitionContext)_localctx).partitionName = identifier(0);
					setState(1767);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(1762);
						match(T__2);
						setState(1763);
						match(PARTITION);
						setState(1764);
						((GpAlterPartitionContext)_localctx).partitionName = identifier(0);
						}
						}
						setState(1769);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1770);
					match(T__3);
					}
					break;
				case 5:
					{
					setState(1772);
					match(SPLIT);
					setState(1773);
					match(DEFAULT);
					setState(1774);
					match(PARTITION);
					setState(1775);
					match(START);
					setState(1776);
					match(T__1);
					setState(1777);
					typeConstructor();
					setState(1778);
					match(T__3);
					setState(1779);
					match(END);
					setState(1780);
					match(T__1);
					setState(1781);
					typeConstructor();
					setState(1782);
					match(T__3);
					setState(1783);
					match(INTO);
					setState(1784);
					match(T__1);
					setState(1785);
					match(PARTITION);
					setState(1786);
					((GpAlterPartitionContext)_localctx).partitionName = identifier(0);
					setState(1787);
					match(T__2);
					setState(1788);
					match(DEFAULT);
					setState(1789);
					match(PARTITION);
					setState(1790);
					match(T__3);
					}
					break;
				case 6:
					{
					setState(1792);
					match(DROP);
					setState(1793);
					match(PARTITION);
					setState(1794);
					match(FOR);
					{
					setState(1795);
					primaryExpression(0);
					}
					}
					break;
				case 7:
					{
					setState(1796);
					match(DROP);
					setState(1797);
					match(DEFAULT);
					setState(1798);
					match(PARTITION);
					}
					break;
				case 8:
					{
					setState(1799);
					match(TRUNCATE);
					setState(1800);
					match(PARTITION);
					setState(1801);
					match(FOR);
					{
					setState(1802);
					primaryExpression(0);
					}
					}
					break;
				case 9:
					{
					setState(1803);
					match(EXCHANGE);
					setState(1804);
					match(PARTITION);
					setState(1805);
					match(FOR);
					{
					setState(1806);
					primaryExpression(0);
					}
					setState(1807);
					match(WITH);
					setState(1808);
					match(TABLE);
					setState(1809);
					((GpAlterPartitionContext)_localctx).otherTableName = qualifiedName();
					}
					break;
				}
				}
				break;
			case 7:
				_localctx = new GpAlterColumnContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1813);
				match(ALTER);
				setState(1814);
				match(TABLE);
				setState(1815);
				((GpAlterColumnContext)_localctx).tablename = qualifiedName();
				setState(1844);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
				case 1:
					{
					setState(1816);
					match(ADD);
					setState(1817);
					match(COLUMN);
					setState(1818);
					columnDefinition();
					}
					break;
				case 2:
					{
					setState(1819);
					match(ALTER);
					setState(1820);
					match(COLUMN);
					setState(1821);
					((GpAlterColumnContext)_localctx).columnName = identifier(0);
					setState(1822);
					match(TYPE);
					setState(1823);
					type(0);
					}
					break;
				case 3:
					{
					setState(1825);
					match(ALTER);
					setState(1826);
					match(COLUMN);
					setState(1827);
					((GpAlterColumnContext)_localctx).columnName = identifier(0);
					setState(1828);
					match(SET);
					setState(1829);
					match(DEFAULT);
					setState(1833);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
					case UNICODE_STRING:
						{
						setState(1830);
						string();
						}
						break;
					case ADD:
					case ALL:
					case ANALYZE:
					case AND:
					case ANY:
					case ARRAY:
					case AS:
					case ASC:
					case AT:
					case BERNOULLI:
					case BETWEEN:
					case BY:
					case CALL:
					case CASCADE:
					case CASE:
					case CAST:
					case CATALOGS:
					case COLUMN:
					case COLUMNS:
					case COMMENT:
					case COMMIT:
					case COMMITTED:
					case CONSTRAINT:
					case CROSS:
					case CUBE:
					case CURRENT:
					case CURRENT_DATE:
					case CURRENT_PATH:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case CURRENT_USER:
					case DATA:
					case DATE:
					case DAY:
					case DEALLOCATE:
					case DESC:
					case DESCRIBE:
					case DISTINCT:
					case DISTRIBUTED:
					case DROP:
					case ELSE:
					case ESCAPE:
					case EXCEPT:
					case EXCLUDING:
					case EXECUTE:
					case EXISTS:
					case EXPLAIN:
					case EXTRACT:
					case FILTER:
					case FIRST:
					case FOLLOWING:
					case FOR:
					case FORMAT:
					case FULL:
					case FUNCTIONS:
					case GRANT:
					case GRANTS:
					case GRAPHVIZ:
					case GROUP:
					case GROUPING:
					case HAVING:
					case HOUR:
					case IF:
					case IN:
					case INCLUDING:
					case INNER:
					case INPUT:
					case INSERT:
					case INTERSECT:
					case MINUSES:
					case INTERVAL:
					case INTO:
					case IO:
					case IS:
					case ISOLATION:
					case JSON:
					case JOIN:
					case LAST:
					case LATERAL:
					case LEFT:
					case LEVEL:
					case LIKE:
					case LIMIT:
					case LISTAGG:
					case LOCALTIME:
					case LOCALTIMESTAMP:
					case LOGICAL:
					case MAP:
					case MINUTE:
					case MONTH:
					case MODIFY:
					case NATURAL:
					case NFC:
					case NFD:
					case NFKC:
					case NFKD:
					case NO:
					case NORMALIZE:
					case NULLIF:
					case NULLS:
					case ON:
					case ONLY:
					case OPTION:
					case OR:
					case ORDER:
					case ORDINALITY:
					case OUTER:
					case OUTPUT:
					case OVER:
					case PARTITION:
					case PARTITIONS:
					case PATH:
					case POSITION:
					case PRECEDING:
					case PREPARE:
					case PRIVILEGES:
					case PROPERTIES:
					case PUBLIC:
					case RANGE:
					case READ:
					case RECURSIVE:
					case RENAME:
					case REPEATABLE:
					case REPLACE:
					case RESET:
					case RESTRICT:
					case REVOKE:
					case RIGHT:
					case ROLLBACK:
					case ROLLUP:
					case ROW:
					case ROWS:
					case SCHEMA:
					case SCHEMAS:
					case SECOND:
					case SERIALIZABLE:
					case SESSION:
					case SET:
					case SETS:
					case SHOW:
					case SOME:
					case START:
					case STATS:
					case SUBSTRING:
					case SYSTEM:
					case TABLES:
					case TABLESAMPLE:
					case TEXT:
					case THEN:
					case TIME:
					case TIMESTAMP:
					case TO:
					case TRANSACTION:
					case TRY_CAST:
					case TYPE:
					case TRUNCATE:
					case UPDATE:
					case UESCAPE:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNION:
					case UNNEST:
					case USE:
					case VALIDATE:
					case VERBOSE:
					case VIEW:
					case WHEN:
					case WITH:
					case WITHIN:
					case WORK:
					case WRITE:
					case YEAR:
					case ZONE:
					case SEMI:
					case SORT:
					case OFFSET:
					case DEFAULT:
					case TABLESPACE:
					case EXTERNAL:
					case PURGE:
					case TEMPORARY:
					case PRIMARY:
					case KEY:
					case DISABLE:
					case NOVALIDATE:
					case FOREIGN:
					case REFERENCES:
					case PARTITIONED:
					case CLUSTERED:
					case SORTED:
					case BUCKETS:
					case SKEWED:
					case STORED:
					case DELIMITED:
					case FIELDS:
					case TERMINATED:
					case ESCAPED:
					case COLLECTION:
					case ITEMS:
					case KEYS:
					case LINES:
					case DEFINED:
					case SEQUENCEFILE:
					case TEXTFILE:
					case RCFILE:
					case ORC:
					case ORCFILE:
					case PARQUET:
					case AVRO:
					case JSONFILE:
					case INPUTFORMAT:
					case OUTPUTFORMAT:
					case SERDE:
					case SERDEPROPERTIES:
					case LOCATION:
					case TBLPROPERTIES:
					case RELY:
					case EXCHANGE:
					case RECOVER:
					case ARCHIVE:
					case UNARCHIVE:
					case IGNORE:
					case PROTECTION:
					case TOUCH:
					case ENABLE:
					case NO_DROP:
					case OFFLINE:
					case COMPACT:
					case WAIT:
					case CONCATENATE:
					case CHANGE:
					case AFTER:
					case DEFERRED:
					case REBUILD:
					case INDEX:
					case IDXPROPERTIES:
					case FUNCTION:
					case JAR:
					case FILE:
					case DATABASE:
					case DBPROPERTIES:
					case OWNER:
					case RELOAD:
					case USER:
					case ROLE:
					case FILEFORMAT:
					case LOAD:
					case LOCAL:
					case INPATH:
					case DIRECTORY:
					case VACUUM:
					case LIST:
					case SUBPARTITION:
					case SUBPARTITIONS:
					case EVERY:
					case INCLUSIVE:
					case EXCLUSIVE:
					case TEMPLATE:
					case ENCODING:
					case LOG:
					case ERRORS:
					case SEGMENT:
					case REJECT:
					case PERCENT:
					case WRITABLE:
					case CHECK:
					case UNIQUE:
					case CONCURRENTLY:
					case BITMAP:
					case FORCE:
					case SPLIT:
					case REINDEX:
					case FREEZE:
					case MSCK:
					case REPAIR:
					case FETCH:
					case DEFINITION:
					case LESS:
					case THAN:
					case HASH:
					case NOLOGGING:
					case STRUCT:
					case GLOBAL:
					case PRESERVE:
					case AUTO_INCREMENT:
					case ENGINE:
					case CHARSET:
					case COMPRESS:
					case EXPRESS:
					case REPLICATED:
					case NOCOPIES:
					case SPACE:
					case SHRINK:
					case KEY_BLOCK_SIZE:
					case KEY_DC_SIZE:
					case AUTOEXTEND:
					case NEXT:
					case OFF:
					case MATCHED:
					case MERGE:
					case OUTFILE:
					case OPTIONALLY:
					case ENCLOSED:
					case DOUBLE_ENCLOSED:
					case NULL_VALUE:
					case OUTFILEMODE:
					case HDFS:
					case WRITEMODE:
					case NORMAL:
					case OVERWRITES:
					case FILECOUNT:
					case FILESIZE:
					case CHARACTER:
					case GBK:
					case UTF8:
					case HEAD:
					case RMTSELECT:
					case INFILE:
					case DATA_FORMAT:
					case SEPARATOR:
					case BLANKS:
					case AUTOFILL:
					case LENGTH:
					case TABLE_FIELDS:
					case MAX_BAD_RECORDS:
					case DATETIME:
					case TRACE:
					case TRACE_PATH:
					case NOSPLIT:
					case PARALLEL:
					case MAX_DATA_PROCESSORS:
					case MIN_CHUNK_SIZE:
					case SKIP_BAD_FILE:
					case NUM:
					case FILE_FORMAT:
					case IMMEDIATE:
					case STARTING:
					case ENDING:
					case INITIALLY:
					case REFRESH:
					case ACTIVATE:
					case LOGGED:
					case EMPTY:
					case SEQUENCE:
					case INCREMENT:
					case MINVALUE:
					case MAXVALUE:
					case OVERLAY:
					case PLACING:
					case TRIM:
					case LTRIM:
					case RTRIM:
					case BOTH:
					case TO_CHAR:
					case AGE:
					case DATE_PART:
					case ISFINITE:
					case INT:
					case UNSIGNED:
					case REGEXP:
					case BINARY:
					case LEADING:
					case TRAILING:
					case RLIKE:
					case DATE_SUB:
					case ADDDATE:
					case DATE_ADD:
					case YEAR_MONTH:
					case DAY_HOUR:
					case DAY_MINUTE:
					case DAY_SECOND:
					case HOUR_MINUTE:
					case HOUR_SECOND:
					case MINUTE_SECOND:
					case UNKNOWN:
					case IDENTIFIER:
					case DIGIT_IDENTIFIER:
					case QUOTED_IDENTIFIER:
					case BACKQUOTED_IDENTIFIER:
						{
						setState(1831);
						identifier(0);
						}
						break;
					case INTEGER_VALUE:
					case DECIMAL_VALUE:
					case DOUBLE_VALUE:
						{
						setState(1832);
						number();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 4:
					{
					setState(1835);
					match(RENAME);
					setState(1836);
					match(COLUMN);
					setState(1837);
					((GpAlterColumnContext)_localctx).columnName = identifier(0);
					setState(1838);
					match(TO);
					setState(1839);
					((GpAlterColumnContext)_localctx).newColumnName = identifier(0);
					}
					break;
				case 5:
					{
					setState(1841);
					match(DROP);
					setState(1842);
					match(COLUMN);
					setState(1843);
					((GpAlterColumnContext)_localctx).columnName = identifier(0);
					}
					break;
				}
				}
				break;
			case 8:
				_localctx = new GpAlterConstraintContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1846);
				match(ALTER);
				setState(1847);
				match(TABLE);
				setState(1848);
				((GpAlterConstraintContext)_localctx).tablename = qualifiedName();
				setState(1868);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
				case 1:
					{
					setState(1849);
					match(ADD);
					setState(1850);
					match(CONSTRAINT);
					setState(1851);
					((GpAlterConstraintContext)_localctx).ckId = identifier(0);
					setState(1852);
					match(CHECK);
					{
					setState(1853);
					booleanExpression(0);
					}
					}
					break;
				case 2:
					{
					setState(1855);
					match(DROP);
					setState(1856);
					match(CONSTRAINT);
					setState(1857);
					((GpAlterConstraintContext)_localctx).ckId = identifier(0);
					}
					break;
				case 3:
					{
					setState(1858);
					match(ADD);
					setState(1859);
					match(CONSTRAINT);
					setState(1860);
					((GpAlterConstraintContext)_localctx).constraintName = identifier(0);
					setState(1861);
					match(FOREIGN);
					setState(1862);
					match(KEY);
					setState(1863);
					columnAliases();
					setState(1864);
					match(REFERENCES);
					setState(1865);
					((GpAlterConstraintContext)_localctx).otherTablename = qualifiedName();
					setState(1866);
					columnAliases();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GpPartitionItemsContext extends ParserRuleContext {
		public List<GpPartitionItemContext> gpPartitionItem() {
			return getRuleContexts(GpPartitionItemContext.class);
		}
		public GpPartitionItemContext gpPartitionItem(int i) {
			return getRuleContext(GpPartitionItemContext.class,i);
		}
		public GpPartitionItemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gpPartitionItems; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGpPartitionItems(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGpPartitionItems(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGpPartitionItems(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GpPartitionItemsContext gpPartitionItems() throws RecognitionException {
		GpPartitionItemsContext _localctx = new GpPartitionItemsContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_gpPartitionItems);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1872);
			match(T__1);
			setState(1873);
			gpPartitionItem();
			setState(1878);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__2) {
				{
				{
				setState(1874);
				match(T__2);
				setState(1875);
				gpPartitionItem();
				}
				}
				setState(1880);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1881);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GpPartitionItemContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(EntireSqlParser.START, 0); }
		public List<TypeConstructorContext> typeConstructor() {
			return getRuleContexts(TypeConstructorContext.class);
		}
		public TypeConstructorContext typeConstructor(int i) {
			return getRuleContext(TypeConstructorContext.class,i);
		}
		public TerminalNode END() { return getToken(EntireSqlParser.END, 0); }
		public TerminalNode EVERY() { return getToken(EntireSqlParser.EVERY, 0); }
		public TerminalNode PARTITION() { return getToken(EntireSqlParser.PARTITION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(EntireSqlParser.VALUES, 0); }
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public List<TerminalNode> INCLUSIVE() { return getTokens(EntireSqlParser.INCLUSIVE); }
		public TerminalNode INCLUSIVE(int i) {
			return getToken(EntireSqlParser.INCLUSIVE, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(EntireSqlParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(EntireSqlParser.EXCLUSIVE, i);
		}
		public TerminalNode DEFAULT() { return getToken(EntireSqlParser.DEFAULT, 0); }
		public GpPartitionItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gpPartitionItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGpPartitionItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGpPartitionItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGpPartitionItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GpPartitionItemContext gpPartitionItem() throws RecognitionException {
		GpPartitionItemContext _localctx = new GpPartitionItemContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_gpPartitionItem);
		int _la;
		try {
			setState(1922);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1883);
				match(START);
				setState(1884);
				match(T__1);
				setState(1885);
				typeConstructor();
				setState(1886);
				match(T__3);
				setState(1887);
				match(END);
				setState(1888);
				match(T__1);
				setState(1889);
				typeConstructor();
				setState(1890);
				match(T__3);
				setState(1891);
				match(EVERY);
				setState(1892);
				match(T__1);
				setState(1893);
				typeConstructor();
				setState(1894);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1896);
				match(PARTITION);
				setState(1897);
				identifier(0);
				setState(1898);
				match(VALUES);
				{
				setState(1899);
				primaryExpression(0);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1901);
				match(PARTITION);
				setState(1902);
				identifier(0);
				setState(1903);
				match(START);
				setState(1904);
				match(T__1);
				setState(1905);
				typeConstructor();
				setState(1906);
				match(T__3);
				setState(1908);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INCLUSIVE || _la==EXCLUSIVE) {
					{
					setState(1907);
					_la = _input.LA(1);
					if ( !(_la==INCLUSIVE || _la==EXCLUSIVE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1917);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==END) {
					{
					setState(1910);
					match(END);
					setState(1911);
					match(T__1);
					setState(1912);
					typeConstructor();
					setState(1913);
					match(T__3);
					setState(1915);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==INCLUSIVE || _la==EXCLUSIVE) {
						{
						setState(1914);
						_la = _input.LA(1);
						if ( !(_la==INCLUSIVE || _la==EXCLUSIVE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1919);
				match(DEFAULT);
				setState(1920);
				match(PARTITION);
				setState(1921);
				identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GpSubpartitionItemsContext extends ParserRuleContext {
		public List<GpSubPartitionItemContext> gpSubPartitionItem() {
			return getRuleContexts(GpSubPartitionItemContext.class);
		}
		public GpSubPartitionItemContext gpSubPartitionItem(int i) {
			return getRuleContext(GpSubPartitionItemContext.class,i);
		}
		public GpSubpartitionItemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gpSubpartitionItems; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGpSubpartitionItems(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGpSubpartitionItems(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGpSubpartitionItems(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GpSubpartitionItemsContext gpSubpartitionItems() throws RecognitionException {
		GpSubpartitionItemsContext _localctx = new GpSubpartitionItemsContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_gpSubpartitionItems);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1924);
			match(T__1);
			setState(1925);
			gpSubPartitionItem();
			setState(1930);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__2) {
				{
				{
				setState(1926);
				match(T__2);
				setState(1927);
				gpSubPartitionItem();
				}
				}
				setState(1932);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1933);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GpSubPartitionItemContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(EntireSqlParser.START, 0); }
		public List<TypeConstructorContext> typeConstructor() {
			return getRuleContexts(TypeConstructorContext.class);
		}
		public TypeConstructorContext typeConstructor(int i) {
			return getRuleContext(TypeConstructorContext.class,i);
		}
		public TerminalNode END() { return getToken(EntireSqlParser.END, 0); }
		public TerminalNode EVERY() { return getToken(EntireSqlParser.EVERY, 0); }
		public TerminalNode SUBPARTITION() { return getToken(EntireSqlParser.SUBPARTITION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(EntireSqlParser.VALUES, 0); }
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public List<TerminalNode> INCLUSIVE() { return getTokens(EntireSqlParser.INCLUSIVE); }
		public TerminalNode INCLUSIVE(int i) {
			return getToken(EntireSqlParser.INCLUSIVE, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(EntireSqlParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(EntireSqlParser.EXCLUSIVE, i);
		}
		public TerminalNode DEFAULT() { return getToken(EntireSqlParser.DEFAULT, 0); }
		public GpSubPartitionItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gpSubPartitionItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGpSubPartitionItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGpSubPartitionItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGpSubPartitionItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GpSubPartitionItemContext gpSubPartitionItem() throws RecognitionException {
		GpSubPartitionItemContext _localctx = new GpSubPartitionItemContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_gpSubPartitionItem);
		int _la;
		try {
			setState(1974);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1935);
				match(START);
				setState(1936);
				match(T__1);
				setState(1937);
				typeConstructor();
				setState(1938);
				match(T__3);
				setState(1939);
				match(END);
				setState(1940);
				match(T__1);
				setState(1941);
				typeConstructor();
				setState(1942);
				match(T__3);
				setState(1943);
				match(EVERY);
				setState(1944);
				match(T__1);
				setState(1945);
				typeConstructor();
				setState(1946);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1948);
				match(SUBPARTITION);
				setState(1949);
				identifier(0);
				setState(1950);
				match(VALUES);
				{
				setState(1951);
				primaryExpression(0);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1953);
				match(SUBPARTITION);
				setState(1954);
				identifier(0);
				setState(1955);
				match(START);
				setState(1956);
				match(T__1);
				setState(1957);
				typeConstructor();
				setState(1958);
				match(T__3);
				setState(1960);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INCLUSIVE || _la==EXCLUSIVE) {
					{
					setState(1959);
					_la = _input.LA(1);
					if ( !(_la==INCLUSIVE || _la==EXCLUSIVE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1969);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==END) {
					{
					setState(1962);
					match(END);
					setState(1963);
					match(T__1);
					setState(1964);
					typeConstructor();
					setState(1965);
					match(T__3);
					setState(1967);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==INCLUSIVE || _la==EXCLUSIVE) {
						{
						setState(1966);
						_la = _input.LA(1);
						if ( !(_la==INCLUSIVE || _la==EXCLUSIVE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1971);
				match(DEFAULT);
				setState(1972);
				match(SUBPARTITION);
				setState(1973);
				identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HiveWriteDataToFileStmContext extends ParserRuleContext {
		public HiveWriteDataToFileStmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hiveWriteDataToFileStm; }

		public HiveWriteDataToFileStmContext() { }
		public void copyFrom(HiveWriteDataToFileStmContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class WriteDataMultiContext extends HiveWriteDataToFileStmContext {
		public QualifiedNameContext tableName;
		public StringContext dir;
		public TerminalNode FROM() { return getToken(EntireSqlParser.FROM, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public List<TerminalNode> INSERT() { return getTokens(EntireSqlParser.INSERT); }
		public TerminalNode INSERT(int i) {
			return getToken(EntireSqlParser.INSERT, i);
		}
		public List<TerminalNode> OVERWRITE() { return getTokens(EntireSqlParser.OVERWRITE); }
		public TerminalNode OVERWRITE(int i) {
			return getToken(EntireSqlParser.OVERWRITE, i);
		}
		public List<TerminalNode> DIRECTORY() { return getTokens(EntireSqlParser.DIRECTORY); }
		public TerminalNode DIRECTORY(int i) {
			return getToken(EntireSqlParser.DIRECTORY, i);
		}
		public List<QueryContext> query() {
			return getRuleContexts(QueryContext.class);
		}
		public QueryContext query(int i) {
			return getRuleContext(QueryContext.class,i);
		}
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public List<TerminalNode> LOCAL() { return getTokens(EntireSqlParser.LOCAL); }
		public TerminalNode LOCAL(int i) {
			return getToken(EntireSqlParser.LOCAL, i);
		}
		public WriteDataMultiContext(HiveWriteDataToFileStmContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterWriteDataMulti(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitWriteDataMulti(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitWriteDataMulti(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WriteDataSingleContext extends HiveWriteDataToFileStmContext {
		public StringContext dir;
		public TerminalNode INSERT() { return getToken(EntireSqlParser.INSERT, 0); }
		public TerminalNode OVERWRITE() { return getToken(EntireSqlParser.OVERWRITE, 0); }
		public TerminalNode DIRECTORY() { return getToken(EntireSqlParser.DIRECTORY, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(EntireSqlParser.LOCAL, 0); }
		public TerminalNode ROW() { return getToken(EntireSqlParser.ROW, 0); }
		public TerminalNode FORMAT() { return getToken(EntireSqlParser.FORMAT, 0); }
		public RowFormatContext rowFormat() {
			return getRuleContext(RowFormatContext.class,0);
		}
		public TerminalNode STORED() { return getToken(EntireSqlParser.STORED, 0); }
		public TerminalNode AS() { return getToken(EntireSqlParser.AS, 0); }
		public FileFormatContext fileFormat() {
			return getRuleContext(FileFormatContext.class,0);
		}
		public WriteDataSingleContext(HiveWriteDataToFileStmContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterWriteDataSingle(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitWriteDataSingle(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitWriteDataSingle(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HiveWriteDataToFileStmContext hiveWriteDataToFileStm() throws RecognitionException {
		HiveWriteDataToFileStmContext _localctx = new HiveWriteDataToFileStmContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_hiveWriteDataToFileStm);
		int _la;
		try {
			setState(2010);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSERT:
				_localctx = new WriteDataSingleContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1976);
				match(INSERT);
				setState(1977);
				match(OVERWRITE);
				setState(1979);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL) {
					{
					setState(1978);
					match(LOCAL);
					}
				}

				setState(1981);
				match(DIRECTORY);
				setState(1982);
				((WriteDataSingleContext)_localctx).dir = string();
				setState(1986);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROW) {
					{
					setState(1983);
					match(ROW);
					setState(1984);
					match(FORMAT);
					setState(1985);
					rowFormat();
					}
				}

				setState(1991);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORED) {
					{
					setState(1988);
					match(STORED);
					setState(1989);
					match(AS);
					setState(1990);
					fileFormat();
					}
				}

				setState(1993);
				query();
				}
				break;
			case FROM:
				_localctx = new WriteDataMultiContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1995);
				match(FROM);
				setState(1996);
				((WriteDataMultiContext)_localctx).tableName = qualifiedName();
				setState(2006);
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1997);
					match(INSERT);
					setState(1998);
					match(OVERWRITE);
					setState(2000);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LOCAL) {
						{
						setState(1999);
						match(LOCAL);
						}
					}

					setState(2002);
					match(DIRECTORY);
					setState(2003);
					((WriteDataMultiContext)_localctx).dir = string();
					setState(2004);
					query();
					}
					}
					setState(2008);
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==INSERT );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintSpecificationContext extends ParserRuleContext {
		public IdentifierContext constraintName;
		public QualifiedNameContext tablename;
		public TerminalNode PRIMARY() { return getToken(EntireSqlParser.PRIMARY, 0); }
		public List<TerminalNode> KEY() { return getTokens(EntireSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(EntireSqlParser.KEY, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> DISABLE() { return getTokens(EntireSqlParser.DISABLE); }
		public TerminalNode DISABLE(int i) {
			return getToken(EntireSqlParser.DISABLE, i);
		}
		public List<TerminalNode> NOVALIDATE() { return getTokens(EntireSqlParser.NOVALIDATE); }
		public TerminalNode NOVALIDATE(int i) {
			return getToken(EntireSqlParser.NOVALIDATE, i);
		}
		public TerminalNode CONSTRAINT() { return getToken(EntireSqlParser.CONSTRAINT, 0); }
		public TerminalNode FOREIGN() { return getToken(EntireSqlParser.FOREIGN, 0); }
		public TerminalNode REFERENCES() { return getToken(EntireSqlParser.REFERENCES, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public ConstraintSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterConstraintSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitConstraintSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitConstraintSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintSpecificationContext constraintSpecification() throws RecognitionException {
		ConstraintSpecificationContext _localctx = new ConstraintSpecificationContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_constraintSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2028);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				{
				setState(2012);
				match(T__2);
				setState(2013);
				match(PRIMARY);
				setState(2014);
				match(KEY);
				setState(2015);
				match(T__1);
				setState(2016);
				identifier(0);
				setState(2021);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__2) {
					{
					{
					setState(2017);
					match(T__2);
					setState(2018);
					identifier(0);
					}
					}
					setState(2023);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2024);
				match(T__3);
				setState(2025);
				match(DISABLE);
				setState(2026);
				match(NOVALIDATE);
				}
				break;
			}
			setState(2060);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__2) {
				{
				setState(2030);
				match(T__2);
				setState(2031);
				match(CONSTRAINT);
				setState(2032);
				((ConstraintSpecificationContext)_localctx).constraintName = identifier(0);
				setState(2033);
				match(FOREIGN);
				setState(2034);
				match(KEY);
				setState(2035);
				match(T__1);
				setState(2036);
				identifier(0);
				setState(2041);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__2) {
					{
					{
					setState(2037);
					match(T__2);
					setState(2038);
					identifier(0);
					}
					}
					setState(2043);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2044);
				match(T__3);
				setState(2045);
				match(REFERENCES);
				setState(2046);
				((ConstraintSpecificationContext)_localctx).tablename = qualifiedName();
				setState(2047);
				match(T__1);
				setState(2048);
				identifier(0);
				setState(2053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__2) {
					{
					{
					setState(2049);
					match(T__2);
					setState(2050);
					identifier(0);
					}
					}
					setState(2055);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2056);
				match(T__3);
				setState(2057);
				match(DISABLE);
				setState(2058);
				match(NOVALIDATE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FileFormatContext extends ParserRuleContext {
		public StringExpContext input_format_classname;
		public StringExpContext output_format_classname;
		public TerminalNode SEQUENCEFILE() { return getToken(EntireSqlParser.SEQUENCEFILE, 0); }
		public TerminalNode TEXTFILE() { return getToken(EntireSqlParser.TEXTFILE, 0); }
		public TerminalNode RCFILE() { return getToken(EntireSqlParser.RCFILE, 0); }
		public TerminalNode ORC() { return getToken(EntireSqlParser.ORC, 0); }
		public TerminalNode ORCFILE() { return getToken(EntireSqlParser.ORCFILE, 0); }
		public TerminalNode PARQUET() { return getToken(EntireSqlParser.PARQUET, 0); }
		public TerminalNode AVRO() { return getToken(EntireSqlParser.AVRO, 0); }
		public TerminalNode JSONFILE() { return getToken(EntireSqlParser.JSONFILE, 0); }
		public TerminalNode INPUTFORMAT() { return getToken(EntireSqlParser.INPUTFORMAT, 0); }
		public TerminalNode OUTPUTFORMAT() { return getToken(EntireSqlParser.OUTPUTFORMAT, 0); }
		public List<StringExpContext> stringExp() {
			return getRuleContexts(StringExpContext.class);
		}
		public StringExpContext stringExp(int i) {
			return getRuleContext(StringExpContext.class,i);
		}
		public FileFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileFormat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterFileFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitFileFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitFileFormat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileFormatContext fileFormat() throws RecognitionException {
		FileFormatContext _localctx = new FileFormatContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_fileFormat);
		try {
			setState(2075);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEQUENCEFILE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2062);
				match(SEQUENCEFILE);
				}
				break;
			case TEXTFILE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2063);
				match(TEXTFILE);
				}
				break;
			case RCFILE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2064);
				match(RCFILE);
				}
				break;
			case ORC:
				enterOuterAlt(_localctx, 4);
				{
				setState(2065);
				match(ORC);
				}
				break;
			case ORCFILE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2066);
				match(ORCFILE);
				}
				break;
			case PARQUET:
				enterOuterAlt(_localctx, 6);
				{
				setState(2067);
				match(PARQUET);
				}
				break;
			case AVRO:
				enterOuterAlt(_localctx, 7);
				{
				setState(2068);
				match(AVRO);
				}
				break;
			case JSONFILE:
				enterOuterAlt(_localctx, 8);
				{
				setState(2069);
				match(JSONFILE);
				}
				break;
			case INPUTFORMAT:
				enterOuterAlt(_localctx, 9);
				{
				setState(2070);
				match(INPUTFORMAT);
				setState(2071);
				((FileFormatContext)_localctx).input_format_classname = stringExp();
				setState(2072);
				match(OUTPUTFORMAT);
				setState(2073);
				((FileFormatContext)_localctx).output_format_classname = stringExp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowFormatContext extends ParserRuleContext {
		public StringExpContext serdeName;
		public TerminalNode DELIMITED() { return getToken(EntireSqlParser.DELIMITED, 0); }
		public TerminalNode FIELDS() { return getToken(EntireSqlParser.FIELDS, 0); }
		public List<TerminalNode> TERMINATED() { return getTokens(EntireSqlParser.TERMINATED); }
		public TerminalNode TERMINATED(int i) {
			return getToken(EntireSqlParser.TERMINATED, i);
		}
		public List<TerminalNode> BY() { return getTokens(EntireSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(EntireSqlParser.BY, i);
		}
		public List<StringExpContext> stringExp() {
			return getRuleContexts(StringExpContext.class);
		}
		public StringExpContext stringExp(int i) {
			return getRuleContext(StringExpContext.class,i);
		}
		public TerminalNode COLLECTION() { return getToken(EntireSqlParser.COLLECTION, 0); }
		public TerminalNode ITEMS() { return getToken(EntireSqlParser.ITEMS, 0); }
		public TerminalNode MAP() { return getToken(EntireSqlParser.MAP, 0); }
		public TerminalNode KEYS() { return getToken(EntireSqlParser.KEYS, 0); }
		public TerminalNode LINES() { return getToken(EntireSqlParser.LINES, 0); }
		public NullExpContext nullExp() {
			return getRuleContext(NullExpContext.class,0);
		}
		public TerminalNode DEFINED() { return getToken(EntireSqlParser.DEFINED, 0); }
		public TerminalNode AS() { return getToken(EntireSqlParser.AS, 0); }
		public TerminalNode ESCAPED() { return getToken(EntireSqlParser.ESCAPED, 0); }
		public TerminalNode SERDE() { return getToken(EntireSqlParser.SERDE, 0); }
		public TerminalNode WITH() { return getToken(EntireSqlParser.WITH, 0); }
		public TerminalNode SERDEPROPERTIES() { return getToken(EntireSqlParser.SERDEPROPERTIES, 0); }
		public MultiStrEvaluationContext multiStrEvaluation() {
			return getRuleContext(MultiStrEvaluationContext.class,0);
		}
		public RowFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowFormat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterRowFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitRowFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitRowFormat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowFormatContext rowFormat() throws RecognitionException {
		RowFormatContext _localctx = new RowFormatContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_rowFormat);
		int _la;
		try {
			setState(2123);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELIMITED:
				enterOuterAlt(_localctx, 1);
				{
				setState(2077);
				match(DELIMITED);
				setState(2087);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FIELDS) {
					{
					setState(2078);
					match(FIELDS);
					setState(2079);
					match(TERMINATED);
					setState(2080);
					match(BY);
					setState(2081);
					stringExp();
					setState(2085);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ESCAPED) {
						{
						setState(2082);
						match(ESCAPED);
						setState(2083);
						match(BY);
						setState(2084);
						stringExp();
						}
					}

					}
				}

				setState(2094);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLECTION) {
					{
					setState(2089);
					match(COLLECTION);
					setState(2090);
					match(ITEMS);
					setState(2091);
					match(TERMINATED);
					setState(2092);
					match(BY);
					setState(2093);
					stringExp();
					}
				}

				setState(2101);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MAP) {
					{
					setState(2096);
					match(MAP);
					setState(2097);
					match(KEYS);
					setState(2098);
					match(TERMINATED);
					setState(2099);
					match(BY);
					setState(2100);
					stringExp();
					}
				}

				setState(2107);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINES) {
					{
					setState(2103);
					match(LINES);
					setState(2104);
					match(TERMINATED);
					setState(2105);
					match(BY);
					setState(2106);
					stringExp();
					}
				}

				setState(2114);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULL) {
					{
					setState(2109);
					nullExp();
					setState(2110);
					match(DEFINED);
					setState(2111);
					match(AS);
					setState(2112);
					stringExp();
					}
				}

				}
				break;
			case SERDE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2116);
				match(SERDE);
				setState(2117);
				((RowFormatContext)_localctx).serdeName = stringExp();
				setState(2121);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
				case 1:
					{
					setState(2118);
					match(WITH);
					setState(2119);
					match(SERDEPROPERTIES);
					setState(2120);
					multiStrEvaluation();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringExpContext extends ParserRuleContext {
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(EntireSqlParser.QUOTED_IDENTIFIER, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public StringExpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringExp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterStringExp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitStringExp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitStringExp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringExpContext stringExp() throws RecognitionException {
		StringExpContext _localctx = new StringExpContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_stringExp);
		try {
			setState(2127);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case QUOTED_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2125);
				match(QUOTED_IDENTIFIER);
				}
				break;
			case STRING:
			case UNICODE_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(2126);
				string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringAndNumberExpContext extends ParserRuleContext {
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(EntireSqlParser.QUOTED_IDENTIFIER, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public StringAndNumberExpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringAndNumberExp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterStringAndNumberExp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitStringAndNumberExp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitStringAndNumberExp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringAndNumberExpContext stringAndNumberExp() throws RecognitionException {
		StringAndNumberExpContext _localctx = new StringAndNumberExpContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_stringAndNumberExp);
		try {
			setState(2132);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case QUOTED_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2129);
				match(QUOTED_IDENTIFIER);
				}
				break;
			case STRING:
			case UNICODE_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(2130);
				string();
				}
				break;
			case INTEGER_VALUE:
			case DECIMAL_VALUE:
			case DOUBLE_VALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2131);
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultiStrEvaluationContext extends ParserRuleContext {
		public StringExpContext key;
		public StringExpContext val;
		public List<TerminalNode> EQ() { return getTokens(EntireSqlParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(EntireSqlParser.EQ, i);
		}
		public List<StringExpContext> stringExp() {
			return getRuleContexts(StringExpContext.class);
		}
		public StringExpContext stringExp(int i) {
			return getRuleContext(StringExpContext.class,i);
		}
		public MultiStrEvaluationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiStrEvaluation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterMultiStrEvaluation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitMultiStrEvaluation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitMultiStrEvaluation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultiStrEvaluationContext multiStrEvaluation() throws RecognitionException {
		MultiStrEvaluationContext _localctx = new MultiStrEvaluationContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_multiStrEvaluation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2134);
			match(T__1);
			setState(2135);
			((MultiStrEvaluationContext)_localctx).key = stringExp();
			setState(2136);
			match(EQ);
			setState(2137);
			((MultiStrEvaluationContext)_localctx).val = stringExp();
			setState(2145);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__2) {
				{
				{
				setState(2138);
				match(T__2);
				setState(2139);
				((MultiStrEvaluationContext)_localctx).key = stringExp();
				setState(2140);
				match(EQ);
				setState(2141);
				((MultiStrEvaluationContext)_localctx).val = stringExp();
				}
				}
				setState(2147);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2148);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultiKeyEvaluationContext extends ParserRuleContext {
		public IdentifierContext key;
		public StringAndNumberExpContext val;
		public List<TerminalNode> EQ() { return getTokens(EntireSqlParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(EntireSqlParser.EQ, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<StringAndNumberExpContext> stringAndNumberExp() {
			return getRuleContexts(StringAndNumberExpContext.class);
		}
		public StringAndNumberExpContext stringAndNumberExp(int i) {
			return getRuleContext(StringAndNumberExpContext.class,i);
		}
		public MultiKeyEvaluationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiKeyEvaluation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterMultiKeyEvaluation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitMultiKeyEvaluation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitMultiKeyEvaluation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultiKeyEvaluationContext multiKeyEvaluation() throws RecognitionException {
		MultiKeyEvaluationContext _localctx = new MultiKeyEvaluationContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_multiKeyEvaluation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2150);
			match(T__1);
			setState(2151);
			((MultiKeyEvaluationContext)_localctx).key = identifier(0);
			setState(2152);
			match(EQ);
			setState(2153);
			((MultiKeyEvaluationContext)_localctx).val = stringAndNumberExp();
			setState(2161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__2) {
				{
				{
				setState(2154);
				match(T__2);
				setState(2155);
				((MultiKeyEvaluationContext)_localctx).key = identifier(0);
				setState(2156);
				match(EQ);
				setState(2157);
				((MultiKeyEvaluationContext)_localctx).val = stringAndNumberExp();
				}
				}
				setState(2163);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2164);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionNoTypeContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(EntireSqlParser.COMMENT, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public ColumnDefinitionNoTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinitionNoType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterColumnDefinitionNoType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitColumnDefinitionNoType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitColumnDefinitionNoType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionNoTypeContext columnDefinitionNoType() throws RecognitionException {
		ColumnDefinitionNoTypeContext _localctx = new ColumnDefinitionNoTypeContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_columnDefinitionNoType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2166);
			identifier(0);
			setState(2169);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(2167);
				match(COMMENT);
				setState(2168);
				string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullExpContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(EntireSqlParser.NULL, 0); }
		public NullExpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullExp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterNullExp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitNullExp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitNullExp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullExpContext nullExp() throws RecognitionException {
		NullExpContext _localctx = new NullExpContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_nullExp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2171);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StandaloneExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode EOF() { return getToken(EntireSqlParser.EOF, 0); }
		public StandaloneExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standaloneExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterStandaloneExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitStandaloneExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitStandaloneExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StandaloneExpressionContext standaloneExpression() throws RecognitionException {
		StandaloneExpressionContext _localctx = new StandaloneExpressionContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_standaloneExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2173);
			expression();
			setState(2174);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StandalonePathSpecificationContext extends ParserRuleContext {
		public PathSpecificationContext pathSpecification() {
			return getRuleContext(PathSpecificationContext.class,0);
		}
		public TerminalNode EOF() { return getToken(EntireSqlParser.EOF, 0); }
		public StandalonePathSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standalonePathSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterStandalonePathSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitStandalonePathSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitStandalonePathSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StandalonePathSpecificationContext standalonePathSpecification() throws RecognitionException {
		StandalonePathSpecificationContext _localctx = new StandalonePathSpecificationContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_standalonePathSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2176);
			pathSpecification();
			setState(2177);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryStatementContext extends ParserRuleContext {
		public QueryNoWithContext queryNoWith() {
			return getRuleContext(QueryNoWithContext.class,0);
		}
		public TerminalNode EOF() { return getToken(EntireSqlParser.EOF, 0); }
		public QueryStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterQueryStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitQueryStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitQueryStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryStatementContext queryStatement() throws RecognitionException {
		QueryStatementContext _localctx = new QueryStatementContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_queryStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2179);
			queryNoWith();
			setState(2180);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementNoEofContext extends ParserRuleContext {
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public StatementNoEofContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statementNoEof; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterStatementNoEof(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitStatementNoEof(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitStatementNoEof(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementNoEofContext statementNoEof() throws RecognitionException {
		StatementNoEofContext _localctx = new StatementNoEofContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_statementNoEof);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2182);
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }

		public StatementContext() { }
		public void copyFrom(StatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ExplainContext extends StatementContext {
		public TerminalNode EXPLAIN() { return getToken(EntireSqlParser.EXPLAIN, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public TerminalNode ANALYZE() { return getToken(EntireSqlParser.ANALYZE, 0); }
		public TerminalNode VERBOSE() { return getToken(EntireSqlParser.VERBOSE, 0); }
		public List<ExplainOptionContext> explainOption() {
			return getRuleContexts(ExplainOptionContext.class);
		}
		public ExplainOptionContext explainOption(int i) {
			return getRuleContext(ExplainOptionContext.class,i);
		}
		public ExplainContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterExplain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitExplain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitExplain(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowIndexContext extends StatementContext {
		public StringContext pattern;
		public StringContext escape;
		public TerminalNode SHOW() { return getToken(EntireSqlParser.SHOW, 0); }
		public TerminalNode INDEX() { return getToken(EntireSqlParser.INDEX, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(EntireSqlParser.LIKE, 0); }
		public TerminalNode FROM() { return getToken(EntireSqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(EntireSqlParser.IN, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode ESCAPE() { return getToken(EntireSqlParser.ESCAPE, 0); }
		public ShowIndexContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterShowIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitShowIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitShowIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrepareContext extends StatementContext {
		public TerminalNode PREPARE() { return getToken(EntireSqlParser.PREPARE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FROM() { return getToken(EntireSqlParser.FROM, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public PrepareContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterPrepare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitPrepare(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitPrepare(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UseContext extends StatementContext {
		public IdentifierContext schema;
		public IdentifierContext catalog;
		public TerminalNode USE() { return getToken(EntireSqlParser.USE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public UseContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterUse(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitUse(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitUse(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DeallocateContext extends StatementContext {
		public TerminalNode DEALLOCATE() { return getToken(EntireSqlParser.DEALLOCATE, 0); }
		public TerminalNode PREPARE() { return getToken(EntireSqlParser.PREPARE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DeallocateContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterDeallocate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitDeallocate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitDeallocate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RenameTableContext extends StatementContext {
		public QualifiedNameContext from;
		public QualifiedNameContext to;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode RENAME() { return getToken(EntireSqlParser.RENAME, 0); }
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(EntireSqlParser.TO, 0); }
		public RenameTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterRenameTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitRenameTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitRenameTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CommitContext extends StatementContext {
		public TerminalNode COMMIT() { return getToken(EntireSqlParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(EntireSqlParser.WORK, 0); }
		public CommitContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterCommit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitCommit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitCommit(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DropColumnContext extends StatementContext {
		public QualifiedNameContext tableName;
		public QualifiedNameContext column;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public List<TerminalNode> DROP() { return getTokens(EntireSqlParser.DROP); }
		public TerminalNode DROP(int i) {
			return getToken(EntireSqlParser.DROP, i);
		}
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public List<TerminalNode> COLUMN() { return getTokens(EntireSqlParser.COLUMN); }
		public TerminalNode COLUMN(int i) {
			return getToken(EntireSqlParser.COLUMN, i);
		}
		public DropColumnContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterDropColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitDropColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitDropColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DropViewContext extends StatementContext {
		public TerminalNode DROP() { return getToken(EntireSqlParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(EntireSqlParser.VIEW, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(EntireSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(EntireSqlParser.EXISTS, 0); }
		public DropViewContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterDropView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitDropView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitDropView(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowTablesContext extends StatementContext {
		public StringContext pattern;
		public StringContext escape;
		public TerminalNode SHOW() { return getToken(EntireSqlParser.SHOW, 0); }
		public TerminalNode TABLES() { return getToken(EntireSqlParser.TABLES, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(EntireSqlParser.LIKE, 0); }
		public TerminalNode FROM() { return getToken(EntireSqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(EntireSqlParser.IN, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode ESCAPE() { return getToken(EntireSqlParser.ESCAPE, 0); }
		public ShowTablesContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterShowTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitShowTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitShowTables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DropIndexContext extends StatementContext {
		public QualifiedNameContext indexName;
		public QualifiedNameContext tableName;
		public TerminalNode DROP() { return getToken(EntireSqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(EntireSqlParser.INDEX, 0); }
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public TerminalNode ON() { return getToken(EntireSqlParser.ON, 0); }
		public TerminalNode FORCE() { return getToken(EntireSqlParser.FORCE, 0); }
		public TerminalNode CASCADE() { return getToken(EntireSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(EntireSqlParser.RESTRICT, 0); }
		public DropIndexContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowPartitionContext extends StatementContext {
		public TerminalNode SHOW() { return getToken(EntireSqlParser.SHOW, 0); }
		public TerminalNode PARTITIONS() { return getToken(EntireSqlParser.PARTITIONS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ShowPartitionContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterShowPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitShowPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitShowPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCatalogsContext extends StatementContext {
		public StringContext pattern;
		public TerminalNode SHOW() { return getToken(EntireSqlParser.SHOW, 0); }
		public TerminalNode CATALOGS() { return getToken(EntireSqlParser.CATALOGS, 0); }
		public TerminalNode LIKE() { return getToken(EntireSqlParser.LIKE, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public ShowCatalogsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterShowCatalogs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitShowCatalogs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitShowCatalogs(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RepairTableContext extends StatementContext {
		public QualifiedNameContext tableName;
		public TerminalNode MSCK() { return getToken(EntireSqlParser.MSCK, 0); }
		public TerminalNode REPAIR() { return getToken(EntireSqlParser.REPAIR, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public RepairTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterRepairTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitRepairTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitRepairTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RenameColumnContext extends StatementContext {
		public QualifiedNameContext tableName;
		public IdentifierContext from;
		public IdentifierContext to;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode RENAME() { return getToken(EntireSqlParser.RENAME, 0); }
		public TerminalNode COLUMN() { return getToken(EntireSqlParser.COLUMN, 0); }
		public TerminalNode TO() { return getToken(EntireSqlParser.TO, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public RenameColumnContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterRenameColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitRenameColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitRenameColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateTableContext extends StatementContext {
		public TerminalNode SHOW() { return getToken(EntireSqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(EntireSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public ShowCreateTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterShowCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitShowCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitShowCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowColumnsContext extends StatementContext {
		public TerminalNode SHOW() { return getToken(EntireSqlParser.SHOW, 0); }
		public TerminalNode COLUMNS() { return getToken(EntireSqlParser.COLUMNS, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(EntireSqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(EntireSqlParser.IN, 0); }
		public TerminalNode DESCRIBE() { return getToken(EntireSqlParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(EntireSqlParser.DESC, 0); }
		public ShowColumnsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterShowColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitShowColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitShowColumns(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AddColumnContext extends StatementContext {
		public QualifiedNameContext tableName;
		public IdentifierContext columnName;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode ADD() { return getToken(EntireSqlParser.ADD, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(EntireSqlParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(EntireSqlParser.FIRST, 0); }
		public List<TableElementContext> tableElement() {
			return getRuleContexts(TableElementContext.class);
		}
		public TableElementContext tableElement(int i) {
			return getRuleContext(TableElementContext.class,i);
		}
		public TerminalNode AFTER() { return getToken(EntireSqlParser.AFTER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AddColumnContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterAddColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitAddColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitAddColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ResetSessionContext extends StatementContext {
		public TerminalNode RESET() { return getToken(EntireSqlParser.RESET, 0); }
		public TerminalNode SESSION() { return getToken(EntireSqlParser.SESSION, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public ResetSessionContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterResetSession(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitResetSession(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitResetSession(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterColumnContext extends StatementContext {
		public QualifiedNameContext tableName;
		public QualifiedNameContext column;
		public List<TerminalNode> ALTER() { return getTokens(EntireSqlParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(EntireSqlParser.ALTER, i);
		}
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public TerminalNode SET() { return getToken(EntireSqlParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(EntireSqlParser.DEFAULT, 0); }
		public TerminalNode DROP() { return getToken(EntireSqlParser.DROP, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode NULL() { return getToken(EntireSqlParser.NULL, 0); }
		public AlterColumnContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterAlterColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitAlterColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitAlterColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowSessionContext extends StatementContext {
		public TerminalNode SHOW() { return getToken(EntireSqlParser.SHOW, 0); }
		public TerminalNode SESSION() { return getToken(EntireSqlParser.SESSION, 0); }
		public ShowSessionContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterShowSession(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitShowSession(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitShowSession(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateSchemaContext extends StatementContext {
		public TerminalNode CREATE() { return getToken(EntireSqlParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(EntireSqlParser.SCHEMA, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(EntireSqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(EntireSqlParser.EXISTS, 0); }
		public TerminalNode WITH() { return getToken(EntireSqlParser.WITH, 0); }
		public PropertiesContext properties() {
			return getRuleContext(PropertiesContext.class,0);
		}
		public CreateSchemaContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterCreateSchema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitCreateSchema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitCreateSchema(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AddIndexContext extends StatementContext {
		public QualifiedNameContext tableName;
		public QualifiedNameContext indexName;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode ADD() { return getToken(EntireSqlParser.ADD, 0); }
		public TerminalNode INDEX() { return getToken(EntireSqlParser.INDEX, 0); }
		public ColumnAliasesByOrderContext columnAliasesByOrder() {
			return getRuleContext(ColumnAliasesByOrderContext.class,0);
		}
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public AddIndexContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterAddIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitAddIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitAddIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExecuteContext extends StatementContext {
		public TerminalNode EXECUTE() { return getToken(EntireSqlParser.EXECUTE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode USING() { return getToken(EntireSqlParser.USING, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public ExecuteContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterExecute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitExecute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitExecute(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RenameSchemaContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode SCHEMA() { return getToken(EntireSqlParser.SCHEMA, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(EntireSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(EntireSqlParser.TO, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RenameSchemaContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterRenameSchema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitRenameSchema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitRenameSchema(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetPropertyContext extends StatementContext {
		public TerminalNode SET() { return getToken(EntireSqlParser.SET, 0); }
		public List<Identifier_extContext> identifier_ext() {
			return getRuleContexts(Identifier_extContext.class);
		}
		public Identifier_extContext identifier_ext(int i) {
			return getRuleContext(Identifier_extContext.class,i);
		}
		public TerminalNode EQ() { return getToken(EntireSqlParser.EQ, 0); }
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public SetPropertyContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterSetProperty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitSetProperty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitSetProperty(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowGrantsContext extends StatementContext {
		public TerminalNode SHOW() { return getToken(EntireSqlParser.SHOW, 0); }
		public TerminalNode GRANTS() { return getToken(EntireSqlParser.GRANTS, 0); }
		public TerminalNode ON() { return getToken(EntireSqlParser.ON, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public ShowGrantsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterShowGrants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitShowGrants(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitShowGrants(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DropSchemaContext extends StatementContext {
		public TerminalNode DROP() { return getToken(EntireSqlParser.DROP, 0); }
		public TerminalNode SCHEMA() { return getToken(EntireSqlParser.SCHEMA, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(EntireSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(EntireSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(EntireSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(EntireSqlParser.RESTRICT, 0); }
		public DropSchemaContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterDropSchema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitDropSchema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitDropSchema(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateViewContext extends StatementContext {
		public TerminalNode SHOW() { return getToken(EntireSqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(EntireSqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(EntireSqlParser.VIEW, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public ShowCreateViewContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterShowCreateView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitShowCreateView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitShowCreateView(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ChangeTableContext extends StatementContext {
		public QualifiedNameContext tableName;
		public QualifiedNameContext columnOld;
		public QualifiedNameContext columnNew;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode CHANGE() { return getToken(EntireSqlParser.CHANGE, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(EntireSqlParser.DEFAULT, 0); }
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public List<TerminalNode> NULL() { return getTokens(EntireSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(EntireSqlParser.NULL, i);
		}
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public ChangeTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterChangeTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitChangeTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitChangeTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateTableContext extends StatementContext {
		public TerminalNode CREATE() { return getToken(EntireSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public List<TableElementContext> tableElement() {
			return getRuleContexts(TableElementContext.class);
		}
		public TableElementContext tableElement(int i) {
			return getRuleContext(TableElementContext.class,i);
		}
		public TerminalNode GLOBAL() { return getToken(EntireSqlParser.GLOBAL, 0); }
		public TerminalNode TEMPORARY() { return getToken(EntireSqlParser.TEMPORARY, 0); }
		public TerminalNode EXTERNAL() { return getToken(EntireSqlParser.EXTERNAL, 0); }
		public TerminalNode IF() { return getToken(EntireSqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(EntireSqlParser.EXISTS, 0); }
		public OracleTemporayItemContext oracleTemporayItem() {
			return getRuleContext(OracleTemporayItemContext.class,0);
		}
		public MysqlTemporayItemContext mysqlTemporayItem() {
			return getRuleContext(MysqlTemporayItemContext.class,0);
		}
		public GbaseTemporayItemContext gbaseTemporayItem() {
			return getRuleContext(GbaseTemporayItemContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(EntireSqlParser.COMMENT, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode WITH() { return getToken(EntireSqlParser.WITH, 0); }
		public PropertiesContext properties() {
			return getRuleContext(PropertiesContext.class,0);
		}
		public OraclePartitionItemsContext oraclePartitionItems() {
			return getRuleContext(OraclePartitionItemsContext.class,0);
		}
		public Db2PartitionItemsContext db2PartitionItems() {
			return getRuleContext(Db2PartitionItemsContext.class,0);
		}
		public TerminalNode EQ() { return getToken(EntireSqlParser.EQ, 0); }
		public CreateTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StartTransactionContext extends StatementContext {
		public TerminalNode START() { return getToken(EntireSqlParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(EntireSqlParser.TRANSACTION, 0); }
		public List<TransactionModeContext> transactionMode() {
			return getRuleContexts(TransactionModeContext.class);
		}
		public TransactionModeContext transactionMode(int i) {
			return getRuleContext(TransactionModeContext.class,i);
		}
		public StartTransactionContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterStartTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitStartTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateTableAsSelectContext extends StatementContext {
		public TerminalNode CREATE() { return getToken(EntireSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(EntireSqlParser.AS, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode IF() { return getToken(EntireSqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(EntireSqlParser.EXISTS, 0); }
		public ColumnAliasesContext columnAliases() {
			return getRuleContext(ColumnAliasesContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(EntireSqlParser.COMMENT, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(EntireSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(EntireSqlParser.WITH, i);
		}
		public PropertiesContext properties() {
			return getRuleContext(PropertiesContext.class,0);
		}
		public TerminalNode NOLOGGING() { return getToken(EntireSqlParser.NOLOGGING, 0); }
		public TerminalNode DATA() { return getToken(EntireSqlParser.DATA, 0); }
		public TerminalNode DEFINITION() { return getToken(EntireSqlParser.DEFINITION, 0); }
		public TerminalNode ONLY() { return getToken(EntireSqlParser.ONLY, 0); }
		public Db2CreateTableAsSelectItemContext db2CreateTableAsSelectItem() {
			return getRuleContext(Db2CreateTableAsSelectItemContext.class,0);
		}
		public TerminalNode NO() { return getToken(EntireSqlParser.NO, 0); }
		public CreateTableAsSelectContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterCreateTableAsSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitCreateTableAsSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitCreateTableAsSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowStatsContext extends StatementContext {
		public TerminalNode SHOW() { return getToken(EntireSqlParser.SHOW, 0); }
		public TerminalNode STATS() { return getToken(EntireSqlParser.STATS, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(EntireSqlParser.FOR, 0); }
		public TerminalNode ON() { return getToken(EntireSqlParser.ON, 0); }
		public ShowStatsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterShowStats(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitShowStats(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitShowStats(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UpdateContext extends StatementContext {
		public QualifiedNameContext tableName;
		public IdentifierContext tableAlias;
		public TerminalNode UPDATE() { return getToken(EntireSqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(EntireSqlParser.SET, 0); }
		public List<PrimaryExpressionContext> primaryExpression() {
			return getRuleContexts(PrimaryExpressionContext.class);
		}
		public PrimaryExpressionContext primaryExpression(int i) {
			return getRuleContext(PrimaryExpressionContext.class,i);
		}
		public List<TerminalNode> EQ() { return getTokens(EntireSqlParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(EntireSqlParser.EQ, i);
		}
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(EntireSqlParser.WHERE, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UpdateContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterUpdate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitUpdate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitUpdate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InsertContext extends StatementContext {
		public InsertStmContext insertStm() {
			return getRuleContext(InsertStmContext.class,0);
		}
		public InsertContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterInsert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitInsert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitInsert(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RevokeContext extends StatementContext {
		public IdentifierContext grantee;
		public TerminalNode REVOKE() { return getToken(EntireSqlParser.REVOKE, 0); }
		public TerminalNode ON() { return getToken(EntireSqlParser.ON, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(EntireSqlParser.FROM, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<PrivilegeContext> privilege() {
			return getRuleContexts(PrivilegeContext.class);
		}
		public PrivilegeContext privilege(int i) {
			return getRuleContext(PrivilegeContext.class,i);
		}
		public TerminalNode ALL() { return getToken(EntireSqlParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(EntireSqlParser.PRIVILEGES, 0); }
		public TerminalNode GRANT() { return getToken(EntireSqlParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(EntireSqlParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(EntireSqlParser.FOR, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public RevokeContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitRevoke(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DeleteContext extends StatementContext {
		public IdentifierContext tableAlias;
		public TerminalNode DELETE() { return getToken(EntireSqlParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(EntireSqlParser.FROM, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(EntireSqlParser.WHERE, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DeleteContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitDelete(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DescribeInputContext extends StatementContext {
		public TerminalNode DESCRIBE() { return getToken(EntireSqlParser.DESCRIBE, 0); }
		public TerminalNode INPUT() { return getToken(EntireSqlParser.INPUT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DescribeInputContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterDescribeInput(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitDescribeInput(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitDescribeInput(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowStatsForQueryContext extends StatementContext {
		public TerminalNode SHOW() { return getToken(EntireSqlParser.SHOW, 0); }
		public TerminalNode STATS() { return getToken(EntireSqlParser.STATS, 0); }
		public TerminalNode FOR() { return getToken(EntireSqlParser.FOR, 0); }
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public ShowStatsForQueryContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterShowStatsForQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitShowStatsForQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitShowStatsForQuery(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StatementDefaultContext extends StatementContext {
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public StatementDefaultContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterStatementDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitStatementDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitStatementDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TruncateTableContext extends StatementContext {
		public TerminalNode TRUNCATE() { return getToken(EntireSqlParser.TRUNCATE, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TruncateTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterTruncateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitTruncateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitTruncateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetSessionContext extends StatementContext {
		public TerminalNode SET() { return getToken(EntireSqlParser.SET, 0); }
		public TerminalNode SESSION() { return getToken(EntireSqlParser.SESSION, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode EQ() { return getToken(EntireSqlParser.EQ, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SetSessionContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterSetSession(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitSetSession(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitSetSession(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateViewContext extends StatementContext {
		public TerminalNode CREATE() { return getToken(EntireSqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(EntireSqlParser.VIEW, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(EntireSqlParser.AS, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode OR() { return getToken(EntireSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(EntireSqlParser.REPLACE, 0); }
		public CreateViewContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterCreateView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitCreateView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitCreateView(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowSchemasContext extends StatementContext {
		public StringContext pattern;
		public StringContext escape;
		public TerminalNode SHOW() { return getToken(EntireSqlParser.SHOW, 0); }
		public TerminalNode SCHEMAS() { return getToken(EntireSqlParser.SCHEMAS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(EntireSqlParser.LIKE, 0); }
		public TerminalNode FROM() { return getToken(EntireSqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(EntireSqlParser.IN, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode ESCAPE() { return getToken(EntireSqlParser.ESCAPE, 0); }
		public ShowSchemasContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterShowSchemas(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitShowSchemas(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitShowSchemas(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DropTableContext extends StatementContext {
		public TerminalNode DROP() { return getToken(EntireSqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(EntireSqlParser.TEMPORARY, 0); }
		public TerminalNode EXTERNAL() { return getToken(EntireSqlParser.EXTERNAL, 0); }
		public TerminalNode IF() { return getToken(EntireSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(EntireSqlParser.EXISTS, 0); }
		public DropTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterDropTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitDropTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitDropTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RollbackContext extends StatementContext {
		public TerminalNode ROLLBACK() { return getToken(EntireSqlParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(EntireSqlParser.WORK, 0); }
		public RollbackContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterRollback(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitRollback(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitRollback(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ModifyTableContext extends StatementContext {
		public QualifiedNameContext tableName;
		public QualifiedNameContext column;
		public IdentifierContext columnName;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode MODIFY() { return getToken(EntireSqlParser.MODIFY, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public List<TerminalNode> NULL() { return getTokens(EntireSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(EntireSqlParser.NULL, i);
		}
		public TerminalNode DEFAULT() { return getToken(EntireSqlParser.DEFAULT, 0); }
		public TerminalNode FIRST() { return getToken(EntireSqlParser.FIRST, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode AFTER() { return getToken(EntireSqlParser.AFTER, 0); }
		public ModifyTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterModifyTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitModifyTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitModifyTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetPathContext extends StatementContext {
		public TerminalNode SET() { return getToken(EntireSqlParser.SET, 0); }
		public TerminalNode PATH() { return getToken(EntireSqlParser.PATH, 0); }
		public PathSpecificationContext pathSpecification() {
			return getRuleContext(PathSpecificationContext.class,0);
		}
		public SetPathContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterSetPath(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitSetPath(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitSetPath(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateIndexContext extends StatementContext {
		public QualifiedNameContext indexName;
		public QualifiedNameContext tableName;
		public TerminalNode CREATE() { return getToken(EntireSqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(EntireSqlParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(EntireSqlParser.ON, 0); }
		public ColumnAliasesByOrderContext columnAliasesByOrder() {
			return getRuleContext(ColumnAliasesByOrderContext.class,0);
		}
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public TerminalNode UNIQUE() { return getToken(EntireSqlParser.UNIQUE, 0); }
		public TerminalNode BITMAP() { return getToken(EntireSqlParser.BITMAP, 0); }
		public CreateIndexContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitCreateIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CallContext extends StatementContext {
		public TerminalNode CALL() { return getToken(EntireSqlParser.CALL, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public List<CallArgumentContext> callArgument() {
			return getRuleContexts(CallArgumentContext.class);
		}
		public CallArgumentContext callArgument(int i) {
			return getRuleContext(CallArgumentContext.class,i);
		}
		public CallContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterDropIndexContext extends StatementContext {
		public QualifiedNameContext tableName;
		public QualifiedNameContext indexName;
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode DROP() { return getToken(EntireSqlParser.DROP, 0); }
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(EntireSqlParser.INDEX, 0); }
		public TerminalNode PRIMARY() { return getToken(EntireSqlParser.PRIMARY, 0); }
		public AlterDropIndexContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterAlterDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitAlterDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitAlterDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetOracleCommentContext extends StatementContext {
		public OracleCommentContext oracleComment() {
			return getRuleContext(OracleCommentContext.class,0);
		}
		public SetOracleCommentContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterSetOracleComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitSetOracleComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitSetOracleComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowFunctionsContext extends StatementContext {
		public TerminalNode SHOW() { return getToken(EntireSqlParser.SHOW, 0); }
		public TerminalNode FUNCTIONS() { return getToken(EntireSqlParser.FUNCTIONS, 0); }
		public ShowFunctionsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterShowFunctions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitShowFunctions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitShowFunctions(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DescribeOutputContext extends StatementContext {
		public TerminalNode DESCRIBE() { return getToken(EntireSqlParser.DESCRIBE, 0); }
		public TerminalNode OUTPUT() { return getToken(EntireSqlParser.OUTPUT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DescribeOutputContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterDescribeOutput(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitDescribeOutput(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitDescribeOutput(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GrantContext extends StatementContext {
		public IdentifierContext grantee;
		public List<TerminalNode> GRANT() { return getTokens(EntireSqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(EntireSqlParser.GRANT, i);
		}
		public TerminalNode ON() { return getToken(EntireSqlParser.ON, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode TO() { return getToken(EntireSqlParser.TO, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<PrivilegeContext> privilege() {
			return getRuleContexts(PrivilegeContext.class);
		}
		public PrivilegeContext privilege(int i) {
			return getRuleContext(PrivilegeContext.class,i);
		}
		public TerminalNode ALL() { return getToken(EntireSqlParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(EntireSqlParser.PRIVILEGES, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode WITH() { return getToken(EntireSqlParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(EntireSqlParser.OPTION, 0); }
		public GrantContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGrant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGrant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGrant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_statement);
		int _la;
		try {
			int _alt;
			setState(2807);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				_localctx = new StatementDefaultContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2184);
				query();
				}
				break;
			case 2:
				_localctx = new SetOracleCommentContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2185);
				oracleComment();
				}
				break;
			case 3:
				_localctx = new UpdateContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2186);
				match(UPDATE);
				setState(2187);
				((UpdateContext)_localctx).tableName = qualifiedName();
				setState(2189);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
				case 1:
					{
					setState(2188);
					((UpdateContext)_localctx).tableAlias = identifier(0);
					}
					break;
				}
				setState(2191);
				match(SET);
				setState(2192);
				primaryExpression(0);
				setState(2193);
				match(EQ);
				setState(2194);
				valueExpression(0);
				setState(2202);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__2) {
					{
					{
					setState(2195);
					match(T__2);
					setState(2196);
					primaryExpression(0);
					setState(2197);
					match(EQ);
					setState(2198);
					valueExpression(0);
					}
					}
					setState(2204);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2207);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(2205);
					match(WHERE);
					setState(2206);
					booleanExpression(0);
					}
				}

				}
				break;
			case 4:
				_localctx = new UseContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2209);
				match(USE);
				setState(2210);
				((UseContext)_localctx).schema = identifier(0);
				}
				break;
			case 5:
				_localctx = new UseContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2211);
				match(USE);
				setState(2212);
				((UseContext)_localctx).catalog = identifier(0);
				setState(2213);
				match(T__4);
				setState(2214);
				((UseContext)_localctx).schema = identifier(0);
				}
				break;
			case 6:
				_localctx = new CreateSchemaContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2216);
				match(CREATE);
				setState(2217);
				match(SCHEMA);
				setState(2221);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
				case 1:
					{
					setState(2218);
					match(IF);
					setState(2219);
					match(NOT);
					setState(2220);
					match(EXISTS);
					}
					break;
				}
				setState(2223);
				qualifiedName();
				setState(2226);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2224);
					match(WITH);
					setState(2225);
					properties();
					}
				}

				}
				break;
			case 7:
				_localctx = new DropSchemaContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2228);
				match(DROP);
				setState(2229);
				match(SCHEMA);
				setState(2232);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
				case 1:
					{
					setState(2230);
					match(IF);
					setState(2231);
					match(EXISTS);
					}
					break;
				}
				setState(2234);
				qualifiedName();
				setState(2236);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2235);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 8:
				_localctx = new RenameSchemaContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2238);
				match(ALTER);
				setState(2239);
				match(SCHEMA);
				setState(2240);
				qualifiedName();
				setState(2241);
				match(RENAME);
				setState(2242);
				match(TO);
				setState(2243);
				identifier(0);
				}
				break;
			case 9:
				_localctx = new CreateTableAsSelectContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2245);
				match(CREATE);
				setState(2246);
				match(TABLE);
				setState(2250);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
				case 1:
					{
					setState(2247);
					match(IF);
					setState(2248);
					match(NOT);
					setState(2249);
					match(EXISTS);
					}
					break;
				}
				setState(2252);
				qualifiedName();
				setState(2254);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__1) {
					{
					setState(2253);
					columnAliases();
					}
				}

				setState(2258);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(2256);
					match(COMMENT);
					setState(2257);
					string();
					}
				}

				setState(2262);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2260);
					match(WITH);
					setState(2261);
					properties();
					}
				}

				setState(2265);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOLOGGING) {
					{
					setState(2264);
					match(NOLOGGING);
					}
				}

				setState(2267);
				match(AS);
				setState(2273);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
				case 1:
					{
					setState(2268);
					query();
					}
					break;
				case 2:
					{
					setState(2269);
					match(T__1);
					setState(2270);
					query();
					setState(2271);
					match(T__3);
					}
					break;
				}
				setState(2280);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
				case 1:
					{
					setState(2275);
					match(WITH);
					setState(2277);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO) {
						{
						setState(2276);
						match(NO);
						}
					}

					setState(2279);
					match(DATA);
					}
					break;
				}
				setState(2284);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
				case 1:
					{
					setState(2282);
					match(DEFINITION);
					setState(2283);
					match(ONLY);
					}
					break;
				}
				setState(2287);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
				case 1:
					{
					setState(2286);
					db2CreateTableAsSelectItem();
					}
					break;
				}
				}
				break;
			case 10:
				_localctx = new CreateTableContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2289);
				match(CREATE);
				setState(2291);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL) {
					{
					setState(2290);
					match(GLOBAL);
					}
				}

				setState(2294);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(2293);
					match(TEMPORARY);
					}
				}

				setState(2297);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(2296);
					match(EXTERNAL);
					}
				}

				setState(2299);
				match(TABLE);
				setState(2303);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,260,_ctx) ) {
				case 1:
					{
					setState(2300);
					match(IF);
					setState(2301);
					match(NOT);
					setState(2302);
					match(EXISTS);
					}
					break;
				}
				setState(2305);
				qualifiedName();
				setState(2306);
				match(T__1);
				setState(2307);
				tableElement();
				setState(2312);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__2) {
					{
					{
					setState(2308);
					match(T__2);
					setState(2309);
					tableElement();
					}
					}
					setState(2314);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2315);
				match(T__3);
				setState(2317);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
				case 1:
					{
					setState(2316);
					oracleTemporayItem();
					}
					break;
				}
				setState(2320);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
				case 1:
					{
					setState(2319);
					mysqlTemporayItem();
					}
					break;
				}
				setState(2323);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
				case 1:
					{
					setState(2322);
					gbaseTemporayItem();
					}
					break;
				}
				setState(2330);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
				case 1:
					{
					setState(2325);
					match(COMMENT);
					setState(2327);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==EQ) {
						{
						setState(2326);
						match(EQ);
						}
					}

					setState(2329);
					string();
					}
					break;
				}
				setState(2334);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,267,_ctx) ) {
				case 1:
					{
					setState(2332);
					match(WITH);
					setState(2333);
					properties();
					}
					break;
				}
				setState(2337);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
				case 1:
					{
					setState(2336);
					oraclePartitionItems();
					}
					break;
				}
				setState(2340);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
				case 1:
					{
					setState(2339);
					db2PartitionItems();
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new TruncateTableContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2342);
				match(TRUNCATE);
				setState(2343);
				match(TABLE);
				setState(2344);
				qualifiedName();
				}
				break;
			case 12:
				_localctx = new DropTableContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2345);
				match(DROP);
				setState(2347);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(2346);
					match(TEMPORARY);
					}
				}

				setState(2350);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(2349);
					match(EXTERNAL);
					}
				}

				setState(2352);
				match(TABLE);
				setState(2355);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
				case 1:
					{
					setState(2353);
					match(IF);
					setState(2354);
					match(EXISTS);
					}
					break;
				}
				setState(2357);
				qualifiedName();
				}
				break;
			case 13:
				_localctx = new CreateIndexContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2358);
				match(CREATE);
				setState(2360);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNIQUE || _la==BITMAP) {
					{
					setState(2359);
					_la = _input.LA(1);
					if ( !(_la==UNIQUE || _la==BITMAP) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2362);
				match(INDEX);
				setState(2363);
				((CreateIndexContext)_localctx).indexName = qualifiedName();
				setState(2364);
				match(ON);
				setState(2365);
				((CreateIndexContext)_localctx).tableName = qualifiedName();
				setState(2366);
				columnAliasesByOrder();
				}
				break;
			case 14:
				_localctx = new AddIndexContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2368);
				match(ALTER);
				setState(2369);
				match(TABLE);
				setState(2370);
				((AddIndexContext)_localctx).tableName = qualifiedName();
				setState(2371);
				match(ADD);
				setState(2372);
				match(INDEX);
				setState(2373);
				((AddIndexContext)_localctx).indexName = qualifiedName();
				setState(2374);
				columnAliasesByOrder();
				}
				break;
			case 15:
				_localctx = new DropIndexContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(2376);
				match(DROP);
				setState(2377);
				match(INDEX);
				setState(2378);
				((DropIndexContext)_localctx).indexName = qualifiedName();
				setState(2381);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(2379);
					match(ON);
					setState(2380);
					((DropIndexContext)_localctx).tableName = qualifiedName();
					}
				}

				setState(2384);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(2383);
					match(FORCE);
					}
				}

				setState(2387);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2386);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 16:
				_localctx = new AlterDropIndexContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(2389);
				match(ALTER);
				setState(2390);
				match(TABLE);
				setState(2391);
				((AlterDropIndexContext)_localctx).tableName = qualifiedName();
				setState(2392);
				match(DROP);
				setState(2393);
				_la = _input.LA(1);
				if ( !(_la==PRIMARY || _la==INDEX) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2394);
				((AlterDropIndexContext)_localctx).indexName = qualifiedName();
				}
				break;
			case 17:
				_localctx = new InsertContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(2396);
				insertStm();
				}
				break;
			case 18:
				_localctx = new DeleteContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(2397);
				match(DELETE);
				setState(2398);
				match(FROM);
				setState(2399);
				qualifiedName();
				setState(2401);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALL) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << AT) | (1L << BERNOULLI) | (1L << BETWEEN) | (1L << BY) | (1L << CALL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONSTRAINT) | (1L << CROSS) | (1L << CUBE) | (1L << CURRENT) | (1L << CURRENT_DATE) | (1L << CURRENT_PATH) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DATA) | (1L << DATE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DESC) | (1L << DESCRIBE) | (1L << DISTINCT) | (1L << DISTRIBUTED) | (1L << DROP) | (1L << ELSE) | (1L << ESCAPE) | (1L << EXCEPT) | (1L << EXCLUDING) | (1L << EXECUTE) | (1L << EXISTS) | (1L << EXPLAIN))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXTRACT - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FOR - 64)) | (1L << (FORMAT - 64)) | (1L << (FULL - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUP - 64)) | (1L << (GROUPING - 64)) | (1L << (HAVING - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IN - 64)) | (1L << (INCLUDING - 64)) | (1L << (INNER - 64)) | (1L << (INPUT - 64)) | (1L << (INSERT - 64)) | (1L << (INTERSECT - 64)) | (1L << (MINUSES - 64)) | (1L << (INTERVAL - 64)) | (1L << (INTO - 64)) | (1L << (IO - 64)) | (1L << (IS - 64)) | (1L << (ISOLATION - 64)) | (1L << (JSON - 64)) | (1L << (JOIN - 64)) | (1L << (LAST - 64)) | (1L << (LATERAL - 64)) | (1L << (LEFT - 64)) | (1L << (LEVEL - 64)) | (1L << (LIKE - 64)) | (1L << (LIMIT - 64)) | (1L << (LISTAGG - 64)) | (1L << (LOCALTIME - 64)) | (1L << (LOCALTIMESTAMP - 64)) | (1L << (LOGICAL - 64)) | (1L << (MAP - 64)) | (1L << (MINUTE - 64)) | (1L << (MONTH - 64)) | (1L << (MODIFY - 64)) | (1L << (NATURAL - 64)) | (1L << (NFC - 64)) | (1L << (NFD - 64)) | (1L << (NFKC - 64)) | (1L << (NFKD - 64)) | (1L << (NO - 64)) | (1L << (NORMALIZE - 64)) | (1L << (NULLIF - 64)) | (1L << (NULLS - 64)) | (1L << (ON - 64)) | (1L << (ONLY - 64)) | (1L << (OPTION - 64)) | (1L << (OR - 64)) | (1L << (ORDER - 64)) | (1L << (ORDINALITY - 64)) | (1L << (OUTER - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (OVER - 128)) | (1L << (PARTITION - 128)) | (1L << (PARTITIONS - 128)) | (1L << (PATH - 128)) | (1L << (POSITION - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROPERTIES - 128)) | (1L << (PUBLIC - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (RECURSIVE - 128)) | (1L << (RENAME - 128)) | (1L << (REPEATABLE - 128)) | (1L << (REPLACE - 128)) | (1L << (RESET - 128)) | (1L << (RESTRICT - 128)) | (1L << (REVOKE - 128)) | (1L << (RIGHT - 128)) | (1L << (ROLLBACK - 128)) | (1L << (ROLLUP - 128)) | (1L << (ROW - 128)) | (1L << (ROWS - 128)) | (1L << (SCHEMA - 128)) | (1L << (SCHEMAS - 128)) | (1L << (SECOND - 128)) | (1L << (SERIALIZABLE - 128)) | (1L << (SESSION - 128)) | (1L << (SET - 128)) | (1L << (SETS - 128)) | (1L << (SHOW - 128)) | (1L << (SOME - 128)) | (1L << (START - 128)) | (1L << (STATS - 128)) | (1L << (SUBSTRING - 128)) | (1L << (SYSTEM - 128)) | (1L << (TABLES - 128)) | (1L << (TABLESAMPLE - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TIMESTAMP - 128)) | (1L << (TO - 128)) | (1L << (TRANSACTION - 128)) | (1L << (TRY_CAST - 128)) | (1L << (TYPE - 128)) | (1L << (TRUNCATE - 128)) | (1L << (UPDATE - 128)) | (1L << (UESCAPE - 128)) | (1L << (UNBOUNDED - 128)) | (1L << (UNCOMMITTED - 128)) | (1L << (UNION - 128)) | (1L << (UNNEST - 128)) | (1L << (USE - 128)) | (1L << (VALIDATE - 128)) | (1L << (VERBOSE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (VIEW - 192)) | (1L << (WHEN - 192)) | (1L << (WITH - 192)) | (1L << (WITHIN - 192)) | (1L << (WORK - 192)) | (1L << (WRITE - 192)) | (1L << (YEAR - 192)) | (1L << (ZONE - 192)) | (1L << (SEMI - 192)) | (1L << (SORT - 192)) | (1L << (OFFSET - 192)) | (1L << (DEFAULT - 192)) | (1L << (TABLESPACE - 192)) | (1L << (EXTERNAL - 192)) | (1L << (PURGE - 192)) | (1L << (TEMPORARY - 192)) | (1L << (PRIMARY - 192)) | (1L << (KEY - 192)) | (1L << (DISABLE - 192)) | (1L << (NOVALIDATE - 192)) | (1L << (FOREIGN - 192)) | (1L << (REFERENCES - 192)) | (1L << (PARTITIONED - 192)) | (1L << (CLUSTERED - 192)) | (1L << (SORTED - 192)) | (1L << (BUCKETS - 192)) | (1L << (SKEWED - 192)) | (1L << (STORED - 192)) | (1L << (DELIMITED - 192)) | (1L << (FIELDS - 192)) | (1L << (TERMINATED - 192)) | (1L << (ESCAPED - 192)) | (1L << (COLLECTION - 192)) | (1L << (ITEMS - 192)) | (1L << (KEYS - 192)) | (1L << (LINES - 192)) | (1L << (DEFINED - 192)) | (1L << (SEQUENCEFILE - 192)) | (1L << (TEXTFILE - 192)) | (1L << (RCFILE - 192)) | (1L << (ORC - 192)) | (1L << (ORCFILE - 192)) | (1L << (PARQUET - 192)) | (1L << (AVRO - 192)) | (1L << (JSONFILE - 192)) | (1L << (INPUTFORMAT - 192)) | (1L << (OUTPUTFORMAT - 192)) | (1L << (SERDE - 192)) | (1L << (SERDEPROPERTIES - 192)) | (1L << (LOCATION - 192)) | (1L << (TBLPROPERTIES - 192)) | (1L << (RELY - 192)) | (1L << (EXCHANGE - 192)) | (1L << (RECOVER - 192)) | (1L << (ARCHIVE - 192)) | (1L << (UNARCHIVE - 192)) | (1L << (IGNORE - 192)) | (1L << (PROTECTION - 192)) | (1L << (TOUCH - 192)) | (1L << (ENABLE - 192)) | (1L << (NO_DROP - 192)) | (1L << (OFFLINE - 192)) | (1L << (COMPACT - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (WAIT - 256)) | (1L << (CONCATENATE - 256)) | (1L << (CHANGE - 256)) | (1L << (AFTER - 256)) | (1L << (DEFERRED - 256)) | (1L << (REBUILD - 256)) | (1L << (INDEX - 256)) | (1L << (IDXPROPERTIES - 256)) | (1L << (FUNCTION - 256)) | (1L << (JAR - 256)) | (1L << (FILE - 256)) | (1L << (DATABASE - 256)) | (1L << (DBPROPERTIES - 256)) | (1L << (OWNER - 256)) | (1L << (RELOAD - 256)) | (1L << (USER - 256)) | (1L << (ROLE - 256)) | (1L << (FILEFORMAT - 256)) | (1L << (LOAD - 256)) | (1L << (LOCAL - 256)) | (1L << (INPATH - 256)) | (1L << (DIRECTORY - 256)) | (1L << (VACUUM - 256)) | (1L << (LIST - 256)) | (1L << (SUBPARTITION - 256)) | (1L << (SUBPARTITIONS - 256)) | (1L << (EVERY - 256)) | (1L << (INCLUSIVE - 256)) | (1L << (EXCLUSIVE - 256)) | (1L << (TEMPLATE - 256)) | (1L << (ENCODING - 256)) | (1L << (LOG - 256)) | (1L << (ERRORS - 256)) | (1L << (SEGMENT - 256)) | (1L << (REJECT - 256)) | (1L << (PERCENT - 256)) | (1L << (WRITABLE - 256)) | (1L << (CHECK - 256)) | (1L << (UNIQUE - 256)) | (1L << (CONCURRENTLY - 256)) | (1L << (BITMAP - 256)) | (1L << (FORCE - 256)) | (1L << (SPLIT - 256)) | (1L << (REINDEX - 256)) | (1L << (FREEZE - 256)) | (1L << (MSCK - 256)) | (1L << (REPAIR - 256)) | (1L << (FETCH - 256)) | (1L << (DEFINITION - 256)) | (1L << (LESS - 256)) | (1L << (THAN - 256)) | (1L << (HASH - 256)) | (1L << (NOLOGGING - 256)) | (1L << (STRUCT - 256)) | (1L << (GLOBAL - 256)) | (1L << (PRESERVE - 256)) | (1L << (AUTO_INCREMENT - 256)) | (1L << (ENGINE - 256)) | (1L << (CHARSET - 256)) | (1L << (COMPRESS - 256)) | (1L << (EXPRESS - 256)) | (1L << (REPLICATED - 256)) | (1L << (NOCOPIES - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (SPACE - 320)) | (1L << (SHRINK - 320)) | (1L << (KEY_BLOCK_SIZE - 320)) | (1L << (KEY_DC_SIZE - 320)) | (1L << (AUTOEXTEND - 320)) | (1L << (NEXT - 320)) | (1L << (OFF - 320)) | (1L << (MATCHED - 320)) | (1L << (MERGE - 320)) | (1L << (OUTFILE - 320)) | (1L << (OPTIONALLY - 320)) | (1L << (ENCLOSED - 320)) | (1L << (DOUBLE_ENCLOSED - 320)) | (1L << (NULL_VALUE - 320)) | (1L << (OUTFILEMODE - 320)) | (1L << (HDFS - 320)) | (1L << (WRITEMODE - 320)) | (1L << (NORMAL - 320)) | (1L << (OVERWRITES - 320)) | (1L << (FILECOUNT - 320)) | (1L << (FILESIZE - 320)) | (1L << (CHARACTER - 320)) | (1L << (GBK - 320)) | (1L << (UTF8 - 320)) | (1L << (HEAD - 320)) | (1L << (RMTSELECT - 320)) | (1L << (INFILE - 320)) | (1L << (DATA_FORMAT - 320)) | (1L << (SEPARATOR - 320)) | (1L << (BLANKS - 320)) | (1L << (AUTOFILL - 320)) | (1L << (LENGTH - 320)) | (1L << (TABLE_FIELDS - 320)) | (1L << (MAX_BAD_RECORDS - 320)) | (1L << (DATETIME - 320)) | (1L << (TRACE - 320)) | (1L << (TRACE_PATH - 320)) | (1L << (NOSPLIT - 320)) | (1L << (PARALLEL - 320)) | (1L << (MAX_DATA_PROCESSORS - 320)) | (1L << (MIN_CHUNK_SIZE - 320)) | (1L << (SKIP_BAD_FILE - 320)) | (1L << (NUM - 320)) | (1L << (FILE_FORMAT - 320)) | (1L << (IMMEDIATE - 320)) | (1L << (STARTING - 320)) | (1L << (ENDING - 320)) | (1L << (INITIALLY - 320)) | (1L << (REFRESH - 320)) | (1L << (ACTIVATE - 320)) | (1L << (LOGGED - 320)) | (1L << (EMPTY - 320)) | (1L << (SEQUENCE - 320)) | (1L << (INCREMENT - 320)) | (1L << (MINVALUE - 320)) | (1L << (MAXVALUE - 320)) | (1L << (OVERLAY - 320)) | (1L << (PLACING - 320)) | (1L << (TRIM - 320)) | (1L << (LTRIM - 320)) | (1L << (RTRIM - 320)) | (1L << (BOTH - 320)) | (1L << (TO_CHAR - 320)) | (1L << (AGE - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (DATE_PART - 384)) | (1L << (ISFINITE - 384)) | (1L << (INT - 384)) | (1L << (UNSIGNED - 384)) | (1L << (REGEXP - 384)) | (1L << (BINARY - 384)) | (1L << (LEADING - 384)) | (1L << (TRAILING - 384)) | (1L << (RLIKE - 384)) | (1L << (DATE_SUB - 384)) | (1L << (ADDDATE - 384)) | (1L << (DATE_ADD - 384)) | (1L << (YEAR_MONTH - 384)) | (1L << (DAY_HOUR - 384)) | (1L << (DAY_MINUTE - 384)) | (1L << (DAY_SECOND - 384)) | (1L << (HOUR_MINUTE - 384)) | (1L << (HOUR_SECOND - 384)) | (1L << (MINUTE_SECOND - 384)) | (1L << (UNKNOWN - 384)) | (1L << (IDENTIFIER - 384)) | (1L << (DIGIT_IDENTIFIER - 384)) | (1L << (QUOTED_IDENTIFIER - 384)) | (1L << (BACKQUOTED_IDENTIFIER - 384)))) != 0)) {
					{
					setState(2400);
					((DeleteContext)_localctx).tableAlias = identifier(0);
					}
				}

				setState(2405);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(2403);
					match(WHERE);
					setState(2404);
					booleanExpression(0);
					}
				}

				}
				break;
			case 19:
				_localctx = new RenameTableContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(2407);
				match(ALTER);
				setState(2408);
				match(TABLE);
				setState(2409);
				((RenameTableContext)_localctx).from = qualifiedName();
				setState(2410);
				match(RENAME);
				setState(2412);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
				case 1:
					{
					setState(2411);
					match(TO);
					}
					break;
				}
				setState(2414);
				((RenameTableContext)_localctx).to = qualifiedName();
				}
				break;
			case 20:
				_localctx = new ModifyTableContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(2416);
				match(ALTER);
				setState(2417);
				match(TABLE);
				setState(2418);
				((ModifyTableContext)_localctx).tableName = qualifiedName();
				setState(2419);
				match(MODIFY);
				setState(2420);
				((ModifyTableContext)_localctx).column = qualifiedName();
				setState(2421);
				type(0);
				setState(2424);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2422);
					match(NOT);
					setState(2423);
					match(NULL);
					}
				}

				setState(2433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2426);
					match(DEFAULT);
					setState(2431);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
					case UNICODE_STRING:
						{
						setState(2427);
						string();
						}
						break;
					case ADD:
					case ALL:
					case ANALYZE:
					case AND:
					case ANY:
					case ARRAY:
					case AS:
					case ASC:
					case AT:
					case BERNOULLI:
					case BETWEEN:
					case BY:
					case CALL:
					case CASCADE:
					case CASE:
					case CAST:
					case CATALOGS:
					case COLUMN:
					case COLUMNS:
					case COMMENT:
					case COMMIT:
					case COMMITTED:
					case CONSTRAINT:
					case CROSS:
					case CUBE:
					case CURRENT:
					case CURRENT_DATE:
					case CURRENT_PATH:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case CURRENT_USER:
					case DATA:
					case DATE:
					case DAY:
					case DEALLOCATE:
					case DESC:
					case DESCRIBE:
					case DISTINCT:
					case DISTRIBUTED:
					case DROP:
					case ELSE:
					case ESCAPE:
					case EXCEPT:
					case EXCLUDING:
					case EXECUTE:
					case EXISTS:
					case EXPLAIN:
					case EXTRACT:
					case FILTER:
					case FIRST:
					case FOLLOWING:
					case FOR:
					case FORMAT:
					case FULL:
					case FUNCTIONS:
					case GRANT:
					case GRANTS:
					case GRAPHVIZ:
					case GROUP:
					case GROUPING:
					case HAVING:
					case HOUR:
					case IF:
					case IN:
					case INCLUDING:
					case INNER:
					case INPUT:
					case INSERT:
					case INTERSECT:
					case MINUSES:
					case INTERVAL:
					case INTO:
					case IO:
					case IS:
					case ISOLATION:
					case JSON:
					case JOIN:
					case LAST:
					case LATERAL:
					case LEFT:
					case LEVEL:
					case LIKE:
					case LIMIT:
					case LISTAGG:
					case LOCALTIME:
					case LOCALTIMESTAMP:
					case LOGICAL:
					case MAP:
					case MINUTE:
					case MONTH:
					case MODIFY:
					case NATURAL:
					case NFC:
					case NFD:
					case NFKC:
					case NFKD:
					case NO:
					case NORMALIZE:
					case NULLIF:
					case NULLS:
					case ON:
					case ONLY:
					case OPTION:
					case OR:
					case ORDER:
					case ORDINALITY:
					case OUTER:
					case OUTPUT:
					case OVER:
					case PARTITION:
					case PARTITIONS:
					case PATH:
					case POSITION:
					case PRECEDING:
					case PREPARE:
					case PRIVILEGES:
					case PROPERTIES:
					case PUBLIC:
					case RANGE:
					case READ:
					case RECURSIVE:
					case RENAME:
					case REPEATABLE:
					case REPLACE:
					case RESET:
					case RESTRICT:
					case REVOKE:
					case RIGHT:
					case ROLLBACK:
					case ROLLUP:
					case ROW:
					case ROWS:
					case SCHEMA:
					case SCHEMAS:
					case SECOND:
					case SERIALIZABLE:
					case SESSION:
					case SET:
					case SETS:
					case SHOW:
					case SOME:
					case START:
					case STATS:
					case SUBSTRING:
					case SYSTEM:
					case TABLES:
					case TABLESAMPLE:
					case TEXT:
					case THEN:
					case TIME:
					case TIMESTAMP:
					case TO:
					case TRANSACTION:
					case TRY_CAST:
					case TYPE:
					case TRUNCATE:
					case UPDATE:
					case UESCAPE:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNION:
					case UNNEST:
					case USE:
					case VALIDATE:
					case VERBOSE:
					case VIEW:
					case WHEN:
					case WITH:
					case WITHIN:
					case WORK:
					case WRITE:
					case YEAR:
					case ZONE:
					case SEMI:
					case SORT:
					case OFFSET:
					case DEFAULT:
					case TABLESPACE:
					case EXTERNAL:
					case PURGE:
					case TEMPORARY:
					case PRIMARY:
					case KEY:
					case DISABLE:
					case NOVALIDATE:
					case FOREIGN:
					case REFERENCES:
					case PARTITIONED:
					case CLUSTERED:
					case SORTED:
					case BUCKETS:
					case SKEWED:
					case STORED:
					case DELIMITED:
					case FIELDS:
					case TERMINATED:
					case ESCAPED:
					case COLLECTION:
					case ITEMS:
					case KEYS:
					case LINES:
					case DEFINED:
					case SEQUENCEFILE:
					case TEXTFILE:
					case RCFILE:
					case ORC:
					case ORCFILE:
					case PARQUET:
					case AVRO:
					case JSONFILE:
					case INPUTFORMAT:
					case OUTPUTFORMAT:
					case SERDE:
					case SERDEPROPERTIES:
					case LOCATION:
					case TBLPROPERTIES:
					case RELY:
					case EXCHANGE:
					case RECOVER:
					case ARCHIVE:
					case UNARCHIVE:
					case IGNORE:
					case PROTECTION:
					case TOUCH:
					case ENABLE:
					case NO_DROP:
					case OFFLINE:
					case COMPACT:
					case WAIT:
					case CONCATENATE:
					case CHANGE:
					case AFTER:
					case DEFERRED:
					case REBUILD:
					case INDEX:
					case IDXPROPERTIES:
					case FUNCTION:
					case JAR:
					case FILE:
					case DATABASE:
					case DBPROPERTIES:
					case OWNER:
					case RELOAD:
					case USER:
					case ROLE:
					case FILEFORMAT:
					case LOAD:
					case LOCAL:
					case INPATH:
					case DIRECTORY:
					case VACUUM:
					case LIST:
					case SUBPARTITION:
					case SUBPARTITIONS:
					case EVERY:
					case INCLUSIVE:
					case EXCLUSIVE:
					case TEMPLATE:
					case ENCODING:
					case LOG:
					case ERRORS:
					case SEGMENT:
					case REJECT:
					case PERCENT:
					case WRITABLE:
					case CHECK:
					case UNIQUE:
					case CONCURRENTLY:
					case BITMAP:
					case FORCE:
					case SPLIT:
					case REINDEX:
					case FREEZE:
					case MSCK:
					case REPAIR:
					case FETCH:
					case DEFINITION:
					case LESS:
					case THAN:
					case HASH:
					case NOLOGGING:
					case STRUCT:
					case GLOBAL:
					case PRESERVE:
					case AUTO_INCREMENT:
					case ENGINE:
					case CHARSET:
					case COMPRESS:
					case EXPRESS:
					case REPLICATED:
					case NOCOPIES:
					case SPACE:
					case SHRINK:
					case KEY_BLOCK_SIZE:
					case KEY_DC_SIZE:
					case AUTOEXTEND:
					case NEXT:
					case OFF:
					case MATCHED:
					case MERGE:
					case OUTFILE:
					case OPTIONALLY:
					case ENCLOSED:
					case DOUBLE_ENCLOSED:
					case NULL_VALUE:
					case OUTFILEMODE:
					case HDFS:
					case WRITEMODE:
					case NORMAL:
					case OVERWRITES:
					case FILECOUNT:
					case FILESIZE:
					case CHARACTER:
					case GBK:
					case UTF8:
					case HEAD:
					case RMTSELECT:
					case INFILE:
					case DATA_FORMAT:
					case SEPARATOR:
					case BLANKS:
					case AUTOFILL:
					case LENGTH:
					case TABLE_FIELDS:
					case MAX_BAD_RECORDS:
					case DATETIME:
					case TRACE:
					case TRACE_PATH:
					case NOSPLIT:
					case PARALLEL:
					case MAX_DATA_PROCESSORS:
					case MIN_CHUNK_SIZE:
					case SKIP_BAD_FILE:
					case NUM:
					case FILE_FORMAT:
					case IMMEDIATE:
					case STARTING:
					case ENDING:
					case INITIALLY:
					case REFRESH:
					case ACTIVATE:
					case LOGGED:
					case EMPTY:
					case SEQUENCE:
					case INCREMENT:
					case MINVALUE:
					case MAXVALUE:
					case OVERLAY:
					case PLACING:
					case TRIM:
					case LTRIM:
					case RTRIM:
					case BOTH:
					case TO_CHAR:
					case AGE:
					case DATE_PART:
					case ISFINITE:
					case INT:
					case UNSIGNED:
					case REGEXP:
					case BINARY:
					case LEADING:
					case TRAILING:
					case RLIKE:
					case DATE_SUB:
					case ADDDATE:
					case DATE_ADD:
					case YEAR_MONTH:
					case DAY_HOUR:
					case DAY_MINUTE:
					case DAY_SECOND:
					case HOUR_MINUTE:
					case HOUR_SECOND:
					case MINUTE_SECOND:
					case UNKNOWN:
					case IDENTIFIER:
					case DIGIT_IDENTIFIER:
					case QUOTED_IDENTIFIER:
					case BACKQUOTED_IDENTIFIER:
						{
						setState(2428);
						identifier(0);
						}
						break;
					case INTEGER_VALUE:
					case DECIMAL_VALUE:
					case DOUBLE_VALUE:
						{
						setState(2429);
						number();
						}
						break;
					case NULL:
						{
						setState(2430);
						match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(2438);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2435);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					{
					setState(2436);
					match(AFTER);
					setState(2437);
					((ModifyTableContext)_localctx).columnName = identifier(0);
					}
					}
					break;
				case EOF:
				case T__0:
					break;
				default:
					break;
				}
				}
				break;
			case 21:
				_localctx = new ChangeTableContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(2440);
				match(ALTER);
				setState(2441);
				match(TABLE);
				setState(2442);
				((ChangeTableContext)_localctx).tableName = qualifiedName();
				setState(2443);
				match(CHANGE);
				setState(2444);
				((ChangeTableContext)_localctx).columnOld = qualifiedName();
				setState(2445);
				((ChangeTableContext)_localctx).columnNew = qualifiedName();
				setState(2446);
				type(0);
				setState(2454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2447);
					match(DEFAULT);
					setState(2452);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
					case UNICODE_STRING:
						{
						setState(2448);
						string();
						}
						break;
					case ADD:
					case ALL:
					case ANALYZE:
					case AND:
					case ANY:
					case ARRAY:
					case AS:
					case ASC:
					case AT:
					case BERNOULLI:
					case BETWEEN:
					case BY:
					case CALL:
					case CASCADE:
					case CASE:
					case CAST:
					case CATALOGS:
					case COLUMN:
					case COLUMNS:
					case COMMENT:
					case COMMIT:
					case COMMITTED:
					case CONSTRAINT:
					case CROSS:
					case CUBE:
					case CURRENT:
					case CURRENT_DATE:
					case CURRENT_PATH:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case CURRENT_USER:
					case DATA:
					case DATE:
					case DAY:
					case DEALLOCATE:
					case DESC:
					case DESCRIBE:
					case DISTINCT:
					case DISTRIBUTED:
					case DROP:
					case ELSE:
					case ESCAPE:
					case EXCEPT:
					case EXCLUDING:
					case EXECUTE:
					case EXISTS:
					case EXPLAIN:
					case EXTRACT:
					case FILTER:
					case FIRST:
					case FOLLOWING:
					case FOR:
					case FORMAT:
					case FULL:
					case FUNCTIONS:
					case GRANT:
					case GRANTS:
					case GRAPHVIZ:
					case GROUP:
					case GROUPING:
					case HAVING:
					case HOUR:
					case IF:
					case IN:
					case INCLUDING:
					case INNER:
					case INPUT:
					case INSERT:
					case INTERSECT:
					case MINUSES:
					case INTERVAL:
					case INTO:
					case IO:
					case IS:
					case ISOLATION:
					case JSON:
					case JOIN:
					case LAST:
					case LATERAL:
					case LEFT:
					case LEVEL:
					case LIKE:
					case LIMIT:
					case LISTAGG:
					case LOCALTIME:
					case LOCALTIMESTAMP:
					case LOGICAL:
					case MAP:
					case MINUTE:
					case MONTH:
					case MODIFY:
					case NATURAL:
					case NFC:
					case NFD:
					case NFKC:
					case NFKD:
					case NO:
					case NORMALIZE:
					case NULLIF:
					case NULLS:
					case ON:
					case ONLY:
					case OPTION:
					case OR:
					case ORDER:
					case ORDINALITY:
					case OUTER:
					case OUTPUT:
					case OVER:
					case PARTITION:
					case PARTITIONS:
					case PATH:
					case POSITION:
					case PRECEDING:
					case PREPARE:
					case PRIVILEGES:
					case PROPERTIES:
					case PUBLIC:
					case RANGE:
					case READ:
					case RECURSIVE:
					case RENAME:
					case REPEATABLE:
					case REPLACE:
					case RESET:
					case RESTRICT:
					case REVOKE:
					case RIGHT:
					case ROLLBACK:
					case ROLLUP:
					case ROW:
					case ROWS:
					case SCHEMA:
					case SCHEMAS:
					case SECOND:
					case SERIALIZABLE:
					case SESSION:
					case SET:
					case SETS:
					case SHOW:
					case SOME:
					case START:
					case STATS:
					case SUBSTRING:
					case SYSTEM:
					case TABLES:
					case TABLESAMPLE:
					case TEXT:
					case THEN:
					case TIME:
					case TIMESTAMP:
					case TO:
					case TRANSACTION:
					case TRY_CAST:
					case TYPE:
					case TRUNCATE:
					case UPDATE:
					case UESCAPE:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNION:
					case UNNEST:
					case USE:
					case VALIDATE:
					case VERBOSE:
					case VIEW:
					case WHEN:
					case WITH:
					case WITHIN:
					case WORK:
					case WRITE:
					case YEAR:
					case ZONE:
					case SEMI:
					case SORT:
					case OFFSET:
					case DEFAULT:
					case TABLESPACE:
					case EXTERNAL:
					case PURGE:
					case TEMPORARY:
					case PRIMARY:
					case KEY:
					case DISABLE:
					case NOVALIDATE:
					case FOREIGN:
					case REFERENCES:
					case PARTITIONED:
					case CLUSTERED:
					case SORTED:
					case BUCKETS:
					case SKEWED:
					case STORED:
					case DELIMITED:
					case FIELDS:
					case TERMINATED:
					case ESCAPED:
					case COLLECTION:
					case ITEMS:
					case KEYS:
					case LINES:
					case DEFINED:
					case SEQUENCEFILE:
					case TEXTFILE:
					case RCFILE:
					case ORC:
					case ORCFILE:
					case PARQUET:
					case AVRO:
					case JSONFILE:
					case INPUTFORMAT:
					case OUTPUTFORMAT:
					case SERDE:
					case SERDEPROPERTIES:
					case LOCATION:
					case TBLPROPERTIES:
					case RELY:
					case EXCHANGE:
					case RECOVER:
					case ARCHIVE:
					case UNARCHIVE:
					case IGNORE:
					case PROTECTION:
					case TOUCH:
					case ENABLE:
					case NO_DROP:
					case OFFLINE:
					case COMPACT:
					case WAIT:
					case CONCATENATE:
					case CHANGE:
					case AFTER:
					case DEFERRED:
					case REBUILD:
					case INDEX:
					case IDXPROPERTIES:
					case FUNCTION:
					case JAR:
					case FILE:
					case DATABASE:
					case DBPROPERTIES:
					case OWNER:
					case RELOAD:
					case USER:
					case ROLE:
					case FILEFORMAT:
					case LOAD:
					case LOCAL:
					case INPATH:
					case DIRECTORY:
					case VACUUM:
					case LIST:
					case SUBPARTITION:
					case SUBPARTITIONS:
					case EVERY:
					case INCLUSIVE:
					case EXCLUSIVE:
					case TEMPLATE:
					case ENCODING:
					case LOG:
					case ERRORS:
					case SEGMENT:
					case REJECT:
					case PERCENT:
					case WRITABLE:
					case CHECK:
					case UNIQUE:
					case CONCURRENTLY:
					case BITMAP:
					case FORCE:
					case SPLIT:
					case REINDEX:
					case FREEZE:
					case MSCK:
					case REPAIR:
					case FETCH:
					case DEFINITION:
					case LESS:
					case THAN:
					case HASH:
					case NOLOGGING:
					case STRUCT:
					case GLOBAL:
					case PRESERVE:
					case AUTO_INCREMENT:
					case ENGINE:
					case CHARSET:
					case COMPRESS:
					case EXPRESS:
					case REPLICATED:
					case NOCOPIES:
					case SPACE:
					case SHRINK:
					case KEY_BLOCK_SIZE:
					case KEY_DC_SIZE:
					case AUTOEXTEND:
					case NEXT:
					case OFF:
					case MATCHED:
					case MERGE:
					case OUTFILE:
					case OPTIONALLY:
					case ENCLOSED:
					case DOUBLE_ENCLOSED:
					case NULL_VALUE:
					case OUTFILEMODE:
					case HDFS:
					case WRITEMODE:
					case NORMAL:
					case OVERWRITES:
					case FILECOUNT:
					case FILESIZE:
					case CHARACTER:
					case GBK:
					case UTF8:
					case HEAD:
					case RMTSELECT:
					case INFILE:
					case DATA_FORMAT:
					case SEPARATOR:
					case BLANKS:
					case AUTOFILL:
					case LENGTH:
					case TABLE_FIELDS:
					case MAX_BAD_RECORDS:
					case DATETIME:
					case TRACE:
					case TRACE_PATH:
					case NOSPLIT:
					case PARALLEL:
					case MAX_DATA_PROCESSORS:
					case MIN_CHUNK_SIZE:
					case SKIP_BAD_FILE:
					case NUM:
					case FILE_FORMAT:
					case IMMEDIATE:
					case STARTING:
					case ENDING:
					case INITIALLY:
					case REFRESH:
					case ACTIVATE:
					case LOGGED:
					case EMPTY:
					case SEQUENCE:
					case INCREMENT:
					case MINVALUE:
					case MAXVALUE:
					case OVERLAY:
					case PLACING:
					case TRIM:
					case LTRIM:
					case RTRIM:
					case BOTH:
					case TO_CHAR:
					case AGE:
					case DATE_PART:
					case ISFINITE:
					case INT:
					case UNSIGNED:
					case REGEXP:
					case BINARY:
					case LEADING:
					case TRAILING:
					case RLIKE:
					case DATE_SUB:
					case ADDDATE:
					case DATE_ADD:
					case YEAR_MONTH:
					case DAY_HOUR:
					case DAY_MINUTE:
					case DAY_SECOND:
					case HOUR_MINUTE:
					case HOUR_SECOND:
					case MINUTE_SECOND:
					case UNKNOWN:
					case IDENTIFIER:
					case DIGIT_IDENTIFIER:
					case QUOTED_IDENTIFIER:
					case BACKQUOTED_IDENTIFIER:
						{
						setState(2449);
						identifier(0);
						}
						break;
					case INTEGER_VALUE:
					case DECIMAL_VALUE:
					case DOUBLE_VALUE:
						{
						setState(2450);
						number();
						}
						break;
					case NULL:
						{
						setState(2451);
						match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(2458);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2456);
					match(NOT);
					setState(2457);
					match(NULL);
					}
				}

				}
				break;
			case 22:
				_localctx = new AlterColumnContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(2460);
				if (!(isMysqlType())) throw new FailedPredicateException(this, "isMysqlType()");
				setState(2461);
				match(ALTER);
				setState(2462);
				match(TABLE);
				setState(2463);
				((AlterColumnContext)_localctx).tableName = qualifiedName();
				setState(2464);
				match(ALTER);
				setState(2465);
				((AlterColumnContext)_localctx).column = qualifiedName();
				setState(2476);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET:
					{
					{
					setState(2466);
					match(SET);
					setState(2467);
					match(DEFAULT);
					setState(2472);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
					case UNICODE_STRING:
						{
						setState(2468);
						string();
						}
						break;
					case ADD:
					case ALL:
					case ANALYZE:
					case AND:
					case ANY:
					case ARRAY:
					case AS:
					case ASC:
					case AT:
					case BERNOULLI:
					case BETWEEN:
					case BY:
					case CALL:
					case CASCADE:
					case CASE:
					case CAST:
					case CATALOGS:
					case COLUMN:
					case COLUMNS:
					case COMMENT:
					case COMMIT:
					case COMMITTED:
					case CONSTRAINT:
					case CROSS:
					case CUBE:
					case CURRENT:
					case CURRENT_DATE:
					case CURRENT_PATH:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case CURRENT_USER:
					case DATA:
					case DATE:
					case DAY:
					case DEALLOCATE:
					case DESC:
					case DESCRIBE:
					case DISTINCT:
					case DISTRIBUTED:
					case DROP:
					case ELSE:
					case ESCAPE:
					case EXCEPT:
					case EXCLUDING:
					case EXECUTE:
					case EXISTS:
					case EXPLAIN:
					case EXTRACT:
					case FILTER:
					case FIRST:
					case FOLLOWING:
					case FOR:
					case FORMAT:
					case FULL:
					case FUNCTIONS:
					case GRANT:
					case GRANTS:
					case GRAPHVIZ:
					case GROUP:
					case GROUPING:
					case HAVING:
					case HOUR:
					case IF:
					case IN:
					case INCLUDING:
					case INNER:
					case INPUT:
					case INSERT:
					case INTERSECT:
					case MINUSES:
					case INTERVAL:
					case INTO:
					case IO:
					case IS:
					case ISOLATION:
					case JSON:
					case JOIN:
					case LAST:
					case LATERAL:
					case LEFT:
					case LEVEL:
					case LIKE:
					case LIMIT:
					case LISTAGG:
					case LOCALTIME:
					case LOCALTIMESTAMP:
					case LOGICAL:
					case MAP:
					case MINUTE:
					case MONTH:
					case MODIFY:
					case NATURAL:
					case NFC:
					case NFD:
					case NFKC:
					case NFKD:
					case NO:
					case NORMALIZE:
					case NULLIF:
					case NULLS:
					case ON:
					case ONLY:
					case OPTION:
					case OR:
					case ORDER:
					case ORDINALITY:
					case OUTER:
					case OUTPUT:
					case OVER:
					case PARTITION:
					case PARTITIONS:
					case PATH:
					case POSITION:
					case PRECEDING:
					case PREPARE:
					case PRIVILEGES:
					case PROPERTIES:
					case PUBLIC:
					case RANGE:
					case READ:
					case RECURSIVE:
					case RENAME:
					case REPEATABLE:
					case REPLACE:
					case RESET:
					case RESTRICT:
					case REVOKE:
					case RIGHT:
					case ROLLBACK:
					case ROLLUP:
					case ROW:
					case ROWS:
					case SCHEMA:
					case SCHEMAS:
					case SECOND:
					case SERIALIZABLE:
					case SESSION:
					case SET:
					case SETS:
					case SHOW:
					case SOME:
					case START:
					case STATS:
					case SUBSTRING:
					case SYSTEM:
					case TABLES:
					case TABLESAMPLE:
					case TEXT:
					case THEN:
					case TIME:
					case TIMESTAMP:
					case TO:
					case TRANSACTION:
					case TRY_CAST:
					case TYPE:
					case TRUNCATE:
					case UPDATE:
					case UESCAPE:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNION:
					case UNNEST:
					case USE:
					case VALIDATE:
					case VERBOSE:
					case VIEW:
					case WHEN:
					case WITH:
					case WITHIN:
					case WORK:
					case WRITE:
					case YEAR:
					case ZONE:
					case SEMI:
					case SORT:
					case OFFSET:
					case DEFAULT:
					case TABLESPACE:
					case EXTERNAL:
					case PURGE:
					case TEMPORARY:
					case PRIMARY:
					case KEY:
					case DISABLE:
					case NOVALIDATE:
					case FOREIGN:
					case REFERENCES:
					case PARTITIONED:
					case CLUSTERED:
					case SORTED:
					case BUCKETS:
					case SKEWED:
					case STORED:
					case DELIMITED:
					case FIELDS:
					case TERMINATED:
					case ESCAPED:
					case COLLECTION:
					case ITEMS:
					case KEYS:
					case LINES:
					case DEFINED:
					case SEQUENCEFILE:
					case TEXTFILE:
					case RCFILE:
					case ORC:
					case ORCFILE:
					case PARQUET:
					case AVRO:
					case JSONFILE:
					case INPUTFORMAT:
					case OUTPUTFORMAT:
					case SERDE:
					case SERDEPROPERTIES:
					case LOCATION:
					case TBLPROPERTIES:
					case RELY:
					case EXCHANGE:
					case RECOVER:
					case ARCHIVE:
					case UNARCHIVE:
					case IGNORE:
					case PROTECTION:
					case TOUCH:
					case ENABLE:
					case NO_DROP:
					case OFFLINE:
					case COMPACT:
					case WAIT:
					case CONCATENATE:
					case CHANGE:
					case AFTER:
					case DEFERRED:
					case REBUILD:
					case INDEX:
					case IDXPROPERTIES:
					case FUNCTION:
					case JAR:
					case FILE:
					case DATABASE:
					case DBPROPERTIES:
					case OWNER:
					case RELOAD:
					case USER:
					case ROLE:
					case FILEFORMAT:
					case LOAD:
					case LOCAL:
					case INPATH:
					case DIRECTORY:
					case VACUUM:
					case LIST:
					case SUBPARTITION:
					case SUBPARTITIONS:
					case EVERY:
					case INCLUSIVE:
					case EXCLUSIVE:
					case TEMPLATE:
					case ENCODING:
					case LOG:
					case ERRORS:
					case SEGMENT:
					case REJECT:
					case PERCENT:
					case WRITABLE:
					case CHECK:
					case UNIQUE:
					case CONCURRENTLY:
					case BITMAP:
					case FORCE:
					case SPLIT:
					case REINDEX:
					case FREEZE:
					case MSCK:
					case REPAIR:
					case FETCH:
					case DEFINITION:
					case LESS:
					case THAN:
					case HASH:
					case NOLOGGING:
					case STRUCT:
					case GLOBAL:
					case PRESERVE:
					case AUTO_INCREMENT:
					case ENGINE:
					case CHARSET:
					case COMPRESS:
					case EXPRESS:
					case REPLICATED:
					case NOCOPIES:
					case SPACE:
					case SHRINK:
					case KEY_BLOCK_SIZE:
					case KEY_DC_SIZE:
					case AUTOEXTEND:
					case NEXT:
					case OFF:
					case MATCHED:
					case MERGE:
					case OUTFILE:
					case OPTIONALLY:
					case ENCLOSED:
					case DOUBLE_ENCLOSED:
					case NULL_VALUE:
					case OUTFILEMODE:
					case HDFS:
					case WRITEMODE:
					case NORMAL:
					case OVERWRITES:
					case FILECOUNT:
					case FILESIZE:
					case CHARACTER:
					case GBK:
					case UTF8:
					case HEAD:
					case RMTSELECT:
					case INFILE:
					case DATA_FORMAT:
					case SEPARATOR:
					case BLANKS:
					case AUTOFILL:
					case LENGTH:
					case TABLE_FIELDS:
					case MAX_BAD_RECORDS:
					case DATETIME:
					case TRACE:
					case TRACE_PATH:
					case NOSPLIT:
					case PARALLEL:
					case MAX_DATA_PROCESSORS:
					case MIN_CHUNK_SIZE:
					case SKIP_BAD_FILE:
					case NUM:
					case FILE_FORMAT:
					case IMMEDIATE:
					case STARTING:
					case ENDING:
					case INITIALLY:
					case REFRESH:
					case ACTIVATE:
					case LOGGED:
					case EMPTY:
					case SEQUENCE:
					case INCREMENT:
					case MINVALUE:
					case MAXVALUE:
					case OVERLAY:
					case PLACING:
					case TRIM:
					case LTRIM:
					case RTRIM:
					case BOTH:
					case TO_CHAR:
					case AGE:
					case DATE_PART:
					case ISFINITE:
					case INT:
					case UNSIGNED:
					case REGEXP:
					case BINARY:
					case LEADING:
					case TRAILING:
					case RLIKE:
					case DATE_SUB:
					case ADDDATE:
					case DATE_ADD:
					case YEAR_MONTH:
					case DAY_HOUR:
					case DAY_MINUTE:
					case DAY_SECOND:
					case HOUR_MINUTE:
					case HOUR_SECOND:
					case MINUTE_SECOND:
					case UNKNOWN:
					case IDENTIFIER:
					case DIGIT_IDENTIFIER:
					case QUOTED_IDENTIFIER:
					case BACKQUOTED_IDENTIFIER:
						{
						setState(2469);
						identifier(0);
						}
						break;
					case INTEGER_VALUE:
					case DECIMAL_VALUE:
					case DOUBLE_VALUE:
						{
						setState(2470);
						number();
						}
						break;
					case NULL:
						{
						setState(2471);
						match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				case DROP:
					{
					{
					setState(2474);
					match(DROP);
					setState(2475);
					match(DEFAULT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 23:
				_localctx = new RenameColumnContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(2478);
				match(ALTER);
				setState(2479);
				match(TABLE);
				setState(2480);
				((RenameColumnContext)_localctx).tableName = qualifiedName();
				setState(2481);
				match(RENAME);
				setState(2482);
				match(COLUMN);
				setState(2483);
				((RenameColumnContext)_localctx).from = identifier(0);
				setState(2484);
				match(TO);
				setState(2485);
				((RenameColumnContext)_localctx).to = identifier(0);
				setState(2487);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALL) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << AT) | (1L << BERNOULLI) | (1L << BETWEEN) | (1L << BY) | (1L << CALL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONSTRAINT) | (1L << CROSS) | (1L << CUBE) | (1L << CURRENT) | (1L << CURRENT_DATE) | (1L << CURRENT_PATH) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DATA) | (1L << DATE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DESC) | (1L << DESCRIBE) | (1L << DISTINCT) | (1L << DISTRIBUTED) | (1L << DROP) | (1L << ELSE) | (1L << ESCAPE) | (1L << EXCEPT) | (1L << EXCLUDING) | (1L << EXECUTE) | (1L << EXISTS) | (1L << EXPLAIN))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXTRACT - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FOR - 64)) | (1L << (FORMAT - 64)) | (1L << (FULL - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUP - 64)) | (1L << (GROUPING - 64)) | (1L << (HAVING - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IN - 64)) | (1L << (INCLUDING - 64)) | (1L << (INNER - 64)) | (1L << (INPUT - 64)) | (1L << (INSERT - 64)) | (1L << (INTERSECT - 64)) | (1L << (MINUSES - 64)) | (1L << (INTERVAL - 64)) | (1L << (INTO - 64)) | (1L << (IO - 64)) | (1L << (IS - 64)) | (1L << (ISOLATION - 64)) | (1L << (JSON - 64)) | (1L << (JOIN - 64)) | (1L << (LAST - 64)) | (1L << (LATERAL - 64)) | (1L << (LEFT - 64)) | (1L << (LEVEL - 64)) | (1L << (LIKE - 64)) | (1L << (LIMIT - 64)) | (1L << (LISTAGG - 64)) | (1L << (LOCALTIME - 64)) | (1L << (LOCALTIMESTAMP - 64)) | (1L << (LOGICAL - 64)) | (1L << (MAP - 64)) | (1L << (MINUTE - 64)) | (1L << (MONTH - 64)) | (1L << (MODIFY - 64)) | (1L << (NATURAL - 64)) | (1L << (NFC - 64)) | (1L << (NFD - 64)) | (1L << (NFKC - 64)) | (1L << (NFKD - 64)) | (1L << (NO - 64)) | (1L << (NORMALIZE - 64)) | (1L << (NULLIF - 64)) | (1L << (NULLS - 64)) | (1L << (ON - 64)) | (1L << (ONLY - 64)) | (1L << (OPTION - 64)) | (1L << (OR - 64)) | (1L << (ORDER - 64)) | (1L << (ORDINALITY - 64)) | (1L << (OUTER - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (OVER - 128)) | (1L << (PARTITION - 128)) | (1L << (PARTITIONS - 128)) | (1L << (PATH - 128)) | (1L << (POSITION - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROPERTIES - 128)) | (1L << (PUBLIC - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (RECURSIVE - 128)) | (1L << (RENAME - 128)) | (1L << (REPEATABLE - 128)) | (1L << (REPLACE - 128)) | (1L << (RESET - 128)) | (1L << (RESTRICT - 128)) | (1L << (REVOKE - 128)) | (1L << (RIGHT - 128)) | (1L << (ROLLBACK - 128)) | (1L << (ROLLUP - 128)) | (1L << (ROW - 128)) | (1L << (ROWS - 128)) | (1L << (SCHEMA - 128)) | (1L << (SCHEMAS - 128)) | (1L << (SECOND - 128)) | (1L << (SERIALIZABLE - 128)) | (1L << (SESSION - 128)) | (1L << (SET - 128)) | (1L << (SETS - 128)) | (1L << (SHOW - 128)) | (1L << (SOME - 128)) | (1L << (START - 128)) | (1L << (STATS - 128)) | (1L << (SUBSTRING - 128)) | (1L << (SYSTEM - 128)) | (1L << (TABLES - 128)) | (1L << (TABLESAMPLE - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TIMESTAMP - 128)) | (1L << (TO - 128)) | (1L << (TRANSACTION - 128)) | (1L << (TRY_CAST - 128)) | (1L << (TYPE - 128)) | (1L << (TRUNCATE - 128)) | (1L << (UPDATE - 128)) | (1L << (UESCAPE - 128)) | (1L << (UNBOUNDED - 128)) | (1L << (UNCOMMITTED - 128)) | (1L << (UNION - 128)) | (1L << (UNNEST - 128)) | (1L << (USE - 128)) | (1L << (VALIDATE - 128)) | (1L << (VERBOSE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (VIEW - 192)) | (1L << (WHEN - 192)) | (1L << (WITH - 192)) | (1L << (WITHIN - 192)) | (1L << (WORK - 192)) | (1L << (WRITE - 192)) | (1L << (YEAR - 192)) | (1L << (ZONE - 192)) | (1L << (SEMI - 192)) | (1L << (SORT - 192)) | (1L << (OFFSET - 192)) | (1L << (DEFAULT - 192)) | (1L << (TABLESPACE - 192)) | (1L << (EXTERNAL - 192)) | (1L << (PURGE - 192)) | (1L << (TEMPORARY - 192)) | (1L << (PRIMARY - 192)) | (1L << (KEY - 192)) | (1L << (DISABLE - 192)) | (1L << (NOVALIDATE - 192)) | (1L << (FOREIGN - 192)) | (1L << (REFERENCES - 192)) | (1L << (PARTITIONED - 192)) | (1L << (CLUSTERED - 192)) | (1L << (SORTED - 192)) | (1L << (BUCKETS - 192)) | (1L << (SKEWED - 192)) | (1L << (STORED - 192)) | (1L << (DELIMITED - 192)) | (1L << (FIELDS - 192)) | (1L << (TERMINATED - 192)) | (1L << (ESCAPED - 192)) | (1L << (COLLECTION - 192)) | (1L << (ITEMS - 192)) | (1L << (KEYS - 192)) | (1L << (LINES - 192)) | (1L << (DEFINED - 192)) | (1L << (SEQUENCEFILE - 192)) | (1L << (TEXTFILE - 192)) | (1L << (RCFILE - 192)) | (1L << (ORC - 192)) | (1L << (ORCFILE - 192)) | (1L << (PARQUET - 192)) | (1L << (AVRO - 192)) | (1L << (JSONFILE - 192)) | (1L << (INPUTFORMAT - 192)) | (1L << (OUTPUTFORMAT - 192)) | (1L << (SERDE - 192)) | (1L << (SERDEPROPERTIES - 192)) | (1L << (LOCATION - 192)) | (1L << (TBLPROPERTIES - 192)) | (1L << (RELY - 192)) | (1L << (EXCHANGE - 192)) | (1L << (RECOVER - 192)) | (1L << (ARCHIVE - 192)) | (1L << (UNARCHIVE - 192)) | (1L << (IGNORE - 192)) | (1L << (PROTECTION - 192)) | (1L << (TOUCH - 192)) | (1L << (ENABLE - 192)) | (1L << (NO_DROP - 192)) | (1L << (OFFLINE - 192)) | (1L << (COMPACT - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (WAIT - 256)) | (1L << (CONCATENATE - 256)) | (1L << (CHANGE - 256)) | (1L << (AFTER - 256)) | (1L << (DEFERRED - 256)) | (1L << (REBUILD - 256)) | (1L << (INDEX - 256)) | (1L << (IDXPROPERTIES - 256)) | (1L << (FUNCTION - 256)) | (1L << (JAR - 256)) | (1L << (FILE - 256)) | (1L << (DATABASE - 256)) | (1L << (DBPROPERTIES - 256)) | (1L << (OWNER - 256)) | (1L << (RELOAD - 256)) | (1L << (USER - 256)) | (1L << (ROLE - 256)) | (1L << (FILEFORMAT - 256)) | (1L << (LOAD - 256)) | (1L << (LOCAL - 256)) | (1L << (INPATH - 256)) | (1L << (DIRECTORY - 256)) | (1L << (VACUUM - 256)) | (1L << (LIST - 256)) | (1L << (SUBPARTITION - 256)) | (1L << (SUBPARTITIONS - 256)) | (1L << (EVERY - 256)) | (1L << (INCLUSIVE - 256)) | (1L << (EXCLUSIVE - 256)) | (1L << (TEMPLATE - 256)) | (1L << (ENCODING - 256)) | (1L << (LOG - 256)) | (1L << (ERRORS - 256)) | (1L << (SEGMENT - 256)) | (1L << (REJECT - 256)) | (1L << (PERCENT - 256)) | (1L << (WRITABLE - 256)) | (1L << (CHECK - 256)) | (1L << (UNIQUE - 256)) | (1L << (CONCURRENTLY - 256)) | (1L << (BITMAP - 256)) | (1L << (FORCE - 256)) | (1L << (SPLIT - 256)) | (1L << (REINDEX - 256)) | (1L << (FREEZE - 256)) | (1L << (MSCK - 256)) | (1L << (REPAIR - 256)) | (1L << (FETCH - 256)) | (1L << (DEFINITION - 256)) | (1L << (LESS - 256)) | (1L << (THAN - 256)) | (1L << (HASH - 256)) | (1L << (NOLOGGING - 256)) | (1L << (STRUCT - 256)) | (1L << (GLOBAL - 256)) | (1L << (PRESERVE - 256)) | (1L << (AUTO_INCREMENT - 256)) | (1L << (ENGINE - 256)) | (1L << (CHARSET - 256)) | (1L << (COMPRESS - 256)) | (1L << (EXPRESS - 256)) | (1L << (REPLICATED - 256)) | (1L << (NOCOPIES - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (SPACE - 320)) | (1L << (SHRINK - 320)) | (1L << (KEY_BLOCK_SIZE - 320)) | (1L << (KEY_DC_SIZE - 320)) | (1L << (AUTOEXTEND - 320)) | (1L << (NEXT - 320)) | (1L << (OFF - 320)) | (1L << (MATCHED - 320)) | (1L << (MERGE - 320)) | (1L << (OUTFILE - 320)) | (1L << (OPTIONALLY - 320)) | (1L << (ENCLOSED - 320)) | (1L << (DOUBLE_ENCLOSED - 320)) | (1L << (NULL_VALUE - 320)) | (1L << (OUTFILEMODE - 320)) | (1L << (HDFS - 320)) | (1L << (WRITEMODE - 320)) | (1L << (NORMAL - 320)) | (1L << (OVERWRITES - 320)) | (1L << (FILECOUNT - 320)) | (1L << (FILESIZE - 320)) | (1L << (CHARACTER - 320)) | (1L << (GBK - 320)) | (1L << (UTF8 - 320)) | (1L << (HEAD - 320)) | (1L << (RMTSELECT - 320)) | (1L << (INFILE - 320)) | (1L << (DATA_FORMAT - 320)) | (1L << (SEPARATOR - 320)) | (1L << (BLANKS - 320)) | (1L << (AUTOFILL - 320)) | (1L << (LENGTH - 320)) | (1L << (TABLE_FIELDS - 320)) | (1L << (MAX_BAD_RECORDS - 320)) | (1L << (DATETIME - 320)) | (1L << (TRACE - 320)) | (1L << (TRACE_PATH - 320)) | (1L << (NOSPLIT - 320)) | (1L << (PARALLEL - 320)) | (1L << (MAX_DATA_PROCESSORS - 320)) | (1L << (MIN_CHUNK_SIZE - 320)) | (1L << (SKIP_BAD_FILE - 320)) | (1L << (NUM - 320)) | (1L << (FILE_FORMAT - 320)) | (1L << (IMMEDIATE - 320)) | (1L << (STARTING - 320)) | (1L << (ENDING - 320)) | (1L << (INITIALLY - 320)) | (1L << (REFRESH - 320)) | (1L << (ACTIVATE - 320)) | (1L << (LOGGED - 320)) | (1L << (EMPTY - 320)) | (1L << (SEQUENCE - 320)) | (1L << (INCREMENT - 320)) | (1L << (MINVALUE - 320)) | (1L << (MAXVALUE - 320)) | (1L << (OVERLAY - 320)) | (1L << (PLACING - 320)) | (1L << (TRIM - 320)) | (1L << (LTRIM - 320)) | (1L << (RTRIM - 320)) | (1L << (BOTH - 320)) | (1L << (TO_CHAR - 320)) | (1L << (AGE - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (DATE_PART - 384)) | (1L << (ISFINITE - 384)) | (1L << (INT - 384)) | (1L << (UNSIGNED - 384)) | (1L << (REGEXP - 384)) | (1L << (BINARY - 384)) | (1L << (LEADING - 384)) | (1L << (TRAILING - 384)) | (1L << (RLIKE - 384)) | (1L << (DATE_SUB - 384)) | (1L << (ADDDATE - 384)) | (1L << (DATE_ADD - 384)) | (1L << (YEAR_MONTH - 384)) | (1L << (DAY_HOUR - 384)) | (1L << (DAY_MINUTE - 384)) | (1L << (DAY_SECOND - 384)) | (1L << (HOUR_MINUTE - 384)) | (1L << (HOUR_SECOND - 384)) | (1L << (MINUTE_SECOND - 384)) | (1L << (UNKNOWN - 384)) | (1L << (IDENTIFIER - 384)) | (1L << (DIGIT_IDENTIFIER - 384)) | (1L << (QUOTED_IDENTIFIER - 384)) | (1L << (BACKQUOTED_IDENTIFIER - 384)) | (1L << (TIME_WITH_TIME_ZONE - 384)) | (1L << (TIMESTAMP_WITH_TIME_ZONE - 384)) | (1L << (INT_UNSIGNED - 384)) | (1L << (DOUBLE_PRECISION - 384)))) != 0)) {
					{
					setState(2486);
					type(0);
					}
				}

				}
				break;
			case 24:
				_localctx = new DropColumnContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(2489);
				match(ALTER);
				setState(2490);
				match(TABLE);
				setState(2491);
				((DropColumnContext)_localctx).tableName = qualifiedName();
				setState(2492);
				match(DROP);
				setState(2494);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
				case 1:
					{
					setState(2493);
					match(COLUMN);
					}
					break;
				}
				setState(2496);
				((DropColumnContext)_localctx).column = qualifiedName();
				setState(2505);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__2) {
					{
					{
					setState(2497);
					match(T__2);
					setState(2498);
					match(DROP);
					setState(2500);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
					case 1:
						{
						setState(2499);
						match(COLUMN);
						}
						break;
					}
					setState(2502);
					((DropColumnContext)_localctx).column = qualifiedName();
					}
					}
					setState(2507);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 25:
				_localctx = new AddColumnContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(2508);
				match(ALTER);
				setState(2509);
				match(TABLE);
				setState(2510);
				((AddColumnContext)_localctx).tableName = qualifiedName();
				setState(2511);
				match(ADD);
				setState(2513);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
				case 1:
					{
					setState(2512);
					match(COLUMN);
					}
					break;
				}
				setState(2527);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
				case ALL:
				case ANALYZE:
				case AND:
				case ANY:
				case ARRAY:
				case AS:
				case ASC:
				case AT:
				case BERNOULLI:
				case BETWEEN:
				case BY:
				case CALL:
				case CASCADE:
				case CASE:
				case CAST:
				case CATALOGS:
				case COLUMN:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONSTRAINT:
				case CROSS:
				case CUBE:
				case CURRENT:
				case CURRENT_DATE:
				case CURRENT_PATH:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA:
				case DATE:
				case DAY:
				case DEALLOCATE:
				case DESC:
				case DESCRIBE:
				case DISTINCT:
				case DISTRIBUTED:
				case DROP:
				case ELSE:
				case ESCAPE:
				case EXCEPT:
				case EXCLUDING:
				case EXECUTE:
				case EXISTS:
				case EXPLAIN:
				case EXTRACT:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FOR:
				case FORMAT:
				case FULL:
				case FUNCTIONS:
				case GRANT:
				case GRANTS:
				case GRAPHVIZ:
				case GROUP:
				case GROUPING:
				case HAVING:
				case HOUR:
				case IF:
				case IN:
				case INCLUDING:
				case INNER:
				case INPUT:
				case INSERT:
				case INTERSECT:
				case MINUSES:
				case INTERVAL:
				case INTO:
				case IO:
				case IS:
				case ISOLATION:
				case JSON:
				case JOIN:
				case LAST:
				case LATERAL:
				case LEFT:
				case LEVEL:
				case LIKE:
				case LIMIT:
				case LISTAGG:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case LOGICAL:
				case MAP:
				case MINUTE:
				case MONTH:
				case MODIFY:
				case NATURAL:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case NO:
				case NORMALIZE:
				case NULLIF:
				case NULLS:
				case ON:
				case ONLY:
				case OPTION:
				case OR:
				case ORDER:
				case ORDINALITY:
				case OUTER:
				case OUTPUT:
				case OVER:
				case PARTITION:
				case PARTITIONS:
				case PATH:
				case POSITION:
				case PRECEDING:
				case PREPARE:
				case PRIVILEGES:
				case PROPERTIES:
				case PUBLIC:
				case RANGE:
				case READ:
				case RECURSIVE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTRICT:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWS:
				case SCHEMA:
				case SCHEMAS:
				case SECOND:
				case SERIALIZABLE:
				case SESSION:
				case SET:
				case SETS:
				case SHOW:
				case SOME:
				case START:
				case STATS:
				case SUBSTRING:
				case SYSTEM:
				case TABLES:
				case TABLESAMPLE:
				case TEXT:
				case THEN:
				case TIME:
				case TIMESTAMP:
				case TO:
				case TRANSACTION:
				case TRY_CAST:
				case TYPE:
				case TRUNCATE:
				case UPDATE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNION:
				case UNNEST:
				case USE:
				case VALIDATE:
				case VERBOSE:
				case VIEW:
				case WHEN:
				case WITH:
				case WITHIN:
				case WORK:
				case WRITE:
				case YEAR:
				case ZONE:
				case SEMI:
				case SORT:
				case OFFSET:
				case DEFAULT:
				case TABLESPACE:
				case EXTERNAL:
				case PURGE:
				case TEMPORARY:
				case PRIMARY:
				case KEY:
				case DISABLE:
				case NOVALIDATE:
				case FOREIGN:
				case REFERENCES:
				case PARTITIONED:
				case CLUSTERED:
				case SORTED:
				case BUCKETS:
				case SKEWED:
				case STORED:
				case DELIMITED:
				case FIELDS:
				case TERMINATED:
				case ESCAPED:
				case COLLECTION:
				case ITEMS:
				case KEYS:
				case LINES:
				case DEFINED:
				case SEQUENCEFILE:
				case TEXTFILE:
				case RCFILE:
				case ORC:
				case ORCFILE:
				case PARQUET:
				case AVRO:
				case JSONFILE:
				case INPUTFORMAT:
				case OUTPUTFORMAT:
				case SERDE:
				case SERDEPROPERTIES:
				case LOCATION:
				case TBLPROPERTIES:
				case RELY:
				case EXCHANGE:
				case RECOVER:
				case ARCHIVE:
				case UNARCHIVE:
				case IGNORE:
				case PROTECTION:
				case TOUCH:
				case ENABLE:
				case NO_DROP:
				case OFFLINE:
				case COMPACT:
				case WAIT:
				case CONCATENATE:
				case CHANGE:
				case AFTER:
				case DEFERRED:
				case REBUILD:
				case INDEX:
				case IDXPROPERTIES:
				case FUNCTION:
				case JAR:
				case FILE:
				case DATABASE:
				case DBPROPERTIES:
				case OWNER:
				case RELOAD:
				case USER:
				case ROLE:
				case FILEFORMAT:
				case LOAD:
				case LOCAL:
				case INPATH:
				case DIRECTORY:
				case VACUUM:
				case LIST:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case EVERY:
				case INCLUSIVE:
				case EXCLUSIVE:
				case TEMPLATE:
				case ENCODING:
				case LOG:
				case ERRORS:
				case SEGMENT:
				case REJECT:
				case PERCENT:
				case WRITABLE:
				case CHECK:
				case UNIQUE:
				case CONCURRENTLY:
				case BITMAP:
				case FORCE:
				case SPLIT:
				case REINDEX:
				case FREEZE:
				case MSCK:
				case REPAIR:
				case FETCH:
				case DEFINITION:
				case LESS:
				case THAN:
				case HASH:
				case NOLOGGING:
				case STRUCT:
				case GLOBAL:
				case PRESERVE:
				case AUTO_INCREMENT:
				case ENGINE:
				case CHARSET:
				case COMPRESS:
				case EXPRESS:
				case REPLICATED:
				case NOCOPIES:
				case SPACE:
				case SHRINK:
				case KEY_BLOCK_SIZE:
				case KEY_DC_SIZE:
				case AUTOEXTEND:
				case NEXT:
				case OFF:
				case MATCHED:
				case MERGE:
				case OUTFILE:
				case OPTIONALLY:
				case ENCLOSED:
				case DOUBLE_ENCLOSED:
				case NULL_VALUE:
				case OUTFILEMODE:
				case HDFS:
				case WRITEMODE:
				case NORMAL:
				case OVERWRITES:
				case FILECOUNT:
				case FILESIZE:
				case CHARACTER:
				case GBK:
				case UTF8:
				case HEAD:
				case RMTSELECT:
				case INFILE:
				case DATA_FORMAT:
				case SEPARATOR:
				case BLANKS:
				case AUTOFILL:
				case LENGTH:
				case TABLE_FIELDS:
				case MAX_BAD_RECORDS:
				case DATETIME:
				case TRACE:
				case TRACE_PATH:
				case NOSPLIT:
				case PARALLEL:
				case MAX_DATA_PROCESSORS:
				case MIN_CHUNK_SIZE:
				case SKIP_BAD_FILE:
				case NUM:
				case FILE_FORMAT:
				case IMMEDIATE:
				case STARTING:
				case ENDING:
				case INITIALLY:
				case REFRESH:
				case ACTIVATE:
				case LOGGED:
				case EMPTY:
				case SEQUENCE:
				case INCREMENT:
				case MINVALUE:
				case MAXVALUE:
				case OVERLAY:
				case PLACING:
				case TRIM:
				case LTRIM:
				case RTRIM:
				case BOTH:
				case TO_CHAR:
				case AGE:
				case DATE_PART:
				case ISFINITE:
				case INT:
				case UNSIGNED:
				case REGEXP:
				case BINARY:
				case LEADING:
				case TRAILING:
				case RLIKE:
				case DATE_SUB:
				case ADDDATE:
				case DATE_ADD:
				case YEAR_MONTH:
				case DAY_HOUR:
				case DAY_MINUTE:
				case DAY_SECOND:
				case HOUR_MINUTE:
				case HOUR_SECOND:
				case MINUTE_SECOND:
				case UNKNOWN:
				case IDENTIFIER:
				case DIGIT_IDENTIFIER:
				case QUOTED_IDENTIFIER:
				case BACKQUOTED_IDENTIFIER:
					{
					setState(2515);
					columnDefinition();
					}
					break;
				case T__1:
					{
					{
					setState(2516);
					match(T__1);
					setState(2517);
					tableElement();
					setState(2522);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(2518);
						match(T__2);
						setState(2519);
						tableElement();
						}
						}
						setState(2524);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2525);
					match(T__3);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2532);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2529);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					{
					setState(2530);
					match(AFTER);
					setState(2531);
					((AddColumnContext)_localctx).columnName = identifier(0);
					}
					}
					break;
				case EOF:
				case T__0:
					break;
				default:
					break;
				}
				}
				break;
			case 26:
				_localctx = new CreateViewContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(2534);
				match(CREATE);
				setState(2537);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(2535);
					match(OR);
					setState(2536);
					match(REPLACE);
					}
				}

				setState(2539);
				match(VIEW);
				setState(2540);
				qualifiedName();
				setState(2541);
				match(AS);
				setState(2542);
				query();
				}
				break;
			case 27:
				_localctx = new DropViewContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(2544);
				match(DROP);
				setState(2545);
				match(VIEW);
				setState(2548);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
				case 1:
					{
					setState(2546);
					match(IF);
					setState(2547);
					match(EXISTS);
					}
					break;
				}
				setState(2550);
				qualifiedName();
				}
				break;
			case 28:
				_localctx = new CallContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(2551);
				match(CALL);
				setState(2552);
				qualifiedName();
				setState(2553);
				match(T__1);
				setState(2562);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
				case 1:
					{
					setState(2554);
					callArgument();
					setState(2559);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(2555);
						match(T__2);
						setState(2556);
						callArgument();
						}
						}
						setState(2561);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(2564);
				match(T__3);
				}
				break;
			case 29:
				_localctx = new GrantContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(2566);
				match(GRANT);
				setState(2577);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
				case 1:
					{
					setState(2567);
					privilege();
					setState(2572);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(2568);
						match(T__2);
						setState(2569);
						privilege();
						}
						}
						setState(2574);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case 2:
					{
					setState(2575);
					match(ALL);
					setState(2576);
					match(PRIVILEGES);
					}
					break;
				}
				setState(2579);
				match(ON);
				setState(2581);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(2580);
					match(TABLE);
					}
				}

				setState(2583);
				qualifiedName();
				setState(2584);
				match(TO);
				setState(2585);
				((GrantContext)_localctx).grantee = identifier(0);
				setState(2589);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2586);
					match(WITH);
					setState(2587);
					match(GRANT);
					setState(2588);
					match(OPTION);
					}
				}

				}
				break;
			case 30:
				_localctx = new RevokeContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(2591);
				match(REVOKE);
				setState(2595);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
				case 1:
					{
					setState(2592);
					match(GRANT);
					setState(2593);
					match(OPTION);
					setState(2594);
					match(FOR);
					}
					break;
				}
				setState(2607);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
				case 1:
					{
					setState(2597);
					privilege();
					setState(2602);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(2598);
						match(T__2);
						setState(2599);
						privilege();
						}
						}
						setState(2604);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case 2:
					{
					setState(2605);
					match(ALL);
					setState(2606);
					match(PRIVILEGES);
					}
					break;
				}
				setState(2609);
				match(ON);
				setState(2611);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(2610);
					match(TABLE);
					}
				}

				setState(2613);
				qualifiedName();
				setState(2614);
				match(FROM);
				setState(2615);
				((RevokeContext)_localctx).grantee = identifier(0);
				}
				break;
			case 31:
				_localctx = new ShowGrantsContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(2617);
				match(SHOW);
				setState(2618);
				match(GRANTS);
				setState(2624);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(2619);
					match(ON);
					setState(2621);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TABLE) {
						{
						setState(2620);
						match(TABLE);
						}
					}

					setState(2623);
					qualifiedName();
					}
				}

				}
				break;
			case 32:
				_localctx = new ExplainContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(2626);
				match(EXPLAIN);
				setState(2628);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
				case 1:
					{
					setState(2627);
					match(ANALYZE);
					}
					break;
				}
				setState(2631);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
				case 1:
					{
					setState(2630);
					match(VERBOSE);
					}
					break;
				}
				setState(2644);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
				case 1:
					{
					setState(2633);
					match(T__1);
					setState(2634);
					explainOption();
					setState(2639);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(2635);
						match(T__2);
						setState(2636);
						explainOption();
						}
						}
						setState(2641);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2642);
					match(T__3);
					}
					break;
				}
				setState(2646);
				statement();
				}
				break;
			case 33:
				_localctx = new ShowCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(2647);
				match(SHOW);
				setState(2648);
				match(CREATE);
				setState(2649);
				match(TABLE);
				setState(2650);
				qualifiedName();
				}
				break;
			case 34:
				_localctx = new ShowCreateViewContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(2651);
				match(SHOW);
				setState(2652);
				match(CREATE);
				setState(2653);
				match(VIEW);
				setState(2654);
				qualifiedName();
				}
				break;
			case 35:
				_localctx = new ShowTablesContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(2655);
				match(SHOW);
				setState(2656);
				match(TABLES);
				setState(2659);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(2657);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2658);
					qualifiedName();
					}
				}

				setState(2667);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE) {
					{
					setState(2661);
					match(LIKE);
					setState(2662);
					((ShowTablesContext)_localctx).pattern = string();
					setState(2665);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ESCAPE) {
						{
						setState(2663);
						match(ESCAPE);
						setState(2664);
						((ShowTablesContext)_localctx).escape = string();
						}
					}

					}
				}

				}
				break;
			case 36:
				_localctx = new ShowSchemasContext(_localctx);
				enterOuterAlt(_localctx, 36);
				{
				setState(2669);
				match(SHOW);
				setState(2670);
				match(SCHEMAS);
				setState(2673);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(2671);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2672);
					identifier(0);
					}
				}

				setState(2681);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE) {
					{
					setState(2675);
					match(LIKE);
					setState(2676);
					((ShowSchemasContext)_localctx).pattern = string();
					setState(2679);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ESCAPE) {
						{
						setState(2677);
						match(ESCAPE);
						setState(2678);
						((ShowSchemasContext)_localctx).escape = string();
						}
					}

					}
				}

				}
				break;
			case 37:
				_localctx = new ShowIndexContext(_localctx);
				enterOuterAlt(_localctx, 37);
				{
				setState(2683);
				match(SHOW);
				setState(2684);
				match(INDEX);
				setState(2687);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(2685);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2686);
					identifier(0);
					}
				}

				setState(2695);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE) {
					{
					setState(2689);
					match(LIKE);
					setState(2690);
					((ShowIndexContext)_localctx).pattern = string();
					setState(2693);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ESCAPE) {
						{
						setState(2691);
						match(ESCAPE);
						setState(2692);
						((ShowIndexContext)_localctx).escape = string();
						}
					}

					}
				}

				}
				break;
			case 38:
				_localctx = new ShowCatalogsContext(_localctx);
				enterOuterAlt(_localctx, 38);
				{
				setState(2697);
				match(SHOW);
				setState(2698);
				match(CATALOGS);
				setState(2701);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE) {
					{
					setState(2699);
					match(LIKE);
					setState(2700);
					((ShowCatalogsContext)_localctx).pattern = string();
					}
				}

				}
				break;
			case 39:
				_localctx = new ShowColumnsContext(_localctx);
				enterOuterAlt(_localctx, 39);
				{
				setState(2703);
				match(SHOW);
				setState(2704);
				match(COLUMNS);
				setState(2705);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2706);
				qualifiedName();
				}
				break;
			case 40:
				_localctx = new ShowStatsContext(_localctx);
				enterOuterAlt(_localctx, 40);
				{
				setState(2707);
				match(SHOW);
				setState(2708);
				match(STATS);
				setState(2709);
				_la = _input.LA(1);
				if ( !(_la==FOR || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2710);
				qualifiedName();
				}
				break;
			case 41:
				_localctx = new ShowStatsForQueryContext(_localctx);
				enterOuterAlt(_localctx, 41);
				{
				setState(2711);
				match(SHOW);
				setState(2712);
				match(STATS);
				setState(2713);
				match(FOR);
				setState(2714);
				match(T__1);
				setState(2715);
				querySpecification();
				setState(2716);
				match(T__3);
				}
				break;
			case 42:
				_localctx = new ShowColumnsContext(_localctx);
				enterOuterAlt(_localctx, 42);
				{
				setState(2718);
				match(DESCRIBE);
				setState(2719);
				qualifiedName();
				}
				break;
			case 43:
				_localctx = new ShowColumnsContext(_localctx);
				enterOuterAlt(_localctx, 43);
				{
				setState(2720);
				match(DESC);
				setState(2721);
				qualifiedName();
				}
				break;
			case 44:
				_localctx = new ShowFunctionsContext(_localctx);
				enterOuterAlt(_localctx, 44);
				{
				setState(2722);
				match(SHOW);
				setState(2723);
				match(FUNCTIONS);
				}
				break;
			case 45:
				_localctx = new ShowSessionContext(_localctx);
				enterOuterAlt(_localctx, 45);
				{
				setState(2724);
				match(SHOW);
				setState(2725);
				match(SESSION);
				}
				break;
			case 46:
				_localctx = new ShowPartitionContext(_localctx);
				enterOuterAlt(_localctx, 46);
				{
				setState(2726);
				match(SHOW);
				setState(2727);
				match(PARTITIONS);
				setState(2728);
				identifier(0);
				}
				break;
			case 47:
				_localctx = new SetSessionContext(_localctx);
				enterOuterAlt(_localctx, 47);
				{
				setState(2729);
				match(SET);
				setState(2730);
				match(SESSION);
				setState(2731);
				qualifiedName();
				setState(2732);
				match(EQ);
				setState(2733);
				expression();
				}
				break;
			case 48:
				_localctx = new ResetSessionContext(_localctx);
				enterOuterAlt(_localctx, 48);
				{
				setState(2735);
				match(RESET);
				setState(2736);
				match(SESSION);
				setState(2737);
				qualifiedName();
				}
				break;
			case 49:
				_localctx = new StartTransactionContext(_localctx);
				enterOuterAlt(_localctx, 49);
				{
				setState(2738);
				match(START);
				setState(2739);
				match(TRANSACTION);
				setState(2748);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ISOLATION || _la==READ) {
					{
					setState(2740);
					transactionMode();
					setState(2745);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(2741);
						match(T__2);
						setState(2742);
						transactionMode();
						}
						}
						setState(2747);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			case 50:
				_localctx = new CommitContext(_localctx);
				enterOuterAlt(_localctx, 50);
				{
				setState(2750);
				if (!(isOracleType()||isMysqlType()||isGpType()||isDb2Type()||isGbaseType())) throw new FailedPredicateException(this, "isOracleType()||isMysqlType()||isGpType()||isDb2Type()||isGbaseType()");
				setState(2751);
				match(COMMIT);
				setState(2753);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WORK) {
					{
					setState(2752);
					match(WORK);
					}
				}

				}
				break;
			case 51:
				_localctx = new RollbackContext(_localctx);
				enterOuterAlt(_localctx, 51);
				{
				setState(2755);
				if (!(isOracleType()||isMysqlType()||isGpType()||isDb2Type()||isGbaseType())) throw new FailedPredicateException(this, "isOracleType()||isMysqlType()||isGpType()||isDb2Type()||isGbaseType()");
				setState(2756);
				match(ROLLBACK);
				setState(2758);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WORK) {
					{
					setState(2757);
					match(WORK);
					}
				}

				}
				break;
			case 52:
				_localctx = new PrepareContext(_localctx);
				enterOuterAlt(_localctx, 52);
				{
				setState(2760);
				match(PREPARE);
				setState(2761);
				identifier(0);
				setState(2762);
				match(FROM);
				setState(2763);
				statement();
				}
				break;
			case 53:
				_localctx = new DeallocateContext(_localctx);
				enterOuterAlt(_localctx, 53);
				{
				setState(2765);
				match(DEALLOCATE);
				setState(2766);
				match(PREPARE);
				setState(2767);
				identifier(0);
				}
				break;
			case 54:
				_localctx = new ExecuteContext(_localctx);
				enterOuterAlt(_localctx, 54);
				{
				setState(2768);
				match(EXECUTE);
				setState(2769);
				identifier(0);
				setState(2779);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2770);
					match(USING);
					setState(2771);
					expression();
					setState(2776);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(2772);
						match(T__2);
						setState(2773);
						expression();
						}
						}
						setState(2778);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			case 55:
				_localctx = new DescribeInputContext(_localctx);
				enterOuterAlt(_localctx, 55);
				{
				setState(2781);
				match(DESCRIBE);
				setState(2782);
				match(INPUT);
				setState(2783);
				identifier(0);
				}
				break;
			case 56:
				_localctx = new DescribeOutputContext(_localctx);
				enterOuterAlt(_localctx, 56);
				{
				setState(2784);
				match(DESCRIBE);
				setState(2785);
				match(OUTPUT);
				setState(2786);
				identifier(0);
				}
				break;
			case 57:
				_localctx = new SetPathContext(_localctx);
				enterOuterAlt(_localctx, 57);
				{
				setState(2787);
				match(SET);
				setState(2788);
				match(PATH);
				setState(2789);
				pathSpecification();
				}
				break;
			case 58:
				_localctx = new SetPropertyContext(_localctx);
				enterOuterAlt(_localctx, 58);
				{
				setState(2790);
				match(SET);
				setState(2796);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,331,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2791);
						identifier_ext();
						setState(2792);
						match(T__4);
						}
						}
					}
					setState(2798);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,331,_ctx);
				}
				setState(2799);
				identifier_ext();
				setState(2800);
				match(EQ);
				setState(2801);
				primaryExpression(0);
				}
				break;
			case 59:
				_localctx = new RepairTableContext(_localctx);
				enterOuterAlt(_localctx, 59);
				{
				setState(2803);
				match(MSCK);
				setState(2804);
				match(REPAIR);
				setState(2805);
				match(TABLE);
				setState(2806);
				((RepairTableContext)_localctx).tableName = qualifiedName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStmContext extends ParserRuleContext {
		public InsertStmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStm; }

		public InsertStmContext() { }
		public void copyFrom(InsertStmContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class InsertIntoSelectContext extends InsertStmContext {
		public TerminalNode INSERT() { return getToken(EntireSqlParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(EntireSqlParser.INTO, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode NOLOGGING() { return getToken(EntireSqlParser.NOLOGGING, 0); }
		public ColumnAliasesContext columnAliases() {
			return getRuleContext(ColumnAliasesContext.class,0);
		}
		public InsertIntoSelectContext(InsertStmContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterInsertIntoSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitInsertIntoSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitInsertIntoSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InsertIntoContext extends InsertStmContext {
		public IdentifierContext tableAlias;
		public TerminalNode INSERT() { return getToken(EntireSqlParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(EntireSqlParser.INTO, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public InsertValuesContext insertValues() {
			return getRuleContext(InsertValuesContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode PARTITION() { return getToken(EntireSqlParser.PARTITION, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public ColumnAliasesContext columnAliases() {
			return getRuleContext(ColumnAliasesContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public InsertIntoContext(InsertStmContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterInsertInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitInsertInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitInsertInto(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveInsertIntoSelectContext extends InsertStmContext {
		public TerminalNode INSERT() { return getToken(EntireSqlParser.INSERT, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode INTO() { return getToken(EntireSqlParser.INTO, 0); }
		public TerminalNode OVERWRITE() { return getToken(EntireSqlParser.OVERWRITE, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode PARTITION() { return getToken(EntireSqlParser.PARTITION, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public ColumnAliasesContext columnAliases() {
			return getRuleContext(ColumnAliasesContext.class,0);
		}
		public HiveInsertIntoSelectContext(InsertStmContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterHiveInsertIntoSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitHiveInsertIntoSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitHiveInsertIntoSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStmContext insertStm() throws RecognitionException {
		InsertStmContext _localctx = new InsertStmContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_insertStm);
		int _la;
		try {
			setState(2862);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
			case 1:
				_localctx = new InsertIntoContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2809);
				match(INSERT);
				setState(2810);
				match(INTO);
				setState(2812);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(2811);
					match(TABLE);
					}
				}

				setState(2814);
				qualifiedName();
				setState(2816);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,334,_ctx) ) {
				case 1:
					{
					setState(2815);
					((InsertIntoContext)_localctx).tableAlias = identifier(0);
					}
					break;
				}
				setState(2820);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(2818);
					match(PARTITION);
					setState(2819);
					partitionSpec();
					}
				}

				setState(2823);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__1) {
					{
					setState(2822);
					columnAliases();
					}
				}

				setState(2825);
				insertValues();
				}
				break;
			case 2:
				_localctx = new HiveInsertIntoSelectContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2827);
				if (!(isHiveType())) throw new FailedPredicateException(this, "isHiveType()");
				setState(2828);
				match(INSERT);
				setState(2835);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INTO:
					{
					setState(2829);
					match(INTO);
					setState(2831);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TABLE) {
						{
						setState(2830);
						match(TABLE);
						}
					}

					}
					break;
				case OVERWRITE:
					{
					setState(2833);
					match(OVERWRITE);
					setState(2834);
					match(TABLE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2837);
				qualifiedName();
				setState(2840);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(2838);
					match(PARTITION);
					setState(2839);
					partitionSpec();
					}
				}

				setState(2843);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
				case 1:
					{
					setState(2842);
					columnAliases();
					}
					break;
				}
				setState(2845);
				query();
				}
				break;
			case 3:
				_localctx = new InsertIntoSelectContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2847);
				if (!(isOracleType()||isMysqlType()||isGpType()||isDb2Type()||isGbaseType())) throw new FailedPredicateException(this, "isOracleType()||isMysqlType()||isGpType()||isDb2Type()||isGbaseType()");
				setState(2848);
				match(INSERT);
				setState(2849);
				match(INTO);
				setState(2851);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(2850);
					match(TABLE);
					}
				}

				setState(2853);
				qualifiedName();
				setState(2855);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOLOGGING) {
					{
					setState(2854);
					match(NOLOGGING);
					}
				}

				setState(2858);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
				case 1:
					{
					setState(2857);
					columnAliases();
					}
					break;
				}
				setState(2860);
				query();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryContext extends ParserRuleContext {
		public QueryNoWithContext queryNoWith() {
			return getRuleContext(QueryNoWithContext.class,0);
		}
		public WithContext with() {
			return getRuleContext(WithContext.class,0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryContext query() throws RecognitionException {
		QueryContext _localctx = new QueryContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_query);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2865);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2864);
				with();
				}
			}

			setState(2867);
			queryNoWith();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(EntireSqlParser.WITH, 0); }
		public List<NamedQueryContext> namedQuery() {
			return getRuleContexts(NamedQueryContext.class);
		}
		public NamedQueryContext namedQuery(int i) {
			return getRuleContext(NamedQueryContext.class,i);
		}
		public TerminalNode RECURSIVE() { return getToken(EntireSqlParser.RECURSIVE, 0); }
		public WithContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterWith(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitWith(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitWith(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithContext with() throws RecognitionException {
		WithContext _localctx = new WithContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_with);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2869);
			match(WITH);
			setState(2871);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				setState(2870);
				match(RECURSIVE);
				}
				break;
			}
			setState(2873);
			namedQuery();
			setState(2878);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__2) {
				{
				{
				setState(2874);
				match(T__2);
				setState(2875);
				namedQuery();
				}
				}
				setState(2880);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OracleCommentContext extends ParserRuleContext {
		public OracleCommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oracleComment; }

		public OracleCommentContext() { }
		public void copyFrom(OracleCommentContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ColumnCommentContext extends OracleCommentContext {
		public QualifiedNameContext tableName;
		public TerminalNode COMMENT() { return getToken(EntireSqlParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(EntireSqlParser.ON, 0); }
		public TerminalNode COLUMN() { return getToken(EntireSqlParser.COLUMN, 0); }
		public TerminalNode IS() { return getToken(EntireSqlParser.IS, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public ColumnCommentContext(OracleCommentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterColumnComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitColumnComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitColumnComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableCommentContext extends OracleCommentContext {
		public QualifiedNameContext tableName;
		public TerminalNode COMMENT() { return getToken(EntireSqlParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(EntireSqlParser.ON, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode IS() { return getToken(EntireSqlParser.IS, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TableCommentContext(OracleCommentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterTableComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitTableComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitTableComment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OracleCommentContext oracleComment() throws RecognitionException {
		OracleCommentContext _localctx = new OracleCommentContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_oracleComment);
		try {
			setState(2897);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
			case 1:
				_localctx = new TableCommentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2881);
				if (!(isOracleType() || isDb2Type() || isGpType())) throw new FailedPredicateException(this, "isOracleType() || isDb2Type() || isGpType()");
				setState(2882);
				match(COMMENT);
				setState(2883);
				match(ON);
				setState(2884);
				match(TABLE);
				setState(2885);
				((TableCommentContext)_localctx).tableName = qualifiedName();
				setState(2886);
				match(IS);
				setState(2887);
				string();
				}
				break;
			case 2:
				_localctx = new ColumnCommentContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2889);
				if (!(isOracleType() || isDb2Type() || isGpType())) throw new FailedPredicateException(this, "isOracleType() || isDb2Type() || isGpType()");
				setState(2890);
				match(COMMENT);
				setState(2891);
				match(ON);
				setState(2892);
				match(COLUMN);
				setState(2893);
				((ColumnCommentContext)_localctx).tableName = qualifiedName();
				setState(2894);
				match(IS);
				setState(2895);
				string();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OraclePartitionItemsContext extends ParserRuleContext {
		public OracleRangePartitionItemsContext oracleRangePartitionItems() {
			return getRuleContext(OracleRangePartitionItemsContext.class,0);
		}
		public OracleHashPartitionItemsContext oracleHashPartitionItems() {
			return getRuleContext(OracleHashPartitionItemsContext.class,0);
		}
		public OracleListPartitionItemsContext oracleListPartitionItems() {
			return getRuleContext(OracleListPartitionItemsContext.class,0);
		}
		public OracleCompositePartitionItemsContext oracleCompositePartitionItems() {
			return getRuleContext(OracleCompositePartitionItemsContext.class,0);
		}
		public OraclePartitionItemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oraclePartitionItems; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterOraclePartitionItems(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitOraclePartitionItems(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitOraclePartitionItems(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OraclePartitionItemsContext oraclePartitionItems() throws RecognitionException {
		OraclePartitionItemsContext _localctx = new OraclePartitionItemsContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_oraclePartitionItems);
		try {
			setState(2907);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2899);
				if (!(isOracleType() || isMysqlType() || isGbaseType())) throw new FailedPredicateException(this, "isOracleType() || isMysqlType() || isGbaseType()");
				setState(2900);
				oracleRangePartitionItems();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2901);
				if (!(isOracleType() || isMysqlType() || isGbaseType())) throw new FailedPredicateException(this, "isOracleType() || isMysqlType() || isGbaseType()");
				setState(2902);
				oracleHashPartitionItems();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2903);
				if (!(isOracleType() || isMysqlType() || isGbaseType())) throw new FailedPredicateException(this, "isOracleType() || isMysqlType() || isGbaseType()");
				setState(2904);
				oracleListPartitionItems();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2905);
				if (!(isOracleType() || isMysqlType() || isGbaseType())) throw new FailedPredicateException(this, "isOracleType() || isMysqlType() || isGbaseType()");
				setState(2906);
				oracleCompositePartitionItems();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db2PartitionItemsContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(EntireSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(EntireSqlParser.BY, 0); }
		public TerminalNode RANGE() { return getToken(EntireSqlParser.RANGE, 0); }
		public ColumnAliasesContext columnAliases() {
			return getRuleContext(ColumnAliasesContext.class,0);
		}
		public TerminalNode STARTING() { return getToken(EntireSqlParser.STARTING, 0); }
		public TerminalNode ENDING() { return getToken(EntireSqlParser.ENDING, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<NumberContext> number() {
			return getRuleContexts(NumberContext.class);
		}
		public NumberContext number(int i) {
			return getRuleContext(NumberContext.class,i);
		}
		public Db2PartitionItemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db2PartitionItems; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterDb2PartitionItems(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitDb2PartitionItems(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitDb2PartitionItems(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Db2PartitionItemsContext db2PartitionItems() throws RecognitionException {
		Db2PartitionItemsContext _localctx = new Db2PartitionItemsContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_db2PartitionItems);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2909);
			if (!(isDb2Type())) throw new FailedPredicateException(this, "isDb2Type()");
			setState(2910);
			match(PARTITION);
			setState(2911);
			match(BY);
			setState(2912);
			match(RANGE);
			setState(2913);
			columnAliases();
			setState(2914);
			match(T__1);
			setState(2915);
			match(STARTING);
			setState(2919);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
			case UNICODE_STRING:
				{
				setState(2916);
				string();
				}
				break;
			case ADD:
			case ALL:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case AT:
			case BERNOULLI:
			case BETWEEN:
			case BY:
			case CALL:
			case CASCADE:
			case CASE:
			case CAST:
			case CATALOGS:
			case COLUMN:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONSTRAINT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_PATH:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATA:
			case DATE:
			case DAY:
			case DEALLOCATE:
			case DESC:
			case DESCRIBE:
			case DISTINCT:
			case DISTRIBUTED:
			case DROP:
			case ELSE:
			case ESCAPE:
			case EXCEPT:
			case EXCLUDING:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FOR:
			case FORMAT:
			case FULL:
			case FUNCTIONS:
			case GRANT:
			case GRANTS:
			case GRAPHVIZ:
			case GROUP:
			case GROUPING:
			case HAVING:
			case HOUR:
			case IF:
			case IN:
			case INCLUDING:
			case INNER:
			case INPUT:
			case INSERT:
			case INTERSECT:
			case MINUSES:
			case INTERVAL:
			case INTO:
			case IO:
			case IS:
			case ISOLATION:
			case JSON:
			case JOIN:
			case LAST:
			case LATERAL:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LIMIT:
			case LISTAGG:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOGICAL:
			case MAP:
			case MINUTE:
			case MONTH:
			case MODIFY:
			case NATURAL:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NORMALIZE:
			case NULLIF:
			case NULLS:
			case ON:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case ORDINALITY:
			case OUTER:
			case OUTPUT:
			case OVER:
			case PARTITION:
			case PARTITIONS:
			case PATH:
			case POSITION:
			case PRECEDING:
			case PREPARE:
			case PRIVILEGES:
			case PROPERTIES:
			case PUBLIC:
			case RANGE:
			case READ:
			case RECURSIVE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTRICT:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SCHEMA:
			case SCHEMAS:
			case SECOND:
			case SERIALIZABLE:
			case SESSION:
			case SET:
			case SETS:
			case SHOW:
			case SOME:
			case START:
			case STATS:
			case SUBSTRING:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRANSACTION:
			case TRY_CAST:
			case TYPE:
			case TRUNCATE:
			case UPDATE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNION:
			case UNNEST:
			case USE:
			case VALIDATE:
			case VERBOSE:
			case VIEW:
			case WHEN:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case SEMI:
			case SORT:
			case OFFSET:
			case DEFAULT:
			case TABLESPACE:
			case EXTERNAL:
			case PURGE:
			case TEMPORARY:
			case PRIMARY:
			case KEY:
			case DISABLE:
			case NOVALIDATE:
			case FOREIGN:
			case REFERENCES:
			case PARTITIONED:
			case CLUSTERED:
			case SORTED:
			case BUCKETS:
			case SKEWED:
			case STORED:
			case DELIMITED:
			case FIELDS:
			case TERMINATED:
			case ESCAPED:
			case COLLECTION:
			case ITEMS:
			case KEYS:
			case LINES:
			case DEFINED:
			case SEQUENCEFILE:
			case TEXTFILE:
			case RCFILE:
			case ORC:
			case ORCFILE:
			case PARQUET:
			case AVRO:
			case JSONFILE:
			case INPUTFORMAT:
			case OUTPUTFORMAT:
			case SERDE:
			case SERDEPROPERTIES:
			case LOCATION:
			case TBLPROPERTIES:
			case RELY:
			case EXCHANGE:
			case RECOVER:
			case ARCHIVE:
			case UNARCHIVE:
			case IGNORE:
			case PROTECTION:
			case TOUCH:
			case ENABLE:
			case NO_DROP:
			case OFFLINE:
			case COMPACT:
			case WAIT:
			case CONCATENATE:
			case CHANGE:
			case AFTER:
			case DEFERRED:
			case REBUILD:
			case INDEX:
			case IDXPROPERTIES:
			case FUNCTION:
			case JAR:
			case FILE:
			case DATABASE:
			case DBPROPERTIES:
			case OWNER:
			case RELOAD:
			case USER:
			case ROLE:
			case FILEFORMAT:
			case LOAD:
			case LOCAL:
			case INPATH:
			case DIRECTORY:
			case VACUUM:
			case LIST:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case EVERY:
			case INCLUSIVE:
			case EXCLUSIVE:
			case TEMPLATE:
			case ENCODING:
			case LOG:
			case ERRORS:
			case SEGMENT:
			case REJECT:
			case PERCENT:
			case WRITABLE:
			case CHECK:
			case UNIQUE:
			case CONCURRENTLY:
			case BITMAP:
			case FORCE:
			case SPLIT:
			case REINDEX:
			case FREEZE:
			case MSCK:
			case REPAIR:
			case FETCH:
			case DEFINITION:
			case LESS:
			case THAN:
			case HASH:
			case NOLOGGING:
			case STRUCT:
			case GLOBAL:
			case PRESERVE:
			case AUTO_INCREMENT:
			case ENGINE:
			case CHARSET:
			case COMPRESS:
			case EXPRESS:
			case REPLICATED:
			case NOCOPIES:
			case SPACE:
			case SHRINK:
			case KEY_BLOCK_SIZE:
			case KEY_DC_SIZE:
			case AUTOEXTEND:
			case NEXT:
			case OFF:
			case MATCHED:
			case MERGE:
			case OUTFILE:
			case OPTIONALLY:
			case ENCLOSED:
			case DOUBLE_ENCLOSED:
			case NULL_VALUE:
			case OUTFILEMODE:
			case HDFS:
			case WRITEMODE:
			case NORMAL:
			case OVERWRITES:
			case FILECOUNT:
			case FILESIZE:
			case CHARACTER:
			case GBK:
			case UTF8:
			case HEAD:
			case RMTSELECT:
			case INFILE:
			case DATA_FORMAT:
			case SEPARATOR:
			case BLANKS:
			case AUTOFILL:
			case LENGTH:
			case TABLE_FIELDS:
			case MAX_BAD_RECORDS:
			case DATETIME:
			case TRACE:
			case TRACE_PATH:
			case NOSPLIT:
			case PARALLEL:
			case MAX_DATA_PROCESSORS:
			case MIN_CHUNK_SIZE:
			case SKIP_BAD_FILE:
			case NUM:
			case FILE_FORMAT:
			case IMMEDIATE:
			case STARTING:
			case ENDING:
			case INITIALLY:
			case REFRESH:
			case ACTIVATE:
			case LOGGED:
			case EMPTY:
			case SEQUENCE:
			case INCREMENT:
			case MINVALUE:
			case MAXVALUE:
			case OVERLAY:
			case PLACING:
			case TRIM:
			case LTRIM:
			case RTRIM:
			case BOTH:
			case TO_CHAR:
			case AGE:
			case DATE_PART:
			case ISFINITE:
			case INT:
			case UNSIGNED:
			case REGEXP:
			case BINARY:
			case LEADING:
			case TRAILING:
			case RLIKE:
			case DATE_SUB:
			case ADDDATE:
			case DATE_ADD:
			case YEAR_MONTH:
			case DAY_HOUR:
			case DAY_MINUTE:
			case DAY_SECOND:
			case HOUR_MINUTE:
			case HOUR_SECOND:
			case MINUTE_SECOND:
			case UNKNOWN:
			case IDENTIFIER:
			case DIGIT_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
				{
				setState(2917);
				identifier(0);
				}
				break;
			case INTEGER_VALUE:
			case DECIMAL_VALUE:
			case DOUBLE_VALUE:
				{
				setState(2918);
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2921);
			match(ENDING);
			setState(2925);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
			case UNICODE_STRING:
				{
				setState(2922);
				string();
				}
				break;
			case ADD:
			case ALL:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case AT:
			case BERNOULLI:
			case BETWEEN:
			case BY:
			case CALL:
			case CASCADE:
			case CASE:
			case CAST:
			case CATALOGS:
			case COLUMN:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONSTRAINT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_PATH:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATA:
			case DATE:
			case DAY:
			case DEALLOCATE:
			case DESC:
			case DESCRIBE:
			case DISTINCT:
			case DISTRIBUTED:
			case DROP:
			case ELSE:
			case ESCAPE:
			case EXCEPT:
			case EXCLUDING:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FOR:
			case FORMAT:
			case FULL:
			case FUNCTIONS:
			case GRANT:
			case GRANTS:
			case GRAPHVIZ:
			case GROUP:
			case GROUPING:
			case HAVING:
			case HOUR:
			case IF:
			case IN:
			case INCLUDING:
			case INNER:
			case INPUT:
			case INSERT:
			case INTERSECT:
			case MINUSES:
			case INTERVAL:
			case INTO:
			case IO:
			case IS:
			case ISOLATION:
			case JSON:
			case JOIN:
			case LAST:
			case LATERAL:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LIMIT:
			case LISTAGG:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOGICAL:
			case MAP:
			case MINUTE:
			case MONTH:
			case MODIFY:
			case NATURAL:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NORMALIZE:
			case NULLIF:
			case NULLS:
			case ON:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case ORDINALITY:
			case OUTER:
			case OUTPUT:
			case OVER:
			case PARTITION:
			case PARTITIONS:
			case PATH:
			case POSITION:
			case PRECEDING:
			case PREPARE:
			case PRIVILEGES:
			case PROPERTIES:
			case PUBLIC:
			case RANGE:
			case READ:
			case RECURSIVE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTRICT:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SCHEMA:
			case SCHEMAS:
			case SECOND:
			case SERIALIZABLE:
			case SESSION:
			case SET:
			case SETS:
			case SHOW:
			case SOME:
			case START:
			case STATS:
			case SUBSTRING:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRANSACTION:
			case TRY_CAST:
			case TYPE:
			case TRUNCATE:
			case UPDATE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNION:
			case UNNEST:
			case USE:
			case VALIDATE:
			case VERBOSE:
			case VIEW:
			case WHEN:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case SEMI:
			case SORT:
			case OFFSET:
			case DEFAULT:
			case TABLESPACE:
			case EXTERNAL:
			case PURGE:
			case TEMPORARY:
			case PRIMARY:
			case KEY:
			case DISABLE:
			case NOVALIDATE:
			case FOREIGN:
			case REFERENCES:
			case PARTITIONED:
			case CLUSTERED:
			case SORTED:
			case BUCKETS:
			case SKEWED:
			case STORED:
			case DELIMITED:
			case FIELDS:
			case TERMINATED:
			case ESCAPED:
			case COLLECTION:
			case ITEMS:
			case KEYS:
			case LINES:
			case DEFINED:
			case SEQUENCEFILE:
			case TEXTFILE:
			case RCFILE:
			case ORC:
			case ORCFILE:
			case PARQUET:
			case AVRO:
			case JSONFILE:
			case INPUTFORMAT:
			case OUTPUTFORMAT:
			case SERDE:
			case SERDEPROPERTIES:
			case LOCATION:
			case TBLPROPERTIES:
			case RELY:
			case EXCHANGE:
			case RECOVER:
			case ARCHIVE:
			case UNARCHIVE:
			case IGNORE:
			case PROTECTION:
			case TOUCH:
			case ENABLE:
			case NO_DROP:
			case OFFLINE:
			case COMPACT:
			case WAIT:
			case CONCATENATE:
			case CHANGE:
			case AFTER:
			case DEFERRED:
			case REBUILD:
			case INDEX:
			case IDXPROPERTIES:
			case FUNCTION:
			case JAR:
			case FILE:
			case DATABASE:
			case DBPROPERTIES:
			case OWNER:
			case RELOAD:
			case USER:
			case ROLE:
			case FILEFORMAT:
			case LOAD:
			case LOCAL:
			case INPATH:
			case DIRECTORY:
			case VACUUM:
			case LIST:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case EVERY:
			case INCLUSIVE:
			case EXCLUSIVE:
			case TEMPLATE:
			case ENCODING:
			case LOG:
			case ERRORS:
			case SEGMENT:
			case REJECT:
			case PERCENT:
			case WRITABLE:
			case CHECK:
			case UNIQUE:
			case CONCURRENTLY:
			case BITMAP:
			case FORCE:
			case SPLIT:
			case REINDEX:
			case FREEZE:
			case MSCK:
			case REPAIR:
			case FETCH:
			case DEFINITION:
			case LESS:
			case THAN:
			case HASH:
			case NOLOGGING:
			case STRUCT:
			case GLOBAL:
			case PRESERVE:
			case AUTO_INCREMENT:
			case ENGINE:
			case CHARSET:
			case COMPRESS:
			case EXPRESS:
			case REPLICATED:
			case NOCOPIES:
			case SPACE:
			case SHRINK:
			case KEY_BLOCK_SIZE:
			case KEY_DC_SIZE:
			case AUTOEXTEND:
			case NEXT:
			case OFF:
			case MATCHED:
			case MERGE:
			case OUTFILE:
			case OPTIONALLY:
			case ENCLOSED:
			case DOUBLE_ENCLOSED:
			case NULL_VALUE:
			case OUTFILEMODE:
			case HDFS:
			case WRITEMODE:
			case NORMAL:
			case OVERWRITES:
			case FILECOUNT:
			case FILESIZE:
			case CHARACTER:
			case GBK:
			case UTF8:
			case HEAD:
			case RMTSELECT:
			case INFILE:
			case DATA_FORMAT:
			case SEPARATOR:
			case BLANKS:
			case AUTOFILL:
			case LENGTH:
			case TABLE_FIELDS:
			case MAX_BAD_RECORDS:
			case DATETIME:
			case TRACE:
			case TRACE_PATH:
			case NOSPLIT:
			case PARALLEL:
			case MAX_DATA_PROCESSORS:
			case MIN_CHUNK_SIZE:
			case SKIP_BAD_FILE:
			case NUM:
			case FILE_FORMAT:
			case IMMEDIATE:
			case STARTING:
			case ENDING:
			case INITIALLY:
			case REFRESH:
			case ACTIVATE:
			case LOGGED:
			case EMPTY:
			case SEQUENCE:
			case INCREMENT:
			case MINVALUE:
			case MAXVALUE:
			case OVERLAY:
			case PLACING:
			case TRIM:
			case LTRIM:
			case RTRIM:
			case BOTH:
			case TO_CHAR:
			case AGE:
			case DATE_PART:
			case ISFINITE:
			case INT:
			case UNSIGNED:
			case REGEXP:
			case BINARY:
			case LEADING:
			case TRAILING:
			case RLIKE:
			case DATE_SUB:
			case ADDDATE:
			case DATE_ADD:
			case YEAR_MONTH:
			case DAY_HOUR:
			case DAY_MINUTE:
			case DAY_SECOND:
			case HOUR_MINUTE:
			case HOUR_SECOND:
			case MINUTE_SECOND:
			case UNKNOWN:
			case IDENTIFIER:
			case DIGIT_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
				{
				setState(2923);
				identifier(0);
				}
				break;
			case INTEGER_VALUE:
			case DECIMAL_VALUE:
			case DOUBLE_VALUE:
				{
				setState(2924);
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2927);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db2CreateTableAsSelectItemContext extends ParserRuleContext {
		public TerminalNode DATA() { return getToken(EntireSqlParser.DATA, 0); }
		public TerminalNode INITIALLY() { return getToken(EntireSqlParser.INITIALLY, 0); }
		public List<TerminalNode> DEFERRED() { return getTokens(EntireSqlParser.DEFERRED); }
		public TerminalNode DEFERRED(int i) {
			return getToken(EntireSqlParser.DEFERRED, i);
		}
		public TerminalNode REFRESH() { return getToken(EntireSqlParser.REFRESH, 0); }
		public Db2CreateTableAsSelectItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db2CreateTableAsSelectItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterDb2CreateTableAsSelectItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitDb2CreateTableAsSelectItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitDb2CreateTableAsSelectItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Db2CreateTableAsSelectItemContext db2CreateTableAsSelectItem() throws RecognitionException {
		Db2CreateTableAsSelectItemContext _localctx = new Db2CreateTableAsSelectItemContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_db2CreateTableAsSelectItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2929);
			if (!(isDb2Type())) throw new FailedPredicateException(this, "isDb2Type()");
			setState(2930);
			match(DATA);
			setState(2931);
			match(INITIALLY);
			setState(2932);
			match(DEFERRED);
			setState(2933);
			match(REFRESH);
			setState(2934);
			match(DEFERRED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OracleTemporayItemContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(EntireSqlParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(EntireSqlParser.COMMIT, 0); }
		public TerminalNode ROWS() { return getToken(EntireSqlParser.ROWS, 0); }
		public TerminalNode PRESERVE() { return getToken(EntireSqlParser.PRESERVE, 0); }
		public TerminalNode DELETE() { return getToken(EntireSqlParser.DELETE, 0); }
		public OracleTemporayItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oracleTemporayItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterOracleTemporayItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitOracleTemporayItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitOracleTemporayItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OracleTemporayItemContext oracleTemporayItem() throws RecognitionException {
		OracleTemporayItemContext _localctx = new OracleTemporayItemContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_oracleTemporayItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2936);
			if (!(isOracleType())) throw new FailedPredicateException(this, "isOracleType()");
			setState(2937);
			match(ON);
			setState(2938);
			match(COMMIT);
			setState(2939);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==PRESERVE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2940);
			match(ROWS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MysqlTemporayItemContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(EntireSqlParser.TYPE, 0); }
		public List<TerminalNode> EQ() { return getTokens(EntireSqlParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(EntireSqlParser.EQ, i);
		}
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(EntireSqlParser.ENGINE, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(EntireSqlParser.AUTO_INCREMENT, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(EntireSqlParser.DEFAULT, 0); }
		public TerminalNode CHARSET() { return getToken(EntireSqlParser.CHARSET, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public MysqlTemporayItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mysqlTemporayItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterMysqlTemporayItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitMysqlTemporayItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitMysqlTemporayItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MysqlTemporayItemContext mysqlTemporayItem() throws RecognitionException {
		MysqlTemporayItemContext _localctx = new MysqlTemporayItemContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_mysqlTemporayItem);
		try {
			setState(2963);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2942);
				if (!(isMysqlType())) throw new FailedPredicateException(this, "isMysqlType()");
				setState(2943);
				match(TYPE);
				setState(2944);
				match(EQ);
				setState(2945);
				primaryExpression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2946);
				if (!(isMysqlType())) throw new FailedPredicateException(this, "isMysqlType()");
				setState(2950);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
				case 1:
					{
					setState(2947);
					match(ENGINE);
					setState(2948);
					match(EQ);
					setState(2949);
					primaryExpression(0);
					}
					break;
				}
				setState(2955);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,353,_ctx) ) {
				case 1:
					{
					setState(2952);
					match(AUTO_INCREMENT);
					setState(2953);
					match(EQ);
					setState(2954);
					number();
					}
					break;
				}
				setState(2961);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
				case 1:
					{
					setState(2957);
					match(DEFAULT);
					setState(2958);
					match(CHARSET);
					setState(2959);
					match(EQ);
					setState(2960);
					identifier(0);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GbaseTemporayItemContext extends ParserRuleContext {
		public TerminalNode COMPRESS() { return getToken(EntireSqlParser.COMPRESS, 0); }
		public List<TerminalNode> INTEGER_VALUE() { return getTokens(EntireSqlParser.INTEGER_VALUE); }
		public TerminalNode INTEGER_VALUE(int i) {
			return getToken(EntireSqlParser.INTEGER_VALUE, i);
		}
		public TerminalNode ENGINE() { return getToken(EntireSqlParser.ENGINE, 0); }
		public List<TerminalNode> EQ() { return getTokens(EntireSqlParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(EntireSqlParser.EQ, i);
		}
		public TerminalNode EXPRESS() { return getToken(EntireSqlParser.EXPRESS, 0); }
		public TerminalNode REPLICATED() { return getToken(EntireSqlParser.REPLICATED, 0); }
		public TerminalNode NOCOPIES() { return getToken(EntireSqlParser.NOCOPIES, 0); }
		public TerminalNode DEFAULT() { return getToken(EntireSqlParser.DEFAULT, 0); }
		public TerminalNode CHARSET() { return getToken(EntireSqlParser.CHARSET, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode TABLESPACE() { return getToken(EntireSqlParser.TABLESPACE, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode AUTOEXTEND() { return getToken(EntireSqlParser.AUTOEXTEND, 0); }
		public TerminalNode ON() { return getToken(EntireSqlParser.ON, 0); }
		public TerminalNode NEXT() { return getToken(EntireSqlParser.NEXT, 0); }
		public TerminalNode DISTRIBUTED() { return getToken(EntireSqlParser.DISTRIBUTED, 0); }
		public TerminalNode BY() { return getToken(EntireSqlParser.BY, 0); }
		public GbaseTemporayItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gbaseTemporayItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGbaseTemporayItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGbaseTemporayItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGbaseTemporayItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GbaseTemporayItemContext gbaseTemporayItem() throws RecognitionException {
		GbaseTemporayItemContext _localctx = new GbaseTemporayItemContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_gbaseTemporayItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2965);
			if (!(isGbaseType())) throw new FailedPredicateException(this, "isGbaseType()");
			setState(2972);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				{
				setState(2966);
				match(COMPRESS);
				setState(2967);
				match(T__1);
				setState(2968);
				match(INTEGER_VALUE);
				setState(2969);
				match(T__2);
				setState(2970);
				match(INTEGER_VALUE);
				setState(2971);
				match(T__3);
				}
				break;
			}
			setState(2977);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
			case 1:
				{
				setState(2974);
				match(ENGINE);
				setState(2975);
				match(EQ);
				setState(2976);
				match(EXPRESS);
				}
				break;
			}
			setState(2986);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				{
				setState(2979);
				match(REPLICATED);
				}
				break;
			case 2:
				{
				{
				setState(2980);
				match(DISTRIBUTED);
				setState(2981);
				match(BY);
				setState(2982);
				match(T__1);
				setState(2983);
				string();
				setState(2984);
				match(T__3);
				}
				}
				break;
			}
			setState(2989);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
			case 1:
				{
				setState(2988);
				match(NOCOPIES);
				}
				break;
			}
			setState(2995);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
			case 1:
				{
				setState(2991);
				match(DEFAULT);
				setState(2992);
				match(CHARSET);
				setState(2993);
				match(EQ);
				setState(2994);
				identifier(0);
				}
				break;
			}
			setState(3000);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1:
				{
				setState(2997);
				match(TABLESPACE);
				setState(2998);
				match(EQ);
				setState(2999);
				string();
				}
				break;
			}
			setState(3006);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
			case 1:
				{
				setState(3002);
				match(AUTOEXTEND);
				setState(3003);
				match(ON);
				setState(3004);
				match(NEXT);
				setState(3005);
				identifier(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OracleRangePartitionItemsContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(EntireSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(EntireSqlParser.BY, 0); }
		public TerminalNode RANGE() { return getToken(EntireSqlParser.RANGE, 0); }
		public ColumnAliasesContext columnAliases() {
			return getRuleContext(ColumnAliasesContext.class,0);
		}
		public List<OracleRangePartitionItemContext> oracleRangePartitionItem() {
			return getRuleContexts(OracleRangePartitionItemContext.class);
		}
		public OracleRangePartitionItemContext oracleRangePartitionItem(int i) {
			return getRuleContext(OracleRangePartitionItemContext.class,i);
		}
		public OracleRangePartitionItemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oracleRangePartitionItems; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterOracleRangePartitionItems(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitOracleRangePartitionItems(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitOracleRangePartitionItems(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OracleRangePartitionItemsContext oracleRangePartitionItems() throws RecognitionException {
		OracleRangePartitionItemsContext _localctx = new OracleRangePartitionItemsContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_oracleRangePartitionItems);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3008);
			match(PARTITION);
			setState(3009);
			match(BY);
			setState(3010);
			match(RANGE);
			setState(3011);
			columnAliases();
			setState(3012);
			match(T__1);
			setState(3013);
			oracleRangePartitionItem();
			setState(3018);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__2) {
				{
				{
				setState(3014);
				match(T__2);
				setState(3015);
				oracleRangePartitionItem();
				}
				}
				setState(3020);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3021);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OracleRangePartitionItemContext extends ParserRuleContext {
		public IdentifierContext ptname;
		public IdentifierContext tsname;
		public TerminalNode PARTITION() { return getToken(EntireSqlParser.PARTITION, 0); }
		public TerminalNode VALUES() { return getToken(EntireSqlParser.VALUES, 0); }
		public TerminalNode LESS() { return getToken(EntireSqlParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(EntireSqlParser.THAN, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode TABLESPACE() { return getToken(EntireSqlParser.TABLESPACE, 0); }
		public OracleRangePartitionItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oracleRangePartitionItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterOracleRangePartitionItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitOracleRangePartitionItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitOracleRangePartitionItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OracleRangePartitionItemContext oracleRangePartitionItem() throws RecognitionException {
		OracleRangePartitionItemContext _localctx = new OracleRangePartitionItemContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_oracleRangePartitionItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3023);
			match(PARTITION);
			setState(3024);
			((OracleRangePartitionItemContext)_localctx).ptname = identifier(0);
			setState(3025);
			match(VALUES);
			setState(3026);
			match(LESS);
			setState(3027);
			match(THAN);
			setState(3028);
			booleanExpression(0);
			setState(3031);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(3029);
				match(TABLESPACE);
				setState(3030);
				((OracleRangePartitionItemContext)_localctx).tsname = identifier(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OracleListPartitionItemsContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(EntireSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(EntireSqlParser.BY, 0); }
		public TerminalNode LIST() { return getToken(EntireSqlParser.LIST, 0); }
		public ColumnAliasesContext columnAliases() {
			return getRuleContext(ColumnAliasesContext.class,0);
		}
		public List<OracleListPartitionItemContext> oracleListPartitionItem() {
			return getRuleContexts(OracleListPartitionItemContext.class);
		}
		public OracleListPartitionItemContext oracleListPartitionItem(int i) {
			return getRuleContext(OracleListPartitionItemContext.class,i);
		}
		public OracleListPartitionItemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oracleListPartitionItems; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterOracleListPartitionItems(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitOracleListPartitionItems(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitOracleListPartitionItems(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OracleListPartitionItemsContext oracleListPartitionItems() throws RecognitionException {
		OracleListPartitionItemsContext _localctx = new OracleListPartitionItemsContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_oracleListPartitionItems);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3033);
			match(PARTITION);
			setState(3034);
			match(BY);
			setState(3035);
			match(LIST);
			setState(3036);
			columnAliases();
			setState(3037);
			match(T__1);
			setState(3038);
			oracleListPartitionItem();
			setState(3043);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__2) {
				{
				{
				setState(3039);
				match(T__2);
				setState(3040);
				oracleListPartitionItem();
				}
				}
				setState(3045);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3046);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OracleListPartitionItemContext extends ParserRuleContext {
		public IdentifierContext ptname;
		public IdentifierContext tsname;
		public TerminalNode VALUES() { return getToken(EntireSqlParser.VALUES, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(EntireSqlParser.PARTITION, 0); }
		public TerminalNode SUBPARTITION() { return getToken(EntireSqlParser.SUBPARTITION, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode TABLESPACE() { return getToken(EntireSqlParser.TABLESPACE, 0); }
		public OracleListPartitionItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oracleListPartitionItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterOracleListPartitionItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitOracleListPartitionItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitOracleListPartitionItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OracleListPartitionItemContext oracleListPartitionItem() throws RecognitionException {
		OracleListPartitionItemContext _localctx = new OracleListPartitionItemContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_oracleListPartitionItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3048);
			_la = _input.LA(1);
			if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3049);
			((OracleListPartitionItemContext)_localctx).ptname = identifier(0);
			setState(3050);
			match(VALUES);
			setState(3051);
			booleanExpression(0);
			setState(3054);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(3052);
				match(TABLESPACE);
				setState(3053);
				((OracleListPartitionItemContext)_localctx).tsname = identifier(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OracleHashPartitionItemsContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(EntireSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(EntireSqlParser.BY, 0); }
		public TerminalNode HASH() { return getToken(EntireSqlParser.HASH, 0); }
		public ColumnAliasesContext columnAliases() {
			return getRuleContext(ColumnAliasesContext.class,0);
		}
		public List<OracleHashPartitionItemContext> oracleHashPartitionItem() {
			return getRuleContexts(OracleHashPartitionItemContext.class);
		}
		public OracleHashPartitionItemContext oracleHashPartitionItem(int i) {
			return getRuleContext(OracleHashPartitionItemContext.class,i);
		}
		public OracleHashPartitionItemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oracleHashPartitionItems; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterOracleHashPartitionItems(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitOracleHashPartitionItems(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitOracleHashPartitionItems(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OracleHashPartitionItemsContext oracleHashPartitionItems() throws RecognitionException {
		OracleHashPartitionItemsContext _localctx = new OracleHashPartitionItemsContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_oracleHashPartitionItems);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3056);
			match(PARTITION);
			setState(3057);
			match(BY);
			setState(3058);
			match(HASH);
			setState(3059);
			columnAliases();
			setState(3060);
			match(T__1);
			setState(3061);
			oracleHashPartitionItem();
			setState(3066);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__2) {
				{
				{
				setState(3062);
				match(T__2);
				setState(3063);
				oracleHashPartitionItem();
				}
				}
				setState(3068);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3069);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OracleHashPartitionItemContext extends ParserRuleContext {
		public IdentifierContext ptname;
		public IdentifierContext tsname;
		public TerminalNode PARTITION() { return getToken(EntireSqlParser.PARTITION, 0); }
		public TerminalNode SUBPARTITION() { return getToken(EntireSqlParser.SUBPARTITION, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode TABLESPACE() { return getToken(EntireSqlParser.TABLESPACE, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode SUBPARTITIONS() { return getToken(EntireSqlParser.SUBPARTITIONS, 0); }
		public TerminalNode STORE() { return getToken(EntireSqlParser.STORE, 0); }
		public TerminalNode IN() { return getToken(EntireSqlParser.IN, 0); }
		public ColumnAliasesContext columnAliases() {
			return getRuleContext(ColumnAliasesContext.class,0);
		}
		public OracleHashPartitionItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oracleHashPartitionItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterOracleHashPartitionItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitOracleHashPartitionItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitOracleHashPartitionItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OracleHashPartitionItemContext oracleHashPartitionItem() throws RecognitionException {
		OracleHashPartitionItemContext _localctx = new OracleHashPartitionItemContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_oracleHashPartitionItem);
		int _la;
		try {
			setState(3084);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3071);
				_la = _input.LA(1);
				if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3072);
				((OracleHashPartitionItemContext)_localctx).ptname = identifier(0);
				setState(3075);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLESPACE) {
					{
					setState(3073);
					match(TABLESPACE);
					setState(3074);
					((OracleHashPartitionItemContext)_localctx).tsname = identifier(0);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3077);
				_la = _input.LA(1);
				if ( !(_la==PARTITION || _la==SUBPARTITIONS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3078);
				number();
				setState(3082);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORE) {
					{
					setState(3079);
					match(STORE);
					setState(3080);
					match(IN);
					setState(3081);
					columnAliases();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OracleCompositePartitionItemsContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(EntireSqlParser.PARTITION, 0); }
		public List<TerminalNode> BY() { return getTokens(EntireSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(EntireSqlParser.BY, i);
		}
		public TerminalNode RANGE() { return getToken(EntireSqlParser.RANGE, 0); }
		public List<ColumnAliasesContext> columnAliases() {
			return getRuleContexts(ColumnAliasesContext.class);
		}
		public ColumnAliasesContext columnAliases(int i) {
			return getRuleContext(ColumnAliasesContext.class,i);
		}
		public TerminalNode SUBPARTITION() { return getToken(EntireSqlParser.SUBPARTITION, 0); }
		public List<OracleCompositePartitionItemContext> oracleCompositePartitionItem() {
			return getRuleContexts(OracleCompositePartitionItemContext.class);
		}
		public OracleCompositePartitionItemContext oracleCompositePartitionItem(int i) {
			return getRuleContext(OracleCompositePartitionItemContext.class,i);
		}
		public TerminalNode HASH() { return getToken(EntireSqlParser.HASH, 0); }
		public TerminalNode LIST() { return getToken(EntireSqlParser.LIST, 0); }
		public OracleCompositePartitionItemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oracleCompositePartitionItems; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterOracleCompositePartitionItems(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitOracleCompositePartitionItems(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitOracleCompositePartitionItems(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OracleCompositePartitionItemsContext oracleCompositePartitionItems() throws RecognitionException {
		OracleCompositePartitionItemsContext _localctx = new OracleCompositePartitionItemsContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_oracleCompositePartitionItems);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3086);
			match(PARTITION);
			setState(3087);
			match(BY);
			setState(3088);
			match(RANGE);
			setState(3089);
			columnAliases();
			setState(3090);
			match(SUBPARTITION);
			setState(3091);
			match(BY);
			setState(3092);
			_la = _input.LA(1);
			if ( !(_la==LIST || _la==HASH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3093);
			columnAliases();
			setState(3094);
			match(T__1);
			setState(3095);
			oracleCompositePartitionItem();
			setState(3100);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__2) {
				{
				{
				setState(3096);
				match(T__2);
				setState(3097);
				oracleCompositePartitionItem();
				}
				}
				setState(3102);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3103);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OracleCompositePartitionItemContext extends ParserRuleContext {
		public OracleRangePartitionItemContext oracleRangePartitionItem() {
			return getRuleContext(OracleRangePartitionItemContext.class,0);
		}
		public List<OracleHashPartitionItemContext> oracleHashPartitionItem() {
			return getRuleContexts(OracleHashPartitionItemContext.class);
		}
		public OracleHashPartitionItemContext oracleHashPartitionItem(int i) {
			return getRuleContext(OracleHashPartitionItemContext.class,i);
		}
		public List<OracleListPartitionItemContext> oracleListPartitionItem() {
			return getRuleContexts(OracleListPartitionItemContext.class);
		}
		public OracleListPartitionItemContext oracleListPartitionItem(int i) {
			return getRuleContext(OracleListPartitionItemContext.class,i);
		}
		public TerminalNode SUBPARTITIONS() { return getToken(EntireSqlParser.SUBPARTITIONS, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode STORE() { return getToken(EntireSqlParser.STORE, 0); }
		public TerminalNode IN() { return getToken(EntireSqlParser.IN, 0); }
		public ColumnAliasesContext columnAliases() {
			return getRuleContext(ColumnAliasesContext.class,0);
		}
		public OracleCompositePartitionItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oracleCompositePartitionItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterOracleCompositePartitionItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitOracleCompositePartitionItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitOracleCompositePartitionItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OracleCompositePartitionItemContext oracleCompositePartitionItem() throws RecognitionException {
		OracleCompositePartitionItemContext _localctx = new OracleCompositePartitionItemContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_oracleCompositePartitionItem);
		int _la;
		try {
			setState(3141);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3105);
				oracleRangePartitionItem();
				setState(3117);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__1) {
					{
					setState(3106);
					match(T__1);
					setState(3107);
					oracleHashPartitionItem();
					setState(3112);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(3108);
						match(T__2);
						setState(3109);
						oracleHashPartitionItem();
						}
						}
						setState(3114);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3115);
					match(T__3);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3119);
				oracleRangePartitionItem();
				setState(3131);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__1) {
					{
					setState(3120);
					match(T__1);
					setState(3121);
					oracleListPartitionItem();
					setState(3126);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(3122);
						match(T__2);
						setState(3123);
						oracleListPartitionItem();
						}
						}
						setState(3128);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3129);
					match(T__3);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3133);
				oracleRangePartitionItem();
				setState(3134);
				match(SUBPARTITIONS);
				setState(3135);
				number();
				setState(3139);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORE) {
					{
					setState(3136);
					match(STORE);
					setState(3137);
					match(IN);
					setState(3138);
					columnAliases();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintInfoContext extends ParserRuleContext {
		public IdentifierContext constraintName;
		public QualifiedNameContext tableName;
		public TerminalNode CONSTRAINT() { return getToken(EntireSqlParser.CONSTRAINT, 0); }
		public TerminalNode PRIMARY() { return getToken(EntireSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(EntireSqlParser.KEY, 0); }
		public List<ColumnAliasesContext> columnAliases() {
			return getRuleContexts(ColumnAliasesContext.class);
		}
		public ColumnAliasesContext columnAliases(int i) {
			return getRuleContext(ColumnAliasesContext.class,i);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(EntireSqlParser.UNIQUE, 0); }
		public TerminalNode FOREIGN() { return getToken(EntireSqlParser.FOREIGN, 0); }
		public TerminalNode REFERENCES() { return getToken(EntireSqlParser.REFERENCES, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(EntireSqlParser.CHECK, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public ConstraintInfoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintInfo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterConstraintInfo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitConstraintInfo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitConstraintInfo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintInfoContext constraintInfo() throws RecognitionException {
		ConstraintInfoContext _localctx = new ConstraintInfoContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_constraintInfo);
		try {
			setState(3176);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3143);
				match(CONSTRAINT);
				setState(3145);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					setState(3144);
					((ConstraintInfoContext)_localctx).constraintName = identifier(0);
					}
					break;
				}
				setState(3147);
				match(PRIMARY);
				setState(3148);
				match(KEY);
				setState(3149);
				columnAliases();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3150);
				match(CONSTRAINT);
				setState(3152);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
				case 1:
					{
					setState(3151);
					((ConstraintInfoContext)_localctx).constraintName = identifier(0);
					}
					break;
				}
				setState(3154);
				match(UNIQUE);
				setState(3155);
				columnAliases();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3156);
				match(CONSTRAINT);
				setState(3158);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
				case 1:
					{
					setState(3157);
					((ConstraintInfoContext)_localctx).constraintName = identifier(0);
					}
					break;
				}
				setState(3160);
				match(FOREIGN);
				setState(3161);
				match(KEY);
				setState(3162);
				columnAliases();
				setState(3163);
				match(REFERENCES);
				setState(3164);
				((ConstraintInfoContext)_localctx).tableName = qualifiedName();
				setState(3165);
				columnAliases();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3167);
				match(CONSTRAINT);
				setState(3169);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
				case 1:
					{
					setState(3168);
					((ConstraintInfoContext)_localctx).constraintName = identifier(0);
					}
					break;
				}
				setState(3171);
				match(CHECK);
				setState(3172);
				match(T__1);
				setState(3173);
				booleanExpression(0);
				setState(3174);
				match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MysqlColumnCreateIndexContext extends ParserRuleContext {
		public QualifiedNameContext indexName;
		public TerminalNode INDEX() { return getToken(EntireSqlParser.INDEX, 0); }
		public ColumnAliasesByOrderContext columnAliasesByOrder() {
			return getRuleContext(ColumnAliasesByOrderContext.class,0);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public MysqlColumnCreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mysqlColumnCreateIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterMysqlColumnCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitMysqlColumnCreateIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitMysqlColumnCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MysqlColumnCreateIndexContext mysqlColumnCreateIndex() throws RecognitionException {
		MysqlColumnCreateIndexContext _localctx = new MysqlColumnCreateIndexContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_mysqlColumnCreateIndex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3178);
			match(INDEX);
			setState(3179);
			((MysqlColumnCreateIndexContext)_localctx).indexName = qualifiedName();
			setState(3180);
			columnAliasesByOrder();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GbaseColumnCreateIndexContext extends ParserRuleContext {
		public QualifiedNameContext indexName;
		public TerminalNode KEY() { return getToken(EntireSqlParser.KEY, 0); }
		public ColumnAliasesByOrderContext columnAliasesByOrder() {
			return getRuleContext(ColumnAliasesByOrderContext.class,0);
		}
		public TerminalNode USING() { return getToken(EntireSqlParser.USING, 0); }
		public TerminalNode HASH() { return getToken(EntireSqlParser.HASH, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(EntireSqlParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(EntireSqlParser.GLOBAL, 0); }
		public GbaseColumnCreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gbaseColumnCreateIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGbaseColumnCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGbaseColumnCreateIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGbaseColumnCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GbaseColumnCreateIndexContext gbaseColumnCreateIndex() throws RecognitionException {
		GbaseColumnCreateIndexContext _localctx = new GbaseColumnCreateIndexContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_gbaseColumnCreateIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3182);
			match(KEY);
			setState(3183);
			((GbaseColumnCreateIndexContext)_localctx).indexName = qualifiedName();
			setState(3184);
			columnAliasesByOrder();
			setState(3185);
			match(USING);
			setState(3186);
			match(HASH);
			setState(3187);
			_la = _input.LA(1);
			if ( !(_la==LOCAL || _la==GLOBAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableElementContext extends ParserRuleContext {
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public LikeClauseContext likeClause() {
			return getRuleContext(LikeClauseContext.class,0);
		}
		public GbaseColumnCreateIndexContext gbaseColumnCreateIndex() {
			return getRuleContext(GbaseColumnCreateIndexContext.class,0);
		}
		public ConstraintInfoContext constraintInfo() {
			return getRuleContext(ConstraintInfoContext.class,0);
		}
		public MysqlColumnCreateIndexContext mysqlColumnCreateIndex() {
			return getRuleContext(MysqlColumnCreateIndexContext.class,0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterTableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitTableElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementContext tableElement() throws RecognitionException {
		TableElementContext _localctx = new TableElementContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_tableElement);
		try {
			setState(3197);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3189);
				columnDefinition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3190);
				likeClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3191);
				if (!(isGbaseType())) throw new FailedPredicateException(this, "isGbaseType()");
				setState(3192);
				gbaseColumnCreateIndex();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3193);
				if (!(isOracleType())) throw new FailedPredicateException(this, "isOracleType()");
				setState(3194);
				constraintInfo();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3195);
				if (!(isMysqlType())) throw new FailedPredicateException(this, "isMysqlType()");
				setState(3196);
				mysqlColumnCreateIndex();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableElementsContext extends ParserRuleContext {
		public List<TableElementContext> tableElement() {
			return getRuleContexts(TableElementContext.class);
		}
		public TableElementContext tableElement(int i) {
			return getRuleContext(TableElementContext.class,i);
		}
		public TableElementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterTableElements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitTableElements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitTableElements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementsContext tableElements() throws RecognitionException {
		TableElementsContext _localctx = new TableElementsContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_tableElements);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3199);
			tableElement();
			setState(3204);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,384,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3200);
					match(T__2);
					setState(3201);
					tableElement();
					}
					}
				}
				setState(3206);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,384,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionsContext extends ParserRuleContext {
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public ColumnDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterColumnDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitColumnDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitColumnDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionsContext columnDefinitions() throws RecognitionException {
		ColumnDefinitionsContext _localctx = new ColumnDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_columnDefinitions);
		try {
			setState(3222);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3208);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,385,_ctx) ) {
				case 1:
					{
					setState(3207);
					columnConstraint();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3210);
				columnConstraint();
				setState(3211);
				columnConstraint();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3213);
				columnConstraint();
				setState(3214);
				columnConstraint();
				setState(3215);
				columnConstraint();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3217);
				columnConstraint();
				setState(3218);
				columnConstraint();
				setState(3219);
				columnConstraint();
				setState(3220);
				columnConstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public IdentifierContext columnName;
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public ColumnDefinitionsContext columnDefinitions() {
			return getRuleContext(ColumnDefinitionsContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(EntireSqlParser.DEFAULT, 0); }
		public ColumnNullableContext columnNullable() {
			return getRuleContext(ColumnNullableContext.class,0);
		}
		public AutoIncrementContext autoIncrement() {
			return getRuleContext(AutoIncrementContext.class,0);
		}
		public CompressTypeContext compressType() {
			return getRuleContext(CompressTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(EntireSqlParser.COMMENT, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode NULL() { return getToken(EntireSqlParser.NULL, 0); }
		public List<TerminalNode> CURRENT_TIMESTAMP() { return getTokens(EntireSqlParser.CURRENT_TIMESTAMP); }
		public TerminalNode CURRENT_TIMESTAMP(int i) {
			return getToken(EntireSqlParser.CURRENT_TIMESTAMP, i);
		}
		public TerminalNode ON() { return getToken(EntireSqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(EntireSqlParser.UPDATE, 0); }
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_columnDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3224);
			((ColumnDefinitionContext)_localctx).columnName = identifier(0);
			setState(3225);
			type(0);
			setState(3226);
			columnDefinitions();
			setState(3238);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
			case 1:
				{
				setState(3227);
				match(DEFAULT);
				setState(3236);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
				case 1:
					{
					setState(3228);
					string();
					}
					break;
				case 2:
					{
					setState(3229);
					identifier(0);
					}
					break;
				case 3:
					{
					setState(3230);
					number();
					}
					break;
				case 4:
					{
					setState(3231);
					match(NULL);
					}
					break;
				case 5:
					{
					setState(3232);
					match(CURRENT_TIMESTAMP);
					setState(3233);
					match(ON);
					setState(3234);
					match(UPDATE);
					setState(3235);
					match(CURRENT_TIMESTAMP);
					}
					break;
				}
				}
				break;
			}
			setState(3241);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
			case 1:
				{
				setState(3240);
				columnNullable();
				}
				break;
			}
			setState(3244);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
			case 1:
				{
				setState(3243);
				autoIncrement();
				}
				break;
			}
			setState(3247);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
			case 1:
				{
				setState(3246);
				compressType();
				}
				break;
			}
			setState(3251);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(3249);
				match(COMMENT);
				setState(3250);
				string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AutoIncrementContext extends ParserRuleContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(EntireSqlParser.AUTO_INCREMENT, 0); }
		public AutoIncrementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_autoIncrement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterAutoIncrement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitAutoIncrement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitAutoIncrement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AutoIncrementContext autoIncrement() throws RecognitionException {
		AutoIncrementContext _localctx = new AutoIncrementContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_autoIncrement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3253);
			if (!(isMysqlType())) throw new FailedPredicateException(this, "isMysqlType()");
			setState(3254);
			match(AUTO_INCREMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompressTypeContext extends ParserRuleContext {
		public TerminalNode COMPRESS() { return getToken(EntireSqlParser.COMPRESS, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(EntireSqlParser.INTEGER_VALUE, 0); }
		public CompressTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compressType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterCompressType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitCompressType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitCompressType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompressTypeContext compressType() throws RecognitionException {
		CompressTypeContext _localctx = new CompressTypeContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_compressType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3256);
			if (!(isGbaseType())) throw new FailedPredicateException(this, "isGbaseType()");
			setState(3257);
			match(COMPRESS);
			setState(3258);
			match(T__1);
			setState(3259);
			match(INTEGER_VALUE);
			setState(3260);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNullableContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(EntireSqlParser.NULL, 0); }
		public TerminalNode CONSTRAINT() { return getToken(EntireSqlParser.CONSTRAINT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public ColumnNullableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNullable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterColumnNullable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitColumnNullable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitColumnNullable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNullableContext columnNullable() throws RecognitionException {
		ColumnNullableContext _localctx = new ColumnNullableContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_columnNullable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3264);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(3262);
				match(CONSTRAINT);
				setState(3263);
				identifier(0);
				}
			}

			setState(3267);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3266);
				match(NOT);
				}
			}

			setState(3269);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public IdentifierContext pkId;
		public IdentifierContext dataTs;
		public IdentifierContext ckId;
		public IdentifierContext uqId;
		public IdentifierContext fkId;
		public QualifiedNameContext tableName;
		public TerminalNode WITH() { return getToken(EntireSqlParser.WITH, 0); }
		public PropertiesContext properties() {
			return getRuleContext(PropertiesContext.class,0);
		}
		public TerminalNode NULL() { return getToken(EntireSqlParser.NULL, 0); }
		public TerminalNode CONSTRAINT() { return getToken(EntireSqlParser.CONSTRAINT, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public TerminalNode PRIMARY() { return getToken(EntireSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(EntireSqlParser.KEY, 0); }
		public TerminalNode USING() { return getToken(EntireSqlParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(EntireSqlParser.INDEX, 0); }
		public TerminalNode TABLESPACE() { return getToken(EntireSqlParser.TABLESPACE, 0); }
		public TerminalNode CHECK() { return getToken(EntireSqlParser.CHECK, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public TerminalNode ENCODING() { return getToken(EntireSqlParser.ENCODING, 0); }
		public TerminalNode UNIQUE() { return getToken(EntireSqlParser.UNIQUE, 0); }
		public TerminalNode REFERENCES() { return getToken(EntireSqlParser.REFERENCES, 0); }
		public ColumnAliasesContext columnAliases() {
			return getRuleContext(ColumnAliasesContext.class,0);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_columnConstraint);
		int _la;
		try {
			setState(3334);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3273);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
				case 1:
					{
					setState(3271);
					match(WITH);
					setState(3272);
					properties();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3277);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(3275);
					match(CONSTRAINT);
					setState(3276);
					identifier(0);
					}
				}

				setState(3280);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3279);
					match(NOT);
					}
				}

				setState(3282);
				match(NULL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3283);
				if (!(isGpType())) throw new FailedPredicateException(this, "isGpType()");
				setState(3284);
				match(CONSTRAINT);
				setState(3285);
				((ColumnConstraintContext)_localctx).pkId = identifier(0);
				setState(3286);
				match(PRIMARY);
				setState(3287);
				match(KEY);
				setState(3288);
				match(USING);
				setState(3289);
				match(INDEX);
				setState(3290);
				match(TABLESPACE);
				setState(3291);
				((ColumnConstraintContext)_localctx).dataTs = identifier(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3293);
				if (!(isGpType())) throw new FailedPredicateException(this, "isGpType()");
				setState(3294);
				match(CONSTRAINT);
				setState(3295);
				((ColumnConstraintContext)_localctx).ckId = identifier(0);
				setState(3296);
				match(CHECK);
				{
				setState(3297);
				booleanExpression(0);
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3299);
				if (!(isGpType())) throw new FailedPredicateException(this, "isGpType()");
				setState(3300);
				match(ENCODING);
				{
				setState(3301);
				properties();
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3302);
				if (!(isOracleType()||isMysqlType()||isGpType()||isDb2Type()||isGbaseType())) throw new FailedPredicateException(this, "isOracleType()||isMysqlType()||isGpType()||isDb2Type()||isGbaseType()");
				setState(3305);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(3303);
					match(CONSTRAINT);
					setState(3304);
					((ColumnConstraintContext)_localctx).uqId = identifier(0);
					}
				}

				setState(3307);
				match(UNIQUE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3308);
				if (!(isOracleType()||isMysqlType()||isGpType()||isDb2Type()||isGbaseType())) throw new FailedPredicateException(this, "isOracleType()||isMysqlType()||isGpType()||isDb2Type()||isGbaseType()");
				setState(3311);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(3309);
					match(CONSTRAINT);
					setState(3310);
					((ColumnConstraintContext)_localctx).uqId = identifier(0);
					}
				}

				setState(3313);
				match(PRIMARY);
				setState(3314);
				match(KEY);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3315);
				if (!(isOracleType()||isMysqlType()||isGpType()||isDb2Type()||isGbaseType())) throw new FailedPredicateException(this, "isOracleType()||isMysqlType()||isGpType()||isDb2Type()||isGbaseType()");
				setState(3318);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(3316);
					match(CONSTRAINT);
					setState(3317);
					((ColumnConstraintContext)_localctx).fkId = identifier(0);
					}
				}

				setState(3320);
				match(REFERENCES);
				setState(3321);
				((ColumnConstraintContext)_localctx).tableName = qualifiedName();
				setState(3322);
				columnAliases();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3324);
				if (!(isOracleType()||isMysqlType()||isGpType()||isDb2Type()||isGbaseType())) throw new FailedPredicateException(this, "isOracleType()||isMysqlType()||isGpType()||isDb2Type()||isGbaseType()");
				setState(3327);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(3325);
					match(CONSTRAINT);
					setState(3326);
					((ColumnConstraintContext)_localctx).fkId = identifier(0);
					}
				}

				setState(3329);
				match(CHECK);
				setState(3330);
				match(T__1);
				setState(3331);
				booleanExpression(0);
				setState(3332);
				match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LikeClauseContext extends ParserRuleContext {
		public Token optionType;
		public TerminalNode LIKE() { return getToken(EntireSqlParser.LIKE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode PROPERTIES() { return getToken(EntireSqlParser.PROPERTIES, 0); }
		public TerminalNode INCLUDING() { return getToken(EntireSqlParser.INCLUDING, 0); }
		public TerminalNode EXCLUDING() { return getToken(EntireSqlParser.EXCLUDING, 0); }
		public LikeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterLikeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitLikeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitLikeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LikeClauseContext likeClause() throws RecognitionException {
		LikeClauseContext _localctx = new LikeClauseContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_likeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3336);
			match(LIKE);
			setState(3337);
			qualifiedName();
			setState(3340);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLUDING || _la==INCLUDING) {
				{
				setState(3338);
				((LikeClauseContext)_localctx).optionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
					((LikeClauseContext)_localctx).optionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3339);
				match(PROPERTIES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PropertiesContext extends ParserRuleContext {
		public List<PropertyContext> property() {
			return getRuleContexts(PropertyContext.class);
		}
		public PropertyContext property(int i) {
			return getRuleContext(PropertyContext.class,i);
		}
		public PropertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitProperties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitProperties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PropertiesContext properties() throws RecognitionException {
		PropertiesContext _localctx = new PropertiesContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_properties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3342);
			match(T__1);
			setState(3343);
			property();
			setState(3348);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__2) {
				{
				{
				setState(3344);
				match(T__2);
				setState(3345);
				property();
				}
				}
				setState(3350);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3351);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PropertyContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQ() { return getToken(EntireSqlParser.EQ, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_property; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterProperty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitProperty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitProperty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PropertyContext property() throws RecognitionException {
		PropertyContext _localctx = new PropertyContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_property);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3353);
			identifier(0);
			setState(3354);
			match(EQ);
			setState(3355);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryNoWithContext extends ParserRuleContext {
		public QueryTermContext queryTerm() {
			return getRuleContext(QueryTermContext.class,0);
		}
		public TerminalNode ORDER() { return getToken(EntireSqlParser.ORDER, 0); }
		public List<TerminalNode> BY() { return getTokens(EntireSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(EntireSqlParser.BY, i);
		}
		public List<SortItemContext> sortItem() {
			return getRuleContexts(SortItemContext.class);
		}
		public SortItemContext sortItem(int i) {
			return getRuleContext(SortItemContext.class,i);
		}
		public TerminalNode SORT() { return getToken(EntireSqlParser.SORT, 0); }
		public TerminalNode DISTRIBUTED() { return getToken(EntireSqlParser.DISTRIBUTED, 0); }
		public TerminalNode LIMIT() { return getToken(EntireSqlParser.LIMIT, 0); }
		public LimitStatContext limitStat() {
			return getRuleContext(LimitStatContext.class,0);
		}
		public TerminalNode FETCH() { return getToken(EntireSqlParser.FETCH, 0); }
		public TerminalNode FIRST() { return getToken(EntireSqlParser.FIRST, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(EntireSqlParser.ROWS, 0); }
		public TerminalNode ONLY() { return getToken(EntireSqlParser.ONLY, 0); }
		public QueryNoWithContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryNoWith; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterQueryNoWith(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitQueryNoWith(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitQueryNoWith(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryNoWithContext queryNoWith() throws RecognitionException {
		QueryNoWithContext _localctx = new QueryNoWithContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_queryNoWith);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3357);
			queryTerm(0);
			setState(3368);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				setState(3358);
				match(ORDER);
				setState(3359);
				match(BY);
				setState(3360);
				sortItem();
				setState(3365);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,405,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3361);
						match(T__2);
						setState(3362);
						sortItem();
						}
						}
					}
					setState(3367);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,405,_ctx);
				}
				}
				break;
			}
			setState(3380);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
			case 1:
				{
				setState(3370);
				match(SORT);
				setState(3371);
				match(BY);
				setState(3372);
				sortItem();
				setState(3377);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,407,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3373);
						match(T__2);
						setState(3374);
						sortItem();
						}
						}
					}
					setState(3379);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,407,_ctx);
				}
				}
				break;
			}
			setState(3392);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
			case 1:
				{
				setState(3382);
				match(DISTRIBUTED);
				setState(3383);
				match(BY);
				setState(3384);
				sortItem();
				setState(3389);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,409,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3385);
						match(T__2);
						setState(3386);
						sortItem();
						}
						}
					}
					setState(3391);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,409,_ctx);
				}
				}
				break;
			}
			setState(3396);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,411,_ctx) ) {
			case 1:
				{
				setState(3394);
				match(LIMIT);
				setState(3395);
				limitStat();
				}
				break;
			}
			setState(3404);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
			case 1:
				{
				setState(3398);
				match(FETCH);
				setState(3399);
				match(FIRST);
				setState(3400);
				number();
				setState(3401);
				match(ROWS);
				setState(3402);
				match(ONLY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitStatContext extends ParserRuleContext {
		public Token rowCount;
		public Token offset;
		public List<TerminalNode> INTEGER_VALUE() { return getTokens(EntireSqlParser.INTEGER_VALUE); }
		public TerminalNode INTEGER_VALUE(int i) {
			return getToken(EntireSqlParser.INTEGER_VALUE, i);
		}
		public TerminalNode ALL() { return getToken(EntireSqlParser.ALL, 0); }
		public TerminalNode OFFSET() { return getToken(EntireSqlParser.OFFSET, 0); }
		public LimitStatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitStat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterLimitStat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitLimitStat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitLimitStat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitStatContext limitStat() throws RecognitionException {
		LimitStatContext _localctx = new LimitStatContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_limitStat);
		int _la;
		try {
			setState(3414);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3406);
				((LimitStatContext)_localctx).rowCount = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==INTEGER_VALUE) ) {
					((LimitStatContext)_localctx).rowCount = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3409);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
				case 1:
					{
					setState(3407);
					match(OFFSET);
					setState(3408);
					match(INTEGER_VALUE);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3411);
				((LimitStatContext)_localctx).offset = match(INTEGER_VALUE);
				setState(3412);
				match(T__2);
				setState(3413);
				((LimitStatContext)_localctx).rowCount = match(INTEGER_VALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryTermContext extends ParserRuleContext {
		public QueryTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryTerm; }

		public QueryTermContext() { }
		public void copyFrom(QueryTermContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class QueryTermDefaultContext extends QueryTermContext {
		public QueryPrimaryContext queryPrimary() {
			return getRuleContext(QueryPrimaryContext.class,0);
		}
		public QueryTermDefaultContext(QueryTermContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterQueryTermDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitQueryTermDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitQueryTermDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetOperationContext extends QueryTermContext {
		public QueryTermContext left;
		public Token operator;
		public QueryTermContext right;
		public List<QueryTermContext> queryTerm() {
			return getRuleContexts(QueryTermContext.class);
		}
		public QueryTermContext queryTerm(int i) {
			return getRuleContext(QueryTermContext.class,i);
		}
		public TerminalNode INTERSECT() { return getToken(EntireSqlParser.INTERSECT, 0); }
		public TerminalNode MINUSES() { return getToken(EntireSqlParser.MINUSES, 0); }
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public TerminalNode UNION() { return getToken(EntireSqlParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(EntireSqlParser.EXCEPT, 0); }
		public SetOperationContext(QueryTermContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterSetOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitSetOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitSetOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryTermContext queryTerm() throws RecognitionException {
		return queryTerm(0);
	}

	private QueryTermContext queryTerm(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		QueryTermContext _localctx = new QueryTermContext(_ctx, _parentState);
		QueryTermContext _prevctx = _localctx;
		int _startState = 136;
		enterRecursionRule(_localctx, 136, RULE_queryTerm, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new QueryTermDefaultContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(3417);
			queryPrimary();
			}
			_ctx.stop = _input.LT(-1);
			setState(3433);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,418,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3431);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
					case 1:
						{
						_localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
						((SetOperationContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
						setState(3419);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(3420);
						((SetOperationContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==INTERSECT || _la==MINUSES) ) {
							((SetOperationContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3422);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ALL || _la==DISTINCT) {
							{
							setState(3421);
							setQuantifier();
							}
						}

						setState(3424);
						((SetOperationContext)_localctx).right = queryTerm(3);
						}
						break;
					case 2:
						{
						_localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
						((SetOperationContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
						setState(3425);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(3426);
						((SetOperationContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==EXCEPT || _la==UNION) ) {
							((SetOperationContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3428);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ALL || _la==DISTINCT) {
							{
							setState(3427);
							setQuantifier();
							}
						}

						setState(3430);
						((SetOperationContext)_localctx).right = queryTerm(2);
						}
						break;
					}
					}
				}
				setState(3435);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,418,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class QueryPrimaryContext extends ParserRuleContext {
		public QueryPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryPrimary; }

		public QueryPrimaryContext() { }
		public void copyFrom(QueryPrimaryContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubqueryContext extends QueryPrimaryContext {
		public QueryNoWithContext queryNoWith() {
			return getRuleContext(QueryNoWithContext.class,0);
		}
		public SubqueryContext(QueryPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class QueryPrimaryDefaultContext extends QueryPrimaryContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public QueryPrimaryDefaultContext(QueryPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterQueryPrimaryDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitQueryPrimaryDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitQueryPrimaryDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableContext extends QueryPrimaryContext {
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TableContext(QueryPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryPrimaryContext queryPrimary() throws RecognitionException {
		QueryPrimaryContext _localctx = new QueryPrimaryContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_queryPrimary);
		try {
			setState(3443);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case RMTSELECT:
				_localctx = new QueryPrimaryDefaultContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3436);
				querySpecification();
				}
				break;
			case TABLE:
				_localctx = new TableContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3437);
				match(TABLE);
				setState(3438);
				qualifiedName();
				}
				break;
			case T__1:
				_localctx = new SubqueryContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3439);
				match(T__1);
				setState(3440);
				queryNoWith();
				setState(3441);
				match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertValuesContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(EntireSqlParser.VALUES, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public InsertValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertValues; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterInsertValues(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitInsertValues(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitInsertValues(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertValuesContext insertValues() throws RecognitionException {
		InsertValuesContext _localctx = new InsertValuesContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_insertValues);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3445);
			match(VALUES);
			setState(3446);
			expression();
			setState(3451);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,420,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3447);
					match(T__2);
					setState(3448);
					expression();
					}
					}
				}
				setState(3453);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,420,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortItemContext extends ParserRuleContext {
		public Token ordering;
		public Token nullOrdering;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(EntireSqlParser.NULLS, 0); }
		public TerminalNode ASC() { return getToken(EntireSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(EntireSqlParser.DESC, 0); }
		public TerminalNode FIRST() { return getToken(EntireSqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(EntireSqlParser.LAST, 0); }
		public SortItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterSortItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitSortItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitSortItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortItemContext sortItem() throws RecognitionException {
		SortItemContext _localctx = new SortItemContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_sortItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3454);
			expression();
			setState(3456);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
			case 1:
				{
				setState(3455);
				((SortItemContext)_localctx).ordering = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((SortItemContext)_localctx).ordering = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(3460);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
			case 1:
				{
				setState(3458);
				match(NULLS);
				setState(3459);
				((SortItemContext)_localctx).nullOrdering = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
					((SortItemContext)_localctx).nullOrdering = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationContext extends ParserRuleContext {
		public BooleanExpressionContext where;
		public BooleanExpressionContext having;
		public List<SelectItemContext> selectItem() {
			return getRuleContexts(SelectItemContext.class);
		}
		public SelectItemContext selectItem(int i) {
			return getRuleContext(SelectItemContext.class,i);
		}
		public TerminalNode SELECT() { return getToken(EntireSqlParser.SELECT, 0); }
		public TerminalNode RMTSELECT() { return getToken(EntireSqlParser.RMTSELECT, 0); }
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public TerminalNode FROM() { return getToken(EntireSqlParser.FROM, 0); }
		public List<RelationContext> relation() {
			return getRuleContexts(RelationContext.class);
		}
		public RelationContext relation(int i) {
			return getRuleContext(RelationContext.class,i);
		}
		public TerminalNode WHERE() { return getToken(EntireSqlParser.WHERE, 0); }
		public TerminalNode GROUP() { return getToken(EntireSqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(EntireSqlParser.BY, 0); }
		public GroupByContext groupBy() {
			return getRuleContext(GroupByContext.class,0);
		}
		public TerminalNode HAVING() { return getToken(EntireSqlParser.HAVING, 0); }
		public List<BooleanExpressionContext> booleanExpression() {
			return getRuleContexts(BooleanExpressionContext.class);
		}
		public BooleanExpressionContext booleanExpression(int i) {
			return getRuleContext(BooleanExpressionContext.class,i);
		}
		public TerminalNode WITH() { return getToken(EntireSqlParser.WITH, 0); }
		public TerminalNode ROLLUP() { return getToken(EntireSqlParser.ROLLUP, 0); }
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitQuerySpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitQuerySpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_querySpecification);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3462);
			_la = _input.LA(1);
			if ( !(_la==SELECT || _la==RMTSELECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3464);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
			case 1:
				{
				setState(3463);
				setQuantifier();
				}
				break;
			}
			setState(3466);
			selectItem();
			setState(3471);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,424,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3467);
					match(T__2);
					setState(3468);
					selectItem();
					}
					}
				}
				setState(3473);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,424,_ctx);
			}
			setState(3483);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
			case 1:
				{
				setState(3474);
				match(FROM);
				setState(3475);
				relation(0);
				setState(3480);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,425,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3476);
						match(T__2);
						setState(3477);
						relation(0);
						}
						}
					}
					setState(3482);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,425,_ctx);
				}
				}
				break;
			}
			setState(3487);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
			case 1:
				{
				setState(3485);
				match(WHERE);
				setState(3486);
				((QuerySpecificationContext)_localctx).where = booleanExpression(0);
				}
				break;
			}
			setState(3496);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
			case 1:
				{
				setState(3489);
				match(GROUP);
				setState(3490);
				match(BY);
				setState(3491);
				groupBy();
				setState(3494);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
				case 1:
					{
					setState(3492);
					match(WITH);
					setState(3493);
					match(ROLLUP);
					}
					break;
				}
				}
				break;
			}
			setState(3500);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,430,_ctx) ) {
			case 1:
				{
				setState(3498);
				match(HAVING);
				setState(3499);
				((QuerySpecificationContext)_localctx).having = booleanExpression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByContext extends ParserRuleContext {
		public List<GroupingElementContext> groupingElement() {
			return getRuleContexts(GroupingElementContext.class);
		}
		public GroupingElementContext groupingElement(int i) {
			return getRuleContext(GroupingElementContext.class,i);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public GroupByContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupBy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGroupBy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGroupBy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGroupBy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByContext groupBy() throws RecognitionException {
		GroupByContext _localctx = new GroupByContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_groupBy);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3503);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,431,_ctx) ) {
			case 1:
				{
				setState(3502);
				setQuantifier();
				}
				break;
			}
			setState(3505);
			groupingElement();
			setState(3510);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,432,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3506);
					match(T__2);
					setState(3507);
					groupingElement();
					}
					}
				}
				setState(3512);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,432,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingElementContext extends ParserRuleContext {
		public GroupingElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingElement; }

		public GroupingElementContext() { }
		public void copyFrom(GroupingElementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class MultipleGroupingSetsContext extends GroupingElementContext {
		public TerminalNode GROUPING() { return getToken(EntireSqlParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(EntireSqlParser.SETS, 0); }
		public List<GroupingSetContext> groupingSet() {
			return getRuleContexts(GroupingSetContext.class);
		}
		public GroupingSetContext groupingSet(int i) {
			return getRuleContext(GroupingSetContext.class,i);
		}
		public MultipleGroupingSetsContext(GroupingElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterMultipleGroupingSets(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitMultipleGroupingSets(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitMultipleGroupingSets(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SingleGroupingSetContext extends GroupingElementContext {
		public GroupingSetContext groupingSet() {
			return getRuleContext(GroupingSetContext.class,0);
		}
		public SingleGroupingSetContext(GroupingElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterSingleGroupingSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitSingleGroupingSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitSingleGroupingSet(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CubeContext extends GroupingElementContext {
		public TerminalNode CUBE() { return getToken(EntireSqlParser.CUBE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public CubeContext(GroupingElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterCube(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitCube(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitCube(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RollupContext extends GroupingElementContext {
		public TerminalNode ROLLUP() { return getToken(EntireSqlParser.ROLLUP, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public RollupContext(GroupingElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterRollup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitRollup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitRollup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingElementContext groupingElement() throws RecognitionException {
		GroupingElementContext _localctx = new GroupingElementContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_groupingElement);
		int _la;
		try {
			setState(3553);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
			case 1:
				_localctx = new SingleGroupingSetContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3513);
				groupingSet();
				}
				break;
			case 2:
				_localctx = new RollupContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3514);
				match(ROLLUP);
				setState(3515);
				match(T__1);
				setState(3524);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
				case 1:
					{
					setState(3516);
					expression();
					setState(3521);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(3517);
						match(T__2);
						setState(3518);
						expression();
						}
						}
						setState(3523);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(3526);
				match(T__3);
				}
				break;
			case 3:
				_localctx = new CubeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3527);
				match(CUBE);
				setState(3528);
				match(T__1);
				setState(3537);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
				case 1:
					{
					setState(3529);
					expression();
					setState(3534);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(3530);
						match(T__2);
						setState(3531);
						expression();
						}
						}
						setState(3536);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(3539);
				match(T__3);
				}
				break;
			case 4:
				_localctx = new MultipleGroupingSetsContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3540);
				match(GROUPING);
				setState(3541);
				match(SETS);
				setState(3542);
				match(T__1);
				setState(3543);
				groupingSet();
				setState(3548);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__2) {
					{
					{
					setState(3544);
					match(T__2);
					setState(3545);
					groupingSet();
					}
					}
					setState(3550);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3551);
				match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingSetContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public GroupingSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGroupingSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGroupingSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGroupingSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingSetContext groupingSet() throws RecognitionException {
		GroupingSetContext _localctx = new GroupingSetContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_groupingSet);
		int _la;
		try {
			setState(3568);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3555);
				match(T__1);
				setState(3564);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
				case 1:
					{
					setState(3556);
					expression();
					setState(3561);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(3557);
						match(T__2);
						setState(3558);
						expression();
						}
						}
						setState(3563);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(3566);
				match(T__3);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3567);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NamedQueryContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode AS() { return getToken(EntireSqlParser.AS, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColumnAliasesContext columnAliases() {
			return getRuleContext(ColumnAliasesContext.class,0);
		}
		public NamedQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namedQuery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterNamedQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitNamedQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitNamedQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamedQueryContext namedQuery() throws RecognitionException {
		NamedQueryContext _localctx = new NamedQueryContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_namedQuery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3570);
			((NamedQueryContext)_localctx).name = identifier(0);
			setState(3572);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__1) {
				{
				setState(3571);
				columnAliases();
				}
			}

			setState(3574);
			match(AS);
			setState(3575);
			match(T__1);
			setState(3576);
			query();
			setState(3577);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetQuantifierContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(EntireSqlParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(EntireSqlParser.ALL, 0); }
		public SetQuantifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setQuantifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterSetQuantifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitSetQuantifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitSetQuantifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetQuantifierContext setQuantifier() throws RecognitionException {
		SetQuantifierContext _localctx = new SetQuantifierContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_setQuantifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3579);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectItemContext extends ParserRuleContext {
		public SelectItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectItem; }

		public SelectItemContext() { }
		public void copyFrom(SelectItemContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectAllContext extends SelectItemContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode ASTERISK() { return getToken(EntireSqlParser.ASTERISK, 0); }
		public SelectAllContext(SelectItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterSelectAll(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitSelectAll(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitSelectAll(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectSingleContext extends SelectItemContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public AliasNameContext aliasName() {
			return getRuleContext(AliasNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(EntireSqlParser.AS, 0); }
		public SelectSingleContext(SelectItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterSelectSingle(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitSelectSingle(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitSelectSingle(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectItemContext selectItem() throws RecognitionException {
		SelectItemContext _localctx = new SelectItemContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_selectItem);
		try {
			setState(3595);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
			case 1:
				_localctx = new SelectSingleContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3581);
				expression();
				setState(3586);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,444,_ctx) ) {
				case 1:
					{
					setState(3583);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
					case 1:
						{
						setState(3582);
						match(AS);
						}
						break;
					}
					setState(3585);
					aliasName();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SelectAllContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3588);
				if (!(isExploreType())) throw new FailedPredicateException(this, "isExploreType()");
				setState(3589);
				qualifiedName();
				setState(3590);
				match(T__4);
				setState(3591);
				match(ASTERISK);
				}
				break;
			case 3:
				_localctx = new SelectAllContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3593);
				if (!(isExploreType())) throw new FailedPredicateException(this, "isExploreType()");
				setState(3594);
				match(ASTERISK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public AliasNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aliasName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterAliasName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitAliasName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitAliasName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasNameContext aliasName() throws RecognitionException {
		AliasNameContext _localctx = new AliasNameContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_aliasName);
		try {
			setState(3599);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case ALL:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case AT:
			case BERNOULLI:
			case BETWEEN:
			case BY:
			case CALL:
			case CASCADE:
			case CASE:
			case CAST:
			case CATALOGS:
			case COLUMN:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONSTRAINT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_PATH:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATA:
			case DATE:
			case DAY:
			case DEALLOCATE:
			case DESC:
			case DESCRIBE:
			case DISTINCT:
			case DISTRIBUTED:
			case DROP:
			case ELSE:
			case ESCAPE:
			case EXCEPT:
			case EXCLUDING:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FOR:
			case FORMAT:
			case FULL:
			case FUNCTIONS:
			case GRANT:
			case GRANTS:
			case GRAPHVIZ:
			case GROUP:
			case GROUPING:
			case HAVING:
			case HOUR:
			case IF:
			case IN:
			case INCLUDING:
			case INNER:
			case INPUT:
			case INSERT:
			case INTERSECT:
			case MINUSES:
			case INTERVAL:
			case INTO:
			case IO:
			case IS:
			case ISOLATION:
			case JSON:
			case JOIN:
			case LAST:
			case LATERAL:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LIMIT:
			case LISTAGG:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOGICAL:
			case MAP:
			case MINUTE:
			case MONTH:
			case MODIFY:
			case NATURAL:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NORMALIZE:
			case NULLIF:
			case NULLS:
			case ON:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case ORDINALITY:
			case OUTER:
			case OUTPUT:
			case OVER:
			case PARTITION:
			case PARTITIONS:
			case PATH:
			case POSITION:
			case PRECEDING:
			case PREPARE:
			case PRIVILEGES:
			case PROPERTIES:
			case PUBLIC:
			case RANGE:
			case READ:
			case RECURSIVE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTRICT:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SCHEMA:
			case SCHEMAS:
			case SECOND:
			case SERIALIZABLE:
			case SESSION:
			case SET:
			case SETS:
			case SHOW:
			case SOME:
			case START:
			case STATS:
			case SUBSTRING:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRANSACTION:
			case TRY_CAST:
			case TYPE:
			case TRUNCATE:
			case UPDATE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNION:
			case UNNEST:
			case USE:
			case VALIDATE:
			case VERBOSE:
			case VIEW:
			case WHEN:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case SEMI:
			case SORT:
			case OFFSET:
			case DEFAULT:
			case TABLESPACE:
			case EXTERNAL:
			case PURGE:
			case TEMPORARY:
			case PRIMARY:
			case KEY:
			case DISABLE:
			case NOVALIDATE:
			case FOREIGN:
			case REFERENCES:
			case PARTITIONED:
			case CLUSTERED:
			case SORTED:
			case BUCKETS:
			case SKEWED:
			case STORED:
			case DELIMITED:
			case FIELDS:
			case TERMINATED:
			case ESCAPED:
			case COLLECTION:
			case ITEMS:
			case KEYS:
			case LINES:
			case DEFINED:
			case SEQUENCEFILE:
			case TEXTFILE:
			case RCFILE:
			case ORC:
			case ORCFILE:
			case PARQUET:
			case AVRO:
			case JSONFILE:
			case INPUTFORMAT:
			case OUTPUTFORMAT:
			case SERDE:
			case SERDEPROPERTIES:
			case LOCATION:
			case TBLPROPERTIES:
			case RELY:
			case EXCHANGE:
			case RECOVER:
			case ARCHIVE:
			case UNARCHIVE:
			case IGNORE:
			case PROTECTION:
			case TOUCH:
			case ENABLE:
			case NO_DROP:
			case OFFLINE:
			case COMPACT:
			case WAIT:
			case CONCATENATE:
			case CHANGE:
			case AFTER:
			case DEFERRED:
			case REBUILD:
			case INDEX:
			case IDXPROPERTIES:
			case FUNCTION:
			case JAR:
			case FILE:
			case DATABASE:
			case DBPROPERTIES:
			case OWNER:
			case RELOAD:
			case USER:
			case ROLE:
			case FILEFORMAT:
			case LOAD:
			case LOCAL:
			case INPATH:
			case DIRECTORY:
			case VACUUM:
			case LIST:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case EVERY:
			case INCLUSIVE:
			case EXCLUSIVE:
			case TEMPLATE:
			case ENCODING:
			case LOG:
			case ERRORS:
			case SEGMENT:
			case REJECT:
			case PERCENT:
			case WRITABLE:
			case CHECK:
			case UNIQUE:
			case CONCURRENTLY:
			case BITMAP:
			case FORCE:
			case SPLIT:
			case REINDEX:
			case FREEZE:
			case MSCK:
			case REPAIR:
			case FETCH:
			case DEFINITION:
			case LESS:
			case THAN:
			case HASH:
			case NOLOGGING:
			case STRUCT:
			case GLOBAL:
			case PRESERVE:
			case AUTO_INCREMENT:
			case ENGINE:
			case CHARSET:
			case COMPRESS:
			case EXPRESS:
			case REPLICATED:
			case NOCOPIES:
			case SPACE:
			case SHRINK:
			case KEY_BLOCK_SIZE:
			case KEY_DC_SIZE:
			case AUTOEXTEND:
			case NEXT:
			case OFF:
			case MATCHED:
			case MERGE:
			case OUTFILE:
			case OPTIONALLY:
			case ENCLOSED:
			case DOUBLE_ENCLOSED:
			case NULL_VALUE:
			case OUTFILEMODE:
			case HDFS:
			case WRITEMODE:
			case NORMAL:
			case OVERWRITES:
			case FILECOUNT:
			case FILESIZE:
			case CHARACTER:
			case GBK:
			case UTF8:
			case HEAD:
			case RMTSELECT:
			case INFILE:
			case DATA_FORMAT:
			case SEPARATOR:
			case BLANKS:
			case AUTOFILL:
			case LENGTH:
			case TABLE_FIELDS:
			case MAX_BAD_RECORDS:
			case DATETIME:
			case TRACE:
			case TRACE_PATH:
			case NOSPLIT:
			case PARALLEL:
			case MAX_DATA_PROCESSORS:
			case MIN_CHUNK_SIZE:
			case SKIP_BAD_FILE:
			case NUM:
			case FILE_FORMAT:
			case IMMEDIATE:
			case STARTING:
			case ENDING:
			case INITIALLY:
			case REFRESH:
			case ACTIVATE:
			case LOGGED:
			case EMPTY:
			case SEQUENCE:
			case INCREMENT:
			case MINVALUE:
			case MAXVALUE:
			case OVERLAY:
			case PLACING:
			case TRIM:
			case LTRIM:
			case RTRIM:
			case BOTH:
			case TO_CHAR:
			case AGE:
			case DATE_PART:
			case ISFINITE:
			case INT:
			case UNSIGNED:
			case REGEXP:
			case BINARY:
			case LEADING:
			case TRAILING:
			case RLIKE:
			case DATE_SUB:
			case ADDDATE:
			case DATE_ADD:
			case YEAR_MONTH:
			case DAY_HOUR:
			case DAY_MINUTE:
			case DAY_SECOND:
			case HOUR_MINUTE:
			case HOUR_SECOND:
			case MINUTE_SECOND:
			case UNKNOWN:
			case IDENTIFIER:
			case DIGIT_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3597);
				identifier(0);
				}
				break;
			case STRING:
			case UNICODE_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3598);
				string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelationContext extends ParserRuleContext {
		public RelationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation; }

		public RelationContext() { }
		public void copyFrom(RelationContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class RelationDefaultContext extends RelationContext {
		public SampledRelationContext sampledRelation() {
			return getRuleContext(SampledRelationContext.class,0);
		}
		public RelationDefaultContext(RelationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterRelationDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitRelationDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitRelationDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JoinRelationContext extends RelationContext {
		public RelationContext left;
		public SampledRelationContext right;
		public SampledRelationContext rightRelation;
		public RelationContext relation() {
			return getRuleContext(RelationContext.class,0);
		}
		public TerminalNode CROSS() { return getToken(EntireSqlParser.CROSS, 0); }
		public TerminalNode JOIN() { return getToken(EntireSqlParser.JOIN, 0); }
		public JoinTypeContext joinType() {
			return getRuleContext(JoinTypeContext.class,0);
		}
		public JoinCriteriaContext joinCriteria() {
			return getRuleContext(JoinCriteriaContext.class,0);
		}
		public TerminalNode NATURAL() { return getToken(EntireSqlParser.NATURAL, 0); }
		public SampledRelationContext sampledRelation() {
			return getRuleContext(SampledRelationContext.class,0);
		}
		public JoinRelationContext(RelationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterJoinRelation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitJoinRelation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitJoinRelation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationContext relation() throws RecognitionException {
		return relation(0);
	}

	private RelationContext relation(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		RelationContext _localctx = new RelationContext(_ctx, _parentState);
		RelationContext _prevctx = _localctx;
		int _startState = 160;
		enterRecursionRule(_localctx, 160, RULE_relation, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new RelationDefaultContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(3602);
			sampledRelation();
			}
			_ctx.stop = _input.LT(-1);
			setState(3630);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,449,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JoinRelationContext(new RelationContext(_parentctx, _parentState));
					((JoinRelationContext)_localctx).left = _prevctx;
					pushNewRecursionContext(_localctx, _startState, RULE_relation);
					setState(3604);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(3626);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
					case 1:
						{
						setState(3605);
						match(CROSS);
						setState(3606);
						match(JOIN);
						setState(3607);
						((JoinRelationContext)_localctx).right = sampledRelation();
						}
						break;
					case 2:
						{
						setState(3608);
						if (!(isMysqlType())) throw new FailedPredicateException(this, "isMysqlType()");
						setState(3609);
						joinType();
						setState(3610);
						match(JOIN);
						setState(3611);
						((JoinRelationContext)_localctx).rightRelation = sampledRelation();
						setState(3613);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
						case 1:
							{
							setState(3612);
							joinCriteria();
							}
							break;
						}
						}
						break;
					case 3:
						{
						setState(3615);
						if (!(!isMysqlType())) throw new FailedPredicateException(this, "!isMysqlType()");
						setState(3616);
						joinType();
						setState(3617);
						match(JOIN);
						setState(3618);
						((JoinRelationContext)_localctx).rightRelation = sampledRelation();
						setState(3619);
						joinCriteria();
						}
						break;
					case 4:
						{
						setState(3621);
						match(NATURAL);
						setState(3622);
						joinType();
						setState(3623);
						match(JOIN);
						setState(3624);
						((JoinRelationContext)_localctx).right = sampledRelation();
						}
						break;
					}
					}
					}
				}
				setState(3632);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,449,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class JoinTypeContext extends ParserRuleContext {
		public TerminalNode INNER() { return getToken(EntireSqlParser.INNER, 0); }
		public TerminalNode LEFT() { return getToken(EntireSqlParser.LEFT, 0); }
		public TerminalNode SEMI() { return getToken(EntireSqlParser.SEMI, 0); }
		public TerminalNode OUTER() { return getToken(EntireSqlParser.OUTER, 0); }
		public TerminalNode RIGHT() { return getToken(EntireSqlParser.RIGHT, 0); }
		public TerminalNode FULL() { return getToken(EntireSqlParser.FULL, 0); }
		public JoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterJoinType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitJoinType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitJoinType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinTypeContext joinType() throws RecognitionException {
		JoinTypeContext _localctx = new JoinTypeContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_joinType);
		int _la;
		try {
			setState(3652);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INNER:
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3634);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INNER) {
					{
					setState(3633);
					match(INNER);
					}
				}

				}
				break;
			case LEFT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3636);
				match(LEFT);
				setState(3638);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEMI) {
					{
					setState(3637);
					match(SEMI);
					}
				}

				setState(3641);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3640);
					match(OUTER);
					}
				}

				}
				break;
			case RIGHT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3643);
				match(RIGHT);
				setState(3645);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3644);
					match(OUTER);
					}
				}

				}
				break;
			case FULL:
				enterOuterAlt(_localctx, 4);
				{
				setState(3647);
				match(FULL);
				setState(3649);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3648);
					match(OUTER);
					}
				}

				}
				break;
			case SEMI:
				enterOuterAlt(_localctx, 5);
				{
				setState(3651);
				match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinCriteriaContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(EntireSqlParser.ON, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(EntireSqlParser.USING, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public JoinCriteriaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinCriteria; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterJoinCriteria(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitJoinCriteria(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitJoinCriteria(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinCriteriaContext joinCriteria() throws RecognitionException {
		JoinCriteriaContext _localctx = new JoinCriteriaContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_joinCriteria);
		int _la;
		try {
			setState(3668);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3654);
				match(ON);
				setState(3655);
				booleanExpression(0);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3656);
				match(USING);
				setState(3657);
				match(T__1);
				setState(3658);
				identifier(0);
				setState(3663);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__2) {
					{
					{
					setState(3659);
					match(T__2);
					setState(3660);
					identifier(0);
					}
					}
					setState(3665);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3666);
				match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SampledRelationContext extends ParserRuleContext {
		public ExpressionContext percentage;
		public AliasedRelationContext aliasedRelation() {
			return getRuleContext(AliasedRelationContext.class,0);
		}
		public TerminalNode TABLESAMPLE() { return getToken(EntireSqlParser.TABLESAMPLE, 0); }
		public SampleTypeContext sampleType() {
			return getRuleContext(SampleTypeContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SampledRelationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sampledRelation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterSampledRelation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitSampledRelation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitSampledRelation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SampledRelationContext sampledRelation() throws RecognitionException {
		SampledRelationContext _localctx = new SampledRelationContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_sampledRelation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3670);
			aliasedRelation();
			setState(3677);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
			case 1:
				{
				setState(3671);
				match(TABLESAMPLE);
				setState(3672);
				sampleType();
				setState(3673);
				match(T__1);
				setState(3674);
				((SampledRelationContext)_localctx).percentage = expression();
				setState(3675);
				match(T__3);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SampleTypeContext extends ParserRuleContext {
		public TerminalNode BERNOULLI() { return getToken(EntireSqlParser.BERNOULLI, 0); }
		public TerminalNode SYSTEM() { return getToken(EntireSqlParser.SYSTEM, 0); }
		public SampleTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sampleType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterSampleType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitSampleType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitSampleType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SampleTypeContext sampleType() throws RecognitionException {
		SampleTypeContext _localctx = new SampleTypeContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_sampleType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3679);
			_la = _input.LA(1);
			if ( !(_la==BERNOULLI || _la==SYSTEM) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasedRelationContext extends ParserRuleContext {
		public RelationPrimaryContext relationPrimary() {
			return getRuleContext(RelationPrimaryContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(EntireSqlParser.AS, 0); }
		public ColumnAliasesContext columnAliases() {
			return getRuleContext(ColumnAliasesContext.class,0);
		}
		public AliasedRelationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aliasedRelation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterAliasedRelation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitAliasedRelation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitAliasedRelation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasedRelationContext aliasedRelation() throws RecognitionException {
		AliasedRelationContext _localctx = new AliasedRelationContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_aliasedRelation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3681);
			relationPrimary();
			setState(3689);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
			case 1:
				{
				setState(3683);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
				case 1:
					{
					setState(3682);
					match(AS);
					}
					break;
				}
				setState(3685);
				identifier(0);
				setState(3687);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,460,_ctx) ) {
				case 1:
					{
					setState(3686);
					columnAliases();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnAliasesContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public ColumnAliasesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnAliases; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterColumnAliases(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitColumnAliases(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitColumnAliases(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnAliasesContext columnAliases() throws RecognitionException {
		ColumnAliasesContext _localctx = new ColumnAliasesContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_columnAliases);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3691);
			match(T__1);
			setState(3692);
			identifier(0);
			setState(3697);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__2) {
				{
				{
				setState(3693);
				match(T__2);
				setState(3694);
				identifier(0);
				}
				}
				setState(3699);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3700);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthDescContext extends ParserRuleContext {
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public LengthDescContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthDesc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterLengthDesc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitLengthDesc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitLengthDesc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthDescContext lengthDesc() throws RecognitionException {
		LengthDescContext _localctx = new LengthDescContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_lengthDesc);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3702);
			match(T__1);
			setState(3703);
			number();
			setState(3704);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnAliasesByOrderContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<LengthDescContext> lengthDesc() {
			return getRuleContexts(LengthDescContext.class);
		}
		public LengthDescContext lengthDesc(int i) {
			return getRuleContext(LengthDescContext.class,i);
		}
		public TerminalNode ASC() { return getToken(EntireSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(EntireSqlParser.DESC, 0); }
		public ColumnAliasesByOrderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnAliasesByOrder; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterColumnAliasesByOrder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitColumnAliasesByOrder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitColumnAliasesByOrder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnAliasesByOrderContext columnAliasesByOrder() throws RecognitionException {
		ColumnAliasesByOrderContext _localctx = new ColumnAliasesByOrderContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_columnAliasesByOrder);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3706);
			match(T__1);
			setState(3707);
			identifier(0);
			setState(3709);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==T__1) {
				{
				setState(3708);
				lengthDesc();
				}
			}

			setState(3718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__2) {
				{
				{
				setState(3711);
				match(T__2);
				setState(3712);
				identifier(0);
				setState(3714);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__1) {
					{
					setState(3713);
					lengthDesc();
					}
				}

				}
				}
				setState(3720);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3722);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(3721);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3724);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelationPrimaryContext extends ParserRuleContext {
		public RelationPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationPrimary; }

		public RelationPrimaryContext() { }
		public void copyFrom(RelationPrimaryContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubqueryRelationContext extends RelationPrimaryContext {
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public SubqueryRelationContext(RelationPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterSubqueryRelation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitSubqueryRelation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitSubqueryRelation(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ParenthesizedRelationContext extends RelationPrimaryContext {
		public RelationContext relation() {
			return getRuleContext(RelationContext.class,0);
		}
		public ParenthesizedRelationContext(RelationPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterParenthesizedRelation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitParenthesizedRelation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitParenthesizedRelation(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnnestContext extends RelationPrimaryContext {
		public TerminalNode UNNEST() { return getToken(EntireSqlParser.UNNEST, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode WITH() { return getToken(EntireSqlParser.WITH, 0); }
		public TerminalNode ORDINALITY() { return getToken(EntireSqlParser.ORDINALITY, 0); }
		public UnnestContext(RelationPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterUnnest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitUnnest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitUnnest(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LateralContext extends RelationPrimaryContext {
		public TerminalNode LATERAL() { return getToken(EntireSqlParser.LATERAL, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public LateralContext(RelationPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterLateral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitLateral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitLateral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableNameContext extends RelationPrimaryContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(EntireSqlParser.PARTITION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TableNameContext(RelationPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationPrimaryContext relationPrimary() throws RecognitionException {
		RelationPrimaryContext _localctx = new RelationPrimaryContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_relationPrimary);
		int _la;
		try {
			setState(3762);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
			case 1:
				_localctx = new TableNameContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3726);
				qualifiedName();
				setState(3732);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
				case 1:
					{
					setState(3727);
					match(PARTITION);
					setState(3728);
					match(T__1);
					setState(3729);
					identifier(0);
					setState(3730);
					match(T__3);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SubqueryRelationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3734);
				match(T__1);
				setState(3735);
				query();
				setState(3736);
				match(T__3);
				}
				break;
			case 3:
				_localctx = new UnnestContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3738);
				match(UNNEST);
				setState(3739);
				match(T__1);
				setState(3740);
				expression();
				setState(3745);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__2) {
					{
					{
					setState(3741);
					match(T__2);
					setState(3742);
					expression();
					}
					}
					setState(3747);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3748);
				match(T__3);
				setState(3751);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
				case 1:
					{
					setState(3749);
					match(WITH);
					setState(3750);
					match(ORDINALITY);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new LateralContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3753);
				match(LATERAL);
				setState(3754);
				match(T__1);
				setState(3755);
				query();
				setState(3756);
				match(T__3);
				}
				break;
			case 5:
				_localctx = new ParenthesizedRelationContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3758);
				match(T__1);
				setState(3759);
				relation(0);
				setState(3760);
				match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3764);
			booleanExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionSpecContext extends ParserRuleContext {
		public List<PartitionInfoContext> partitionInfo() {
			return getRuleContexts(PartitionInfoContext.class);
		}
		public PartitionInfoContext partitionInfo(int i) {
			return getRuleContext(PartitionInfoContext.class,i);
		}
		public PartitionSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterPartitionSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitPartitionSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitPartitionSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionSpecContext partitionSpec() throws RecognitionException {
		PartitionSpecContext _localctx = new PartitionSpecContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_partitionSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3766);
			match(T__1);
			setState(3767);
			partitionInfo();
			setState(3772);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__2) {
				{
				{
				setState(3768);
				match(T__2);
				setState(3769);
				partitionInfo();
				}
				}
				setState(3774);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3775);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionInfoContext extends ParserRuleContext {
		public IdentifierContext aliasname;
		public ValueExpressionContext partitionname;
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TerminalNode EQ() { return getToken(EntireSqlParser.EQ, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PartitionInfoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionInfo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterPartitionInfo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitPartitionInfo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitPartitionInfo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionInfoContext partitionInfo() throws RecognitionException {
		PartitionInfoContext _localctx = new PartitionInfoContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_partitionInfo);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3780);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
			case 1:
				{
				setState(3777);
				((PartitionInfoContext)_localctx).aliasname = identifier(0);
				setState(3778);
				match(EQ);
				}
				break;
			}
			setState(3782);
			((PartitionInfoContext)_localctx).partitionname = valueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanExpressionContext extends ParserRuleContext {
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanExpression; }

		public BooleanExpressionContext() { }
		public void copyFrom(BooleanExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LogicalNotContext extends BooleanExpressionContext {
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public LogicalNotContext(BooleanExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterLogicalNot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitLogicalNot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitLogicalNot(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PredicatedContext extends BooleanExpressionContext {
		public ValueExpressionContext valueExpression;
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicatedContext(BooleanExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterPredicated(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitPredicated(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitPredicated(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LogicalBinaryContext extends BooleanExpressionContext {
		public BooleanExpressionContext left;
		public Token operator;
		public BooleanExpressionContext right;
		public List<BooleanExpressionContext> booleanExpression() {
			return getRuleContexts(BooleanExpressionContext.class);
		}
		public BooleanExpressionContext booleanExpression(int i) {
			return getRuleContext(BooleanExpressionContext.class,i);
		}
		public TerminalNode AND() { return getToken(EntireSqlParser.AND, 0); }
		public TerminalNode OR() { return getToken(EntireSqlParser.OR, 0); }
		public LogicalBinaryContext(BooleanExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterLogicalBinary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitLogicalBinary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitLogicalBinary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanExpressionContext booleanExpression() throws RecognitionException {
		return booleanExpression(0);
	}

	private BooleanExpressionContext booleanExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BooleanExpressionContext _localctx = new BooleanExpressionContext(_ctx, _parentState);
		BooleanExpressionContext _prevctx = _localctx;
		int _startState = 186;
		enterRecursionRule(_localctx, 186, RULE_booleanExpression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3791);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
			case 1:
				{
				_localctx = new PredicatedContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(3785);
				((PredicatedContext)_localctx).valueExpression = valueExpression(0);
				setState(3787);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
				case 1:
					{
					setState(3786);
					predicate(((PredicatedContext)_localctx).valueExpression);
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new LogicalNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3789);
				match(NOT);
				setState(3790);
				booleanExpression(3);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3801);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,476,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3799);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,475,_ctx) ) {
					case 1:
						{
						_localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState));
						((LogicalBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						setState(3793);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(3794);
						((LogicalBinaryContext)_localctx).operator = match(AND);
						setState(3795);
						((LogicalBinaryContext)_localctx).right = booleanExpression(3);
						}
						break;
					case 2:
						{
						_localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState));
						((LogicalBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						setState(3796);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(3797);
						((LogicalBinaryContext)_localctx).operator = match(OR);
						setState(3798);
						((LogicalBinaryContext)_localctx).right = booleanExpression(2);
						}
						break;
					}
					}
				}
				setState(3803);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,476,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public ParserRuleContext value;
		public PredicateContext(ParserRuleContext parent, int invokingState) { super(parent, invokingState); }
		public PredicateContext(ParserRuleContext parent, int invokingState, ParserRuleContext value) {
			super(parent, invokingState);
			this.value = value;
		}
		@Override public int getRuleIndex() { return RULE_predicate; }

		public PredicateContext() { }
		public void copyFrom(PredicateContext ctx) {
			super.copyFrom(ctx);
			this.value = ctx.value;
		}
	}
	public static class RlikeContext extends PredicateContext {
		public ValueExpressionContext pattern;
		public TerminalNode RLIKE() { return getToken(EntireSqlParser.RLIKE, 0); }
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public RlikeContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterRlike(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitRlike(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitRlike(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RegexpContext extends PredicateContext {
		public ValueExpressionContext pattern;
		public TerminalNode REGEXP() { return getToken(EntireSqlParser.REGEXP, 0); }
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public RegexpContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterRegexp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitRegexp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitRegexp(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ComparisonContext extends PredicateContext {
		public ValueExpressionContext right;
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public ComparisonContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterComparison(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitComparison(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitComparison(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LikeContext extends PredicateContext {
		public ValueExpressionContext pattern;
		public ValueExpressionContext escape;
		public TerminalNode LIKE() { return getToken(EntireSqlParser.LIKE, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(EntireSqlParser.ESCAPE, 0); }
		public LikeContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterLike(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitLike(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitLike(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InSubqueryContext extends PredicateContext {
		public TerminalNode IN() { return getToken(EntireSqlParser.IN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public InSubqueryContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterInSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitInSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitInSubquery(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DistinctFromContext extends PredicateContext {
		public ValueExpressionContext right;
		public TerminalNode IS() { return getToken(EntireSqlParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(EntireSqlParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(EntireSqlParser.FROM, 0); }
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public DistinctFromContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterDistinctFrom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitDistinctFrom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitDistinctFrom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InListContext extends PredicateContext {
		public TerminalNode IN() { return getToken(EntireSqlParser.IN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public InListContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterInList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitInList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitInList(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NullPredicateContext extends PredicateContext {
		public TerminalNode IS() { return getToken(EntireSqlParser.IS, 0); }
		public TerminalNode NULL() { return getToken(EntireSqlParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public NullPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterNullPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitNullPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitNullPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BetweenContext extends PredicateContext {
		public ValueExpressionContext lower;
		public ValueExpressionContext upper;
		public TerminalNode BETWEEN() { return getToken(EntireSqlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(EntireSqlParser.AND, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public BetweenContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterBetween(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitBetween(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitBetween(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class QuantifiedComparisonContext extends PredicateContext {
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public ComparisonQuantifierContext comparisonQuantifier() {
			return getRuleContext(ComparisonQuantifierContext.class,0);
		}
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public QuantifiedComparisonContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterQuantifiedComparison(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitQuantifiedComparison(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitQuantifiedComparison(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate(ParserRuleContext value) throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState(), value);
		enterRule(_localctx, 188, RULE_predicate);
		int _la;
		try {
			setState(3875);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
			case 1:
				_localctx = new ComparisonContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3804);
				comparisonOperator();
				setState(3805);
				((ComparisonContext)_localctx).right = valueExpression(0);
				}
				break;
			case 2:
				_localctx = new QuantifiedComparisonContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3807);
				comparisonOperator();
				setState(3808);
				comparisonQuantifier();
				setState(3809);
				match(T__1);
				setState(3810);
				query();
				setState(3811);
				match(T__3);
				}
				break;
			case 3:
				_localctx = new BetweenContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3814);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3813);
					match(NOT);
					}
				}

				setState(3816);
				match(BETWEEN);
				setState(3817);
				((BetweenContext)_localctx).lower = valueExpression(0);
				setState(3818);
				match(AND);
				setState(3819);
				((BetweenContext)_localctx).upper = valueExpression(0);
				}
				break;
			case 4:
				_localctx = new InListContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3822);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3821);
					match(NOT);
					}
				}

				setState(3824);
				match(IN);
				setState(3825);
				match(T__1);
				setState(3826);
				expression();
				setState(3831);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__2) {
					{
					{
					setState(3827);
					match(T__2);
					setState(3828);
					expression();
					}
					}
					setState(3833);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3834);
				match(T__3);
				}
				break;
			case 5:
				_localctx = new InSubqueryContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3837);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3836);
					match(NOT);
					}
				}

				setState(3839);
				match(IN);
				setState(3840);
				match(T__1);
				setState(3841);
				query();
				setState(3842);
				match(T__3);
				}
				break;
			case 6:
				_localctx = new LikeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(3845);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3844);
					match(NOT);
					}
				}

				setState(3847);
				match(LIKE);
				setState(3848);
				((LikeContext)_localctx).pattern = valueExpression(0);
				setState(3851);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
				case 1:
					{
					setState(3849);
					match(ESCAPE);
					setState(3850);
					((LikeContext)_localctx).escape = valueExpression(0);
					}
					break;
				}
				}
				break;
			case 7:
				_localctx = new RegexpContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(3854);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3853);
					match(NOT);
					}
				}

				setState(3856);
				match(REGEXP);
				setState(3857);
				((RegexpContext)_localctx).pattern = valueExpression(0);
				}
				break;
			case 8:
				_localctx = new RlikeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(3859);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3858);
					match(NOT);
					}
				}

				setState(3861);
				match(RLIKE);
				setState(3862);
				((RlikeContext)_localctx).pattern = valueExpression(0);
				}
				break;
			case 9:
				_localctx = new NullPredicateContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(3863);
				match(IS);
				setState(3865);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3864);
					match(NOT);
					}
				}

				setState(3867);
				match(NULL);
				}
				break;
			case 10:
				_localctx = new DistinctFromContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(3868);
				match(IS);
				setState(3870);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3869);
					match(NOT);
					}
				}

				setState(3872);
				match(DISTINCT);
				setState(3873);
				match(FROM);
				setState(3874);
				((DistinctFromContext)_localctx).right = valueExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValueExpressionContext extends ParserRuleContext {
		public ValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueExpression; }

		public ValueExpressionContext() { }
		public void copyFrom(ValueExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ArithmeticShiftContext extends ValueExpressionContext {
		public ValueExpressionContext left;
		public ShiftOptContext operator;
		public ValueExpressionContext right;
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public ShiftOptContext shiftOpt() {
			return getRuleContext(ShiftOptContext.class,0);
		}
		public ArithmeticShiftContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterArithmeticShift(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitArithmeticShift(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitArithmeticShift(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ValueExpressionDefaultContext extends ValueExpressionContext {
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public ValueExpressionDefaultContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterValueExpressionDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitValueExpressionDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitValueExpressionDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConcatenationContext extends ValueExpressionContext {
		public ValueExpressionContext left;
		public ValueExpressionContext right;
		public TerminalNode CONCAT() { return getToken(EntireSqlParser.CONCAT, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public ConcatenationContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterConcatenation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitConcatenation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitConcatenation(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GpTypeConvertContext extends ValueExpressionContext {
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public GpTypeConvertContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGpTypeConvert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGpTypeConvert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGpTypeConvert(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ArithmeticBinaryContext extends ValueExpressionContext {
		public ValueExpressionContext left;
		public Token operator;
		public ValueExpressionContext right;
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode ASTERISK() { return getToken(EntireSqlParser.ASTERISK, 0); }
		public TerminalNode SLASH() { return getToken(EntireSqlParser.SLASH, 0); }
		public TerminalNode MATHPERCENT() { return getToken(EntireSqlParser.MATHPERCENT, 0); }
		public TerminalNode MATHMOD() { return getToken(EntireSqlParser.MATHMOD, 0); }
		public TerminalNode PLUS() { return getToken(EntireSqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(EntireSqlParser.MINUS, 0); }
		public TerminalNode LOGICALAND() { return getToken(EntireSqlParser.LOGICALAND, 0); }
		public TerminalNode LOGICALOR() { return getToken(EntireSqlParser.LOGICALOR, 0); }
		public TerminalNode LOGICALEXCLUSIVEOR() { return getToken(EntireSqlParser.LOGICALEXCLUSIVEOR, 0); }
		public TerminalNode XOR() { return getToken(EntireSqlParser.XOR, 0); }
		public ArithmeticBinaryContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterArithmeticBinary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitArithmeticBinary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitArithmeticBinary(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ArithmeticUnaryContext extends ValueExpressionContext {
		public Token operator;
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(EntireSqlParser.MINUS, 0); }
		public TerminalNode PLUS() { return getToken(EntireSqlParser.PLUS, 0); }
		public TerminalNode LOGICALNOT() { return getToken(EntireSqlParser.LOGICALNOT, 0); }
		public ArithmeticUnaryContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterArithmeticUnary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitArithmeticUnary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitArithmeticUnary(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AtTimeZoneContext extends ValueExpressionContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TerminalNode AT() { return getToken(EntireSqlParser.AT, 0); }
		public TimeZoneSpecifierContext timeZoneSpecifier() {
			return getRuleContext(TimeZoneSpecifierContext.class,0);
		}
		public AtTimeZoneContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterAtTimeZone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitAtTimeZone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitAtTimeZone(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MySqlTypeConvertContext extends ValueExpressionContext {
		public TerminalNode BINARY() { return getToken(EntireSqlParser.BINARY, 0); }
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public MySqlTypeConvertContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterMySqlTypeConvert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitMySqlTypeConvert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitMySqlTypeConvert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValueExpressionContext valueExpression() throws RecognitionException {
		return valueExpression(0);
	}

	private ValueExpressionContext valueExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ValueExpressionContext _localctx = new ValueExpressionContext(_ctx, _parentState);
		ValueExpressionContext _prevctx = _localctx;
		int _startState = 190;
		enterRecursionRule(_localctx, 190, RULE_valueExpression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3889);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				{
				_localctx = new ValueExpressionDefaultContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(3878);
				primaryExpression(0);
				}
				break;
			case 2:
				{
				_localctx = new GpTypeConvertContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3879);
				if (!(isGpType())) throw new FailedPredicateException(this, "isGpType()");
				setState(3880);
				primaryExpression(0);
				setState(3881);
				match(T__5);
				setState(3882);
				type(0);
				}
				break;
			case 3:
				{
				_localctx = new MySqlTypeConvertContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3884);
				if (!(isMysqlType() || isGbaseType())) throw new FailedPredicateException(this, "isMysqlType() || isGbaseType()");
				setState(3885);
				match(BINARY);
				setState(3886);
				primaryExpression(0);
				}
				break;
			case 4:
				{
				_localctx = new ArithmeticUnaryContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3887);
				((ArithmeticUnaryContext)_localctx).operator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 414)) & ~0x3f) == 0 && ((1L << (_la - 414)) & ((1L << (PLUS - 414)) | (1L << (MINUS - 414)) | (1L << (LOGICALNOT - 414)))) != 0)) ) {
					((ArithmeticUnaryContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3888);
				valueExpression(5);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3909);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,490,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3907);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
					case 1:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						((ArithmeticBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3891);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(3892);
						((ArithmeticBinaryContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 416)) & ~0x3f) == 0 && ((1L << (_la - 416)) & ((1L << (ASTERISK - 416)) | (1L << (SLASH - 416)) | (1L << (MATHPERCENT - 416)) | (1L << (MATHMOD - 416)))) != 0)) ) {
							((ArithmeticBinaryContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3893);
						((ArithmeticBinaryContext)_localctx).right = valueExpression(5);
						}
						break;
					case 2:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						((ArithmeticBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3894);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(3895);
						((ArithmeticBinaryContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 414)) & ~0x3f) == 0 && ((1L << (_la - 414)) & ((1L << (PLUS - 414)) | (1L << (MINUS - 414)) | (1L << (LOGICALAND - 414)) | (1L << (LOGICALOR - 414)) | (1L << (LOGICALEXCLUSIVEOR - 414)) | (1L << (XOR - 414)))) != 0)) ) {
							((ArithmeticBinaryContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3896);
						((ArithmeticBinaryContext)_localctx).right = valueExpression(4);
						}
						break;
					case 3:
						{
						_localctx = new ArithmeticShiftContext(new ValueExpressionContext(_parentctx, _parentState));
						((ArithmeticShiftContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3897);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(3898);
						((ArithmeticShiftContext)_localctx).operator = shiftOpt();
						setState(3899);
						((ArithmeticShiftContext)_localctx).right = valueExpression(3);
						}
						break;
					case 4:
						{
						_localctx = new ConcatenationContext(new ValueExpressionContext(_parentctx, _parentState));
						((ConcatenationContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3901);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(3902);
						match(CONCAT);
						setState(3903);
						((ConcatenationContext)_localctx).right = valueExpression(2);
						}
						break;
					case 5:
						{
						_localctx = new AtTimeZoneContext(new ValueExpressionContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3904);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(3905);
						match(AT);
						setState(3906);
						timeZoneSpecifier();
						}
						break;
					}
					}
				}
				setState(3911);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,490,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ShiftOptContext extends ParserRuleContext {
		public List<TerminalNode> LT() { return getTokens(EntireSqlParser.LT); }
		public TerminalNode LT(int i) {
			return getToken(EntireSqlParser.LT, i);
		}
		public List<TerminalNode> GT() { return getTokens(EntireSqlParser.GT); }
		public TerminalNode GT(int i) {
			return getToken(EntireSqlParser.GT, i);
		}
		public ShiftOptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shiftOpt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterShiftOpt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitShiftOpt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitShiftOpt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShiftOptContext shiftOpt() throws RecognitionException {
		ShiftOptContext _localctx = new ShiftOptContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_shiftOpt);
		try {
			setState(3916);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3912);
				match(LT);
				setState(3913);
				match(LT);
				}
				break;
			case GT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3914);
				match(GT);
				setState(3915);
				match(GT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrimaryExpressionContext extends ParserRuleContext {
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primaryExpression; }

		public PrimaryExpressionContext() { }
		public void copyFrom(PrimaryExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DereferenceContext extends PrimaryExpressionContext {
		public PrimaryExpressionContext base;
		public IdentifierContext fieldName;
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public OracleJoinTypeContext oracleJoinType() {
			return getRuleContext(OracleJoinTypeContext.class,0);
		}
		public DereferenceContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterDereference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitDereference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitDereference(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IsBooleanValueContext extends PrimaryExpressionContext {
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public TerminalNode IS() { return getToken(EntireSqlParser.IS, 0); }
		public TerminalNode TRUE() { return getToken(EntireSqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(EntireSqlParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(EntireSqlParser.UNKNOWN, 0); }
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public IsBooleanValueContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterIsBooleanValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitIsBooleanValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitIsBooleanValue(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SpecialDateTimeFunctionContext extends PrimaryExpressionContext {
		public Token name;
		public Token precision;
		public TerminalNode CURRENT_DATE() { return getToken(EntireSqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(EntireSqlParser.CURRENT_TIME, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(EntireSqlParser.INTEGER_VALUE, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(EntireSqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(EntireSqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(EntireSqlParser.LOCALTIMESTAMP, 0); }
		public SpecialDateTimeFunctionContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterSpecialDateTimeFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitSpecialDateTimeFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitSpecialDateTimeFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubstringContext extends PrimaryExpressionContext {
		public TerminalNode SUBSTRING() { return getToken(EntireSqlParser.SUBSTRING, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode FROM() { return getToken(EntireSqlParser.FROM, 0); }
		public TerminalNode FOR() { return getToken(EntireSqlParser.FOR, 0); }
		public SubstringContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterSubstring(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitSubstring(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitSubstring(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CastContext extends PrimaryExpressionContext {
		public TerminalNode CAST() { return getToken(EntireSqlParser.CAST, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(EntireSqlParser.AS, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode TRY_CAST() { return getToken(EntireSqlParser.TRY_CAST, 0); }
		public CastContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterCast(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitCast(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitCast(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LambdaContext extends PrimaryExpressionContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public LambdaContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterLambda(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitLambda(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitLambda(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ParenthesizedExpressionContext extends PrimaryExpressionContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ParenthesizedExpressionContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterParenthesizedExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitParenthesizedExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitParenthesizedExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FunctionCallListAggContext extends PrimaryExpressionContext {
		public TerminalNode LISTAGG() { return getToken(EntireSqlParser.LISTAGG, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode WITHIN() { return getToken(EntireSqlParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(EntireSqlParser.GROUP, 0); }
		public TerminalNode ORDER() { return getToken(EntireSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(EntireSqlParser.BY, 0); }
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public FunctionCallListAggContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterFunctionCallListAgg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitFunctionCallListAgg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitFunctionCallListAgg(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ParameterContext extends PrimaryExpressionContext {
		public ParameterContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitParameter(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NormalizeContext extends PrimaryExpressionContext {
		public TerminalNode NORMALIZE() { return getToken(EntireSqlParser.NORMALIZE, 0); }
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public NormalFormContext normalForm() {
			return getRuleContext(NormalFormContext.class,0);
		}
		public NormalizeContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterNormalize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitNormalize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitNormalize(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalLiteralContext extends PrimaryExpressionContext {
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public IntervalLiteralContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterIntervalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitIntervalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitIntervalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumericLiteralContext extends PrimaryExpressionContext {
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public NumericLiteralContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterNumericLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitNumericLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitNumericLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BooleanLiteralContext extends PrimaryExpressionContext {
		public BooleanValueContext booleanValue() {
			return getRuleContext(BooleanValueContext.class,0);
		}
		public BooleanLiteralContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterBooleanLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitBooleanLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitBooleanLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleCaseContext extends PrimaryExpressionContext {
		public ExpressionContext elseExpression;
		public TerminalNode CASE() { return getToken(EntireSqlParser.CASE, 0); }
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(EntireSqlParser.END, 0); }
		public List<WhenClauseContext> whenClause() {
			return getRuleContexts(WhenClauseContext.class);
		}
		public WhenClauseContext whenClause(int i) {
			return getRuleContext(WhenClauseContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(EntireSqlParser.ELSE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SimpleCaseContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterSimpleCase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitSimpleCase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitSimpleCase(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ColumnReferenceContext extends PrimaryExpressionContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColumnReferenceContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterColumnReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitColumnReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitColumnReference(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NullLiteralContext extends PrimaryExpressionContext {
		public TerminalNode NULL() { return getToken(EntireSqlParser.NULL, 0); }
		public NullLiteralContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterNullLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitNullLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitNullLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RowConstructorContext extends PrimaryExpressionContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode ROW() { return getToken(EntireSqlParser.ROW, 0); }
		public RowConstructorContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterRowConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitRowConstructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitRowConstructor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GpFunctionCallContext extends PrimaryExpressionContext {
		public GpFunctionCallsContext gpFunctionCalls() {
			return getRuleContext(GpFunctionCallsContext.class,0);
		}
		public GpFunctionCallContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGpFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGpFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGpFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubscriptContext extends PrimaryExpressionContext {
		public PrimaryExpressionContext value;
		public ValueExpressionContext index;
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public SubscriptContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterSubscript(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitSubscript(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitSubscript(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CurrentPathContext extends PrimaryExpressionContext {
		public Token name;
		public TerminalNode CURRENT_PATH() { return getToken(EntireSqlParser.CURRENT_PATH, 0); }
		public CurrentPathContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterCurrentPath(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitCurrentPath(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitCurrentPath(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryExpressionContext extends PrimaryExpressionContext {
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public SubqueryExpressionContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterSubqueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitSubqueryExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitSubqueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryLiteralContext extends PrimaryExpressionContext {
		public TerminalNode BINARY_LITERAL() { return getToken(EntireSqlParser.BINARY_LITERAL, 0); }
		public BinaryLiteralContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterBinaryLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitBinaryLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitBinaryLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CurrentUserContext extends PrimaryExpressionContext {
		public Token name;
		public TerminalNode CURRENT_USER() { return getToken(EntireSqlParser.CURRENT_USER, 0); }
		public CurrentUserContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterCurrentUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitCurrentUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitCurrentUser(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExtractContext extends PrimaryExpressionContext {
		public TerminalNode EXTRACT() { return getToken(EntireSqlParser.EXTRACT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FROM() { return getToken(EntireSqlParser.FROM, 0); }
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public ExtractContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterExtract(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitExtract(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitExtract(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringLiteralContext extends PrimaryExpressionContext {
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public StringLiteralContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitStringLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ArrayConstructorContext extends PrimaryExpressionContext {
		public TerminalNode ARRAY() { return getToken(EntireSqlParser.ARRAY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public ArrayConstructorContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterArrayConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitArrayConstructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitArrayConstructor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FunctionCallContext extends PrimaryExpressionContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode ASTERISK() { return getToken(EntireSqlParser.ASTERISK, 0); }
		public FilterContext filter() {
			return getRuleContext(FilterContext.class,0);
		}
		public OverContext over() {
			return getRuleContext(OverContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode ORDER() { return getToken(EntireSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(EntireSqlParser.BY, 0); }
		public List<SortItemContext> sortItem() {
			return getRuleContexts(SortItemContext.class);
		}
		public SortItemContext sortItem(int i) {
			return getRuleContext(SortItemContext.class,i);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public FunctionCallContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MysqlFunctionCallContext extends PrimaryExpressionContext {
		public MysqlFunctionCallsContext mysqlFunctionCalls() {
			return getRuleContext(MysqlFunctionCallsContext.class,0);
		}
		public MysqlFunctionCallContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterMysqlFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitMysqlFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitMysqlFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExistsContext extends PrimaryExpressionContext {
		public TerminalNode EXISTS() { return getToken(EntireSqlParser.EXISTS, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public ExistsContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitExists(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Db2CurrentTimeFuncContext extends PrimaryExpressionContext {
		public TerminalNode CURRENT() { return getToken(EntireSqlParser.CURRENT, 0); }
		public TerminalNode DATE() { return getToken(EntireSqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(EntireSqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(EntireSqlParser.TIMESTAMP, 0); }
		public Db2CurrentTimeFuncContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterDb2CurrentTimeFunc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitDb2CurrentTimeFunc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitDb2CurrentTimeFunc(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PositionContext extends PrimaryExpressionContext {
		public TerminalNode POSITION() { return getToken(EntireSqlParser.POSITION, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode IN() { return getToken(EntireSqlParser.IN, 0); }
		public PositionContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterPosition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitPosition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitPosition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SearchedCaseContext extends PrimaryExpressionContext {
		public ExpressionContext elseExpression;
		public TerminalNode CASE() { return getToken(EntireSqlParser.CASE, 0); }
		public TerminalNode END() { return getToken(EntireSqlParser.END, 0); }
		public List<WhenClauseContext> whenClause() {
			return getRuleContexts(WhenClauseContext.class);
		}
		public WhenClauseContext whenClause(int i) {
			return getRuleContext(WhenClauseContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(EntireSqlParser.ELSE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SearchedCaseContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterSearchedCase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitSearchedCase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitSearchedCase(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GroupingOperationContext extends PrimaryExpressionContext {
		public TerminalNode GROUPING() { return getToken(EntireSqlParser.GROUPING, 0); }
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public GroupingOperationContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGroupingOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGroupingOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGroupingOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrimaryExpressionContext primaryExpression() throws RecognitionException {
		return primaryExpression(0);
	}

	private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);
		PrimaryExpressionContext _prevctx = _localctx;
		int _startState = 194;
		enterRecursionRule(_localctx, 194, RULE_primaryExpression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4173);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
			case 1:
				{
				_localctx = new NullLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(3919);
				match(NULL);
				}
				break;
			case 2:
				{
				_localctx = new IntervalLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3920);
				interval();
				}
				break;
			case 3:
				{
				_localctx = new NumericLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3921);
				number();
				}
				break;
			case 4:
				{
				_localctx = new BooleanLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3922);
				booleanValue();
				}
				break;
			case 5:
				{
				_localctx = new StringLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3923);
				string();
				}
				break;
			case 6:
				{
				_localctx = new BinaryLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3924);
				match(BINARY_LITERAL);
				}
				break;
			case 7:
				{
				_localctx = new ParameterContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3925);
				match(T__6);
				}
				break;
			case 8:
				{
				_localctx = new PositionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3926);
				match(POSITION);
				setState(3927);
				match(T__1);
				setState(3928);
				valueExpression(0);
				setState(3929);
				match(IN);
				setState(3930);
				valueExpression(0);
				setState(3931);
				match(T__3);
				}
				break;
			case 9:
				{
				_localctx = new RowConstructorContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3933);
				match(T__1);
				setState(3934);
				expression();
				setState(3937);
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3935);
					match(T__2);
					setState(3936);
					expression();
					}
					}
					setState(3939);
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==T__2 );
				setState(3941);
				match(T__3);
				}
				break;
			case 10:
				{
				_localctx = new RowConstructorContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3943);
				match(ROW);
				setState(3944);
				match(T__1);
				setState(3945);
				expression();
				setState(3950);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__2) {
					{
					{
					setState(3946);
					match(T__2);
					setState(3947);
					expression();
					}
					}
					setState(3952);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3953);
				match(T__3);
				}
				break;
			case 11:
				{
				_localctx = new FunctionCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3955);
				qualifiedName();
				setState(3956);
				match(T__1);
				setState(3957);
				match(ASTERISK);
				setState(3958);
				match(T__3);
				setState(3960);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
				case 1:
					{
					setState(3959);
					filter();
					}
					break;
				}
				setState(3963);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,495,_ctx) ) {
				case 1:
					{
					setState(3962);
					over();
					}
					break;
				}
				}
				break;
			case 12:
				{
				_localctx = new FunctionCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3965);
				qualifiedName();
				setState(3966);
				match(T__1);
				setState(3978);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
				case 1:
					{
					setState(3968);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
					case 1:
						{
						setState(3967);
						setQuantifier();
						}
						break;
					}
					setState(3970);
					expression();
					setState(3975);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(3971);
						match(T__2);
						setState(3972);
						expression();
						}
						}
						setState(3977);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(3990);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(3980);
					match(ORDER);
					setState(3981);
					match(BY);
					setState(3982);
					sortItem();
					setState(3987);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(3983);
						match(T__2);
						setState(3984);
						sortItem();
						}
						}
						setState(3989);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3992);
				match(T__3);
				setState(3994);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
				case 1:
					{
					setState(3993);
					filter();
					}
					break;
				}
				setState(3997);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,502,_ctx) ) {
				case 1:
					{
					setState(3996);
					over();
					}
					break;
				}
				}
				break;
			case 13:
				{
				_localctx = new FunctionCallListAggContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3999);
				match(LISTAGG);
				setState(4000);
				match(T__1);
				setState(4001);
				expression();
				setState(4004);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__2) {
					{
					setState(4002);
					match(T__2);
					setState(4003);
					primaryExpression(0);
					}
				}

				setState(4006);
				match(T__3);
				setState(4007);
				match(WITHIN);
				setState(4008);
				match(GROUP);
				setState(4009);
				match(T__1);
				setState(4010);
				match(ORDER);
				setState(4011);
				match(BY);
				setState(4012);
				expression();
				setState(4013);
				match(T__3);
				}
				break;
			case 14:
				{
				_localctx = new GpFunctionCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4015);
				if (!(isGpType())) throw new FailedPredicateException(this, "isGpType()");
				setState(4016);
				gpFunctionCalls();
				}
				break;
			case 15:
				{
				_localctx = new MysqlFunctionCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4017);
				if (!(isMysqlType())) throw new FailedPredicateException(this, "isMysqlType()");
				setState(4018);
				mysqlFunctionCalls();
				}
				break;
			case 16:
				{
				_localctx = new Db2CurrentTimeFuncContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4019);
				if (!(isDb2Type())) throw new FailedPredicateException(this, "isDb2Type()");
				setState(4020);
				match(CURRENT);
				setState(4021);
				_la = _input.LA(1);
				if ( !(_la==DATE || _la==TIME || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 17:
				{
				_localctx = new LambdaContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4022);
				identifier(0);
				setState(4023);
				match(T__7);
				setState(4024);
				expression();
				}
				break;
			case 18:
				{
				_localctx = new LambdaContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4026);
				match(T__1);
				setState(4035);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALL) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << AT) | (1L << BERNOULLI) | (1L << BETWEEN) | (1L << BY) | (1L << CALL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONSTRAINT) | (1L << CROSS) | (1L << CUBE) | (1L << CURRENT) | (1L << CURRENT_DATE) | (1L << CURRENT_PATH) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DATA) | (1L << DATE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DESC) | (1L << DESCRIBE) | (1L << DISTINCT) | (1L << DISTRIBUTED) | (1L << DROP) | (1L << ELSE) | (1L << ESCAPE) | (1L << EXCEPT) | (1L << EXCLUDING) | (1L << EXECUTE) | (1L << EXISTS) | (1L << EXPLAIN))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXTRACT - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FOR - 64)) | (1L << (FORMAT - 64)) | (1L << (FULL - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUP - 64)) | (1L << (GROUPING - 64)) | (1L << (HAVING - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IN - 64)) | (1L << (INCLUDING - 64)) | (1L << (INNER - 64)) | (1L << (INPUT - 64)) | (1L << (INSERT - 64)) | (1L << (INTERSECT - 64)) | (1L << (MINUSES - 64)) | (1L << (INTERVAL - 64)) | (1L << (INTO - 64)) | (1L << (IO - 64)) | (1L << (IS - 64)) | (1L << (ISOLATION - 64)) | (1L << (JSON - 64)) | (1L << (JOIN - 64)) | (1L << (LAST - 64)) | (1L << (LATERAL - 64)) | (1L << (LEFT - 64)) | (1L << (LEVEL - 64)) | (1L << (LIKE - 64)) | (1L << (LIMIT - 64)) | (1L << (LISTAGG - 64)) | (1L << (LOCALTIME - 64)) | (1L << (LOCALTIMESTAMP - 64)) | (1L << (LOGICAL - 64)) | (1L << (MAP - 64)) | (1L << (MINUTE - 64)) | (1L << (MONTH - 64)) | (1L << (MODIFY - 64)) | (1L << (NATURAL - 64)) | (1L << (NFC - 64)) | (1L << (NFD - 64)) | (1L << (NFKC - 64)) | (1L << (NFKD - 64)) | (1L << (NO - 64)) | (1L << (NORMALIZE - 64)) | (1L << (NULLIF - 64)) | (1L << (NULLS - 64)) | (1L << (ON - 64)) | (1L << (ONLY - 64)) | (1L << (OPTION - 64)) | (1L << (OR - 64)) | (1L << (ORDER - 64)) | (1L << (ORDINALITY - 64)) | (1L << (OUTER - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (OVER - 128)) | (1L << (PARTITION - 128)) | (1L << (PARTITIONS - 128)) | (1L << (PATH - 128)) | (1L << (POSITION - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROPERTIES - 128)) | (1L << (PUBLIC - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (RECURSIVE - 128)) | (1L << (RENAME - 128)) | (1L << (REPEATABLE - 128)) | (1L << (REPLACE - 128)) | (1L << (RESET - 128)) | (1L << (RESTRICT - 128)) | (1L << (REVOKE - 128)) | (1L << (RIGHT - 128)) | (1L << (ROLLBACK - 128)) | (1L << (ROLLUP - 128)) | (1L << (ROW - 128)) | (1L << (ROWS - 128)) | (1L << (SCHEMA - 128)) | (1L << (SCHEMAS - 128)) | (1L << (SECOND - 128)) | (1L << (SERIALIZABLE - 128)) | (1L << (SESSION - 128)) | (1L << (SET - 128)) | (1L << (SETS - 128)) | (1L << (SHOW - 128)) | (1L << (SOME - 128)) | (1L << (START - 128)) | (1L << (STATS - 128)) | (1L << (SUBSTRING - 128)) | (1L << (SYSTEM - 128)) | (1L << (TABLES - 128)) | (1L << (TABLESAMPLE - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TIMESTAMP - 128)) | (1L << (TO - 128)) | (1L << (TRANSACTION - 128)) | (1L << (TRY_CAST - 128)) | (1L << (TYPE - 128)) | (1L << (TRUNCATE - 128)) | (1L << (UPDATE - 128)) | (1L << (UESCAPE - 128)) | (1L << (UNBOUNDED - 128)) | (1L << (UNCOMMITTED - 128)) | (1L << (UNION - 128)) | (1L << (UNNEST - 128)) | (1L << (USE - 128)) | (1L << (VALIDATE - 128)) | (1L << (VERBOSE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (VIEW - 192)) | (1L << (WHEN - 192)) | (1L << (WITH - 192)) | (1L << (WITHIN - 192)) | (1L << (WORK - 192)) | (1L << (WRITE - 192)) | (1L << (YEAR - 192)) | (1L << (ZONE - 192)) | (1L << (SEMI - 192)) | (1L << (SORT - 192)) | (1L << (OFFSET - 192)) | (1L << (DEFAULT - 192)) | (1L << (TABLESPACE - 192)) | (1L << (EXTERNAL - 192)) | (1L << (PURGE - 192)) | (1L << (TEMPORARY - 192)) | (1L << (PRIMARY - 192)) | (1L << (KEY - 192)) | (1L << (DISABLE - 192)) | (1L << (NOVALIDATE - 192)) | (1L << (FOREIGN - 192)) | (1L << (REFERENCES - 192)) | (1L << (PARTITIONED - 192)) | (1L << (CLUSTERED - 192)) | (1L << (SORTED - 192)) | (1L << (BUCKETS - 192)) | (1L << (SKEWED - 192)) | (1L << (STORED - 192)) | (1L << (DELIMITED - 192)) | (1L << (FIELDS - 192)) | (1L << (TERMINATED - 192)) | (1L << (ESCAPED - 192)) | (1L << (COLLECTION - 192)) | (1L << (ITEMS - 192)) | (1L << (KEYS - 192)) | (1L << (LINES - 192)) | (1L << (DEFINED - 192)) | (1L << (SEQUENCEFILE - 192)) | (1L << (TEXTFILE - 192)) | (1L << (RCFILE - 192)) | (1L << (ORC - 192)) | (1L << (ORCFILE - 192)) | (1L << (PARQUET - 192)) | (1L << (AVRO - 192)) | (1L << (JSONFILE - 192)) | (1L << (INPUTFORMAT - 192)) | (1L << (OUTPUTFORMAT - 192)) | (1L << (SERDE - 192)) | (1L << (SERDEPROPERTIES - 192)) | (1L << (LOCATION - 192)) | (1L << (TBLPROPERTIES - 192)) | (1L << (RELY - 192)) | (1L << (EXCHANGE - 192)) | (1L << (RECOVER - 192)) | (1L << (ARCHIVE - 192)) | (1L << (UNARCHIVE - 192)) | (1L << (IGNORE - 192)) | (1L << (PROTECTION - 192)) | (1L << (TOUCH - 192)) | (1L << (ENABLE - 192)) | (1L << (NO_DROP - 192)) | (1L << (OFFLINE - 192)) | (1L << (COMPACT - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (WAIT - 256)) | (1L << (CONCATENATE - 256)) | (1L << (CHANGE - 256)) | (1L << (AFTER - 256)) | (1L << (DEFERRED - 256)) | (1L << (REBUILD - 256)) | (1L << (INDEX - 256)) | (1L << (IDXPROPERTIES - 256)) | (1L << (FUNCTION - 256)) | (1L << (JAR - 256)) | (1L << (FILE - 256)) | (1L << (DATABASE - 256)) | (1L << (DBPROPERTIES - 256)) | (1L << (OWNER - 256)) | (1L << (RELOAD - 256)) | (1L << (USER - 256)) | (1L << (ROLE - 256)) | (1L << (FILEFORMAT - 256)) | (1L << (LOAD - 256)) | (1L << (LOCAL - 256)) | (1L << (INPATH - 256)) | (1L << (DIRECTORY - 256)) | (1L << (VACUUM - 256)) | (1L << (LIST - 256)) | (1L << (SUBPARTITION - 256)) | (1L << (SUBPARTITIONS - 256)) | (1L << (EVERY - 256)) | (1L << (INCLUSIVE - 256)) | (1L << (EXCLUSIVE - 256)) | (1L << (TEMPLATE - 256)) | (1L << (ENCODING - 256)) | (1L << (LOG - 256)) | (1L << (ERRORS - 256)) | (1L << (SEGMENT - 256)) | (1L << (REJECT - 256)) | (1L << (PERCENT - 256)) | (1L << (WRITABLE - 256)) | (1L << (CHECK - 256)) | (1L << (UNIQUE - 256)) | (1L << (CONCURRENTLY - 256)) | (1L << (BITMAP - 256)) | (1L << (FORCE - 256)) | (1L << (SPLIT - 256)) | (1L << (REINDEX - 256)) | (1L << (FREEZE - 256)) | (1L << (MSCK - 256)) | (1L << (REPAIR - 256)) | (1L << (FETCH - 256)) | (1L << (DEFINITION - 256)) | (1L << (LESS - 256)) | (1L << (THAN - 256)) | (1L << (HASH - 256)) | (1L << (NOLOGGING - 256)) | (1L << (STRUCT - 256)) | (1L << (GLOBAL - 256)) | (1L << (PRESERVE - 256)) | (1L << (AUTO_INCREMENT - 256)) | (1L << (ENGINE - 256)) | (1L << (CHARSET - 256)) | (1L << (COMPRESS - 256)) | (1L << (EXPRESS - 256)) | (1L << (REPLICATED - 256)) | (1L << (NOCOPIES - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (SPACE - 320)) | (1L << (SHRINK - 320)) | (1L << (KEY_BLOCK_SIZE - 320)) | (1L << (KEY_DC_SIZE - 320)) | (1L << (AUTOEXTEND - 320)) | (1L << (NEXT - 320)) | (1L << (OFF - 320)) | (1L << (MATCHED - 320)) | (1L << (MERGE - 320)) | (1L << (OUTFILE - 320)) | (1L << (OPTIONALLY - 320)) | (1L << (ENCLOSED - 320)) | (1L << (DOUBLE_ENCLOSED - 320)) | (1L << (NULL_VALUE - 320)) | (1L << (OUTFILEMODE - 320)) | (1L << (HDFS - 320)) | (1L << (WRITEMODE - 320)) | (1L << (NORMAL - 320)) | (1L << (OVERWRITES - 320)) | (1L << (FILECOUNT - 320)) | (1L << (FILESIZE - 320)) | (1L << (CHARACTER - 320)) | (1L << (GBK - 320)) | (1L << (UTF8 - 320)) | (1L << (HEAD - 320)) | (1L << (RMTSELECT - 320)) | (1L << (INFILE - 320)) | (1L << (DATA_FORMAT - 320)) | (1L << (SEPARATOR - 320)) | (1L << (BLANKS - 320)) | (1L << (AUTOFILL - 320)) | (1L << (LENGTH - 320)) | (1L << (TABLE_FIELDS - 320)) | (1L << (MAX_BAD_RECORDS - 320)) | (1L << (DATETIME - 320)) | (1L << (TRACE - 320)) | (1L << (TRACE_PATH - 320)) | (1L << (NOSPLIT - 320)) | (1L << (PARALLEL - 320)) | (1L << (MAX_DATA_PROCESSORS - 320)) | (1L << (MIN_CHUNK_SIZE - 320)) | (1L << (SKIP_BAD_FILE - 320)) | (1L << (NUM - 320)) | (1L << (FILE_FORMAT - 320)) | (1L << (IMMEDIATE - 320)) | (1L << (STARTING - 320)) | (1L << (ENDING - 320)) | (1L << (INITIALLY - 320)) | (1L << (REFRESH - 320)) | (1L << (ACTIVATE - 320)) | (1L << (LOGGED - 320)) | (1L << (EMPTY - 320)) | (1L << (SEQUENCE - 320)) | (1L << (INCREMENT - 320)) | (1L << (MINVALUE - 320)) | (1L << (MAXVALUE - 320)) | (1L << (OVERLAY - 320)) | (1L << (PLACING - 320)) | (1L << (TRIM - 320)) | (1L << (LTRIM - 320)) | (1L << (RTRIM - 320)) | (1L << (BOTH - 320)) | (1L << (TO_CHAR - 320)) | (1L << (AGE - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (DATE_PART - 384)) | (1L << (ISFINITE - 384)) | (1L << (INT - 384)) | (1L << (UNSIGNED - 384)) | (1L << (REGEXP - 384)) | (1L << (BINARY - 384)) | (1L << (LEADING - 384)) | (1L << (TRAILING - 384)) | (1L << (RLIKE - 384)) | (1L << (DATE_SUB - 384)) | (1L << (ADDDATE - 384)) | (1L << (DATE_ADD - 384)) | (1L << (YEAR_MONTH - 384)) | (1L << (DAY_HOUR - 384)) | (1L << (DAY_MINUTE - 384)) | (1L << (DAY_SECOND - 384)) | (1L << (HOUR_MINUTE - 384)) | (1L << (HOUR_SECOND - 384)) | (1L << (MINUTE_SECOND - 384)) | (1L << (UNKNOWN - 384)) | (1L << (IDENTIFIER - 384)) | (1L << (DIGIT_IDENTIFIER - 384)) | (1L << (QUOTED_IDENTIFIER - 384)) | (1L << (BACKQUOTED_IDENTIFIER - 384)))) != 0)) {
					{
					setState(4027);
					identifier(0);
					setState(4032);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(4028);
						match(T__2);
						setState(4029);
						identifier(0);
						}
						}
						setState(4034);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(4037);
				match(T__3);
				setState(4038);
				match(T__7);
				setState(4039);
				expression();
				}
				break;
			case 19:
				{
				_localctx = new SubqueryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4040);
				match(T__1);
				setState(4041);
				query();
				setState(4042);
				match(T__3);
				}
				break;
			case 20:
				{
				_localctx = new ExistsContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4044);
				match(EXISTS);
				setState(4045);
				match(T__1);
				setState(4046);
				query();
				setState(4047);
				match(T__3);
				}
				break;
			case 21:
				{
				_localctx = new SimpleCaseContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4049);
				match(CASE);
				setState(4050);
				valueExpression(0);
				setState(4052);
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4051);
					whenClause();
					}
					}
					setState(4054);
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(4058);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(4056);
					match(ELSE);
					setState(4057);
					((SimpleCaseContext)_localctx).elseExpression = expression();
					}
				}

				setState(4060);
				match(END);
				}
				break;
			case 22:
				{
				_localctx = new SearchedCaseContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4062);
				match(CASE);
				setState(4064);
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4063);
					whenClause();
					}
					}
					setState(4066);
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(4070);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(4068);
					match(ELSE);
					setState(4069);
					((SearchedCaseContext)_localctx).elseExpression = expression();
					}
				}

				setState(4072);
				match(END);
				}
				break;
			case 23:
				{
				_localctx = new CastContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4074);
				match(CAST);
				setState(4075);
				match(T__1);
				setState(4076);
				expression();
				setState(4077);
				match(AS);
				setState(4078);
				type(0);
				setState(4079);
				match(T__3);
				}
				break;
			case 24:
				{
				_localctx = new CastContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4081);
				match(TRY_CAST);
				setState(4082);
				match(T__1);
				setState(4083);
				expression();
				setState(4084);
				match(AS);
				setState(4085);
				type(0);
				setState(4086);
				match(T__3);
				}
				break;
			case 25:
				{
				_localctx = new ArrayConstructorContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4088);
				match(ARRAY);
				setState(4089);
				match(T__8);
				setState(4098);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
				case 1:
					{
					setState(4090);
					expression();
					setState(4095);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(4091);
						match(T__2);
						setState(4092);
						expression();
						}
						}
						setState(4097);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(4100);
				match(T__9);
				}
				break;
			case 26:
				{
				_localctx = new ColumnReferenceContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4101);
				identifier(0);
				}
				break;
			case 27:
				{
				_localctx = new SpecialDateTimeFunctionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4102);
				((SpecialDateTimeFunctionContext)_localctx).name = match(CURRENT_DATE);
				}
				break;
			case 28:
				{
				_localctx = new SpecialDateTimeFunctionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4103);
				((SpecialDateTimeFunctionContext)_localctx).name = match(CURRENT_TIME);
				setState(4107);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,512,_ctx) ) {
				case 1:
					{
					setState(4104);
					match(T__1);
					setState(4105);
					((SpecialDateTimeFunctionContext)_localctx).precision = match(INTEGER_VALUE);
					setState(4106);
					match(T__3);
					}
					break;
				}
				}
				break;
			case 29:
				{
				_localctx = new SpecialDateTimeFunctionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4109);
				((SpecialDateTimeFunctionContext)_localctx).name = match(CURRENT_TIMESTAMP);
				setState(4113);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
				case 1:
					{
					setState(4110);
					match(T__1);
					setState(4111);
					((SpecialDateTimeFunctionContext)_localctx).precision = match(INTEGER_VALUE);
					setState(4112);
					match(T__3);
					}
					break;
				}
				}
				break;
			case 30:
				{
				_localctx = new SpecialDateTimeFunctionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4115);
				((SpecialDateTimeFunctionContext)_localctx).name = match(LOCALTIME);
				setState(4119);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
				case 1:
					{
					setState(4116);
					match(T__1);
					setState(4117);
					((SpecialDateTimeFunctionContext)_localctx).precision = match(INTEGER_VALUE);
					setState(4118);
					match(T__3);
					}
					break;
				}
				}
				break;
			case 31:
				{
				_localctx = new SpecialDateTimeFunctionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4121);
				((SpecialDateTimeFunctionContext)_localctx).name = match(LOCALTIMESTAMP);
				setState(4125);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
				case 1:
					{
					setState(4122);
					match(T__1);
					setState(4123);
					((SpecialDateTimeFunctionContext)_localctx).precision = match(INTEGER_VALUE);
					setState(4124);
					match(T__3);
					}
					break;
				}
				}
				break;
			case 32:
				{
				_localctx = new CurrentUserContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4127);
				((CurrentUserContext)_localctx).name = match(CURRENT_USER);
				}
				break;
			case 33:
				{
				_localctx = new CurrentPathContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4128);
				((CurrentPathContext)_localctx).name = match(CURRENT_PATH);
				}
				break;
			case 34:
				{
				_localctx = new SubstringContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4129);
				match(SUBSTRING);
				setState(4130);
				match(T__1);
				setState(4131);
				valueExpression(0);
				setState(4132);
				match(FROM);
				setState(4133);
				valueExpression(0);
				setState(4136);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4134);
					match(FOR);
					setState(4135);
					valueExpression(0);
					}
				}

				setState(4138);
				match(T__3);
				}
				break;
			case 35:
				{
				_localctx = new NormalizeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4140);
				match(NORMALIZE);
				setState(4141);
				match(T__1);
				setState(4142);
				valueExpression(0);
				setState(4145);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__2) {
					{
					setState(4143);
					match(T__2);
					setState(4144);
					normalForm();
					}
				}

				setState(4147);
				match(T__3);
				}
				break;
			case 36:
				{
				_localctx = new ExtractContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4149);
				match(EXTRACT);
				setState(4150);
				match(T__1);
				setState(4151);
				identifier(0);
				setState(4152);
				match(FROM);
				setState(4153);
				valueExpression(0);
				setState(4154);
				match(T__3);
				}
				break;
			case 37:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4156);
				match(T__1);
				setState(4157);
				expression();
				setState(4158);
				match(T__3);
				}
				break;
			case 38:
				{
				_localctx = new GroupingOperationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4160);
				match(GROUPING);
				setState(4161);
				match(T__1);
				setState(4170);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALL) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << AT) | (1L << BERNOULLI) | (1L << BETWEEN) | (1L << BY) | (1L << CALL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONSTRAINT) | (1L << CROSS) | (1L << CUBE) | (1L << CURRENT) | (1L << CURRENT_DATE) | (1L << CURRENT_PATH) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DATA) | (1L << DATE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DESC) | (1L << DESCRIBE) | (1L << DISTINCT) | (1L << DISTRIBUTED) | (1L << DROP) | (1L << ELSE) | (1L << ESCAPE) | (1L << EXCEPT) | (1L << EXCLUDING) | (1L << EXECUTE) | (1L << EXISTS) | (1L << EXPLAIN))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXTRACT - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FOR - 64)) | (1L << (FORMAT - 64)) | (1L << (FULL - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUP - 64)) | (1L << (GROUPING - 64)) | (1L << (HAVING - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IN - 64)) | (1L << (INCLUDING - 64)) | (1L << (INNER - 64)) | (1L << (INPUT - 64)) | (1L << (INSERT - 64)) | (1L << (INTERSECT - 64)) | (1L << (MINUSES - 64)) | (1L << (INTERVAL - 64)) | (1L << (INTO - 64)) | (1L << (IO - 64)) | (1L << (IS - 64)) | (1L << (ISOLATION - 64)) | (1L << (JSON - 64)) | (1L << (JOIN - 64)) | (1L << (LAST - 64)) | (1L << (LATERAL - 64)) | (1L << (LEFT - 64)) | (1L << (LEVEL - 64)) | (1L << (LIKE - 64)) | (1L << (LIMIT - 64)) | (1L << (LISTAGG - 64)) | (1L << (LOCALTIME - 64)) | (1L << (LOCALTIMESTAMP - 64)) | (1L << (LOGICAL - 64)) | (1L << (MAP - 64)) | (1L << (MINUTE - 64)) | (1L << (MONTH - 64)) | (1L << (MODIFY - 64)) | (1L << (NATURAL - 64)) | (1L << (NFC - 64)) | (1L << (NFD - 64)) | (1L << (NFKC - 64)) | (1L << (NFKD - 64)) | (1L << (NO - 64)) | (1L << (NORMALIZE - 64)) | (1L << (NULLIF - 64)) | (1L << (NULLS - 64)) | (1L << (ON - 64)) | (1L << (ONLY - 64)) | (1L << (OPTION - 64)) | (1L << (OR - 64)) | (1L << (ORDER - 64)) | (1L << (ORDINALITY - 64)) | (1L << (OUTER - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (OVER - 128)) | (1L << (PARTITION - 128)) | (1L << (PARTITIONS - 128)) | (1L << (PATH - 128)) | (1L << (POSITION - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROPERTIES - 128)) | (1L << (PUBLIC - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (RECURSIVE - 128)) | (1L << (RENAME - 128)) | (1L << (REPEATABLE - 128)) | (1L << (REPLACE - 128)) | (1L << (RESET - 128)) | (1L << (RESTRICT - 128)) | (1L << (REVOKE - 128)) | (1L << (RIGHT - 128)) | (1L << (ROLLBACK - 128)) | (1L << (ROLLUP - 128)) | (1L << (ROW - 128)) | (1L << (ROWS - 128)) | (1L << (SCHEMA - 128)) | (1L << (SCHEMAS - 128)) | (1L << (SECOND - 128)) | (1L << (SERIALIZABLE - 128)) | (1L << (SESSION - 128)) | (1L << (SET - 128)) | (1L << (SETS - 128)) | (1L << (SHOW - 128)) | (1L << (SOME - 128)) | (1L << (START - 128)) | (1L << (STATS - 128)) | (1L << (SUBSTRING - 128)) | (1L << (SYSTEM - 128)) | (1L << (TABLES - 128)) | (1L << (TABLESAMPLE - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TIMESTAMP - 128)) | (1L << (TO - 128)) | (1L << (TRANSACTION - 128)) | (1L << (TRY_CAST - 128)) | (1L << (TYPE - 128)) | (1L << (TRUNCATE - 128)) | (1L << (UPDATE - 128)) | (1L << (UESCAPE - 128)) | (1L << (UNBOUNDED - 128)) | (1L << (UNCOMMITTED - 128)) | (1L << (UNION - 128)) | (1L << (UNNEST - 128)) | (1L << (USE - 128)) | (1L << (VALIDATE - 128)) | (1L << (VERBOSE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (VIEW - 192)) | (1L << (WHEN - 192)) | (1L << (WITH - 192)) | (1L << (WITHIN - 192)) | (1L << (WORK - 192)) | (1L << (WRITE - 192)) | (1L << (YEAR - 192)) | (1L << (ZONE - 192)) | (1L << (SEMI - 192)) | (1L << (SORT - 192)) | (1L << (OFFSET - 192)) | (1L << (DEFAULT - 192)) | (1L << (TABLESPACE - 192)) | (1L << (EXTERNAL - 192)) | (1L << (PURGE - 192)) | (1L << (TEMPORARY - 192)) | (1L << (PRIMARY - 192)) | (1L << (KEY - 192)) | (1L << (DISABLE - 192)) | (1L << (NOVALIDATE - 192)) | (1L << (FOREIGN - 192)) | (1L << (REFERENCES - 192)) | (1L << (PARTITIONED - 192)) | (1L << (CLUSTERED - 192)) | (1L << (SORTED - 192)) | (1L << (BUCKETS - 192)) | (1L << (SKEWED - 192)) | (1L << (STORED - 192)) | (1L << (DELIMITED - 192)) | (1L << (FIELDS - 192)) | (1L << (TERMINATED - 192)) | (1L << (ESCAPED - 192)) | (1L << (COLLECTION - 192)) | (1L << (ITEMS - 192)) | (1L << (KEYS - 192)) | (1L << (LINES - 192)) | (1L << (DEFINED - 192)) | (1L << (SEQUENCEFILE - 192)) | (1L << (TEXTFILE - 192)) | (1L << (RCFILE - 192)) | (1L << (ORC - 192)) | (1L << (ORCFILE - 192)) | (1L << (PARQUET - 192)) | (1L << (AVRO - 192)) | (1L << (JSONFILE - 192)) | (1L << (INPUTFORMAT - 192)) | (1L << (OUTPUTFORMAT - 192)) | (1L << (SERDE - 192)) | (1L << (SERDEPROPERTIES - 192)) | (1L << (LOCATION - 192)) | (1L << (TBLPROPERTIES - 192)) | (1L << (RELY - 192)) | (1L << (EXCHANGE - 192)) | (1L << (RECOVER - 192)) | (1L << (ARCHIVE - 192)) | (1L << (UNARCHIVE - 192)) | (1L << (IGNORE - 192)) | (1L << (PROTECTION - 192)) | (1L << (TOUCH - 192)) | (1L << (ENABLE - 192)) | (1L << (NO_DROP - 192)) | (1L << (OFFLINE - 192)) | (1L << (COMPACT - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (WAIT - 256)) | (1L << (CONCATENATE - 256)) | (1L << (CHANGE - 256)) | (1L << (AFTER - 256)) | (1L << (DEFERRED - 256)) | (1L << (REBUILD - 256)) | (1L << (INDEX - 256)) | (1L << (IDXPROPERTIES - 256)) | (1L << (FUNCTION - 256)) | (1L << (JAR - 256)) | (1L << (FILE - 256)) | (1L << (DATABASE - 256)) | (1L << (DBPROPERTIES - 256)) | (1L << (OWNER - 256)) | (1L << (RELOAD - 256)) | (1L << (USER - 256)) | (1L << (ROLE - 256)) | (1L << (FILEFORMAT - 256)) | (1L << (LOAD - 256)) | (1L << (LOCAL - 256)) | (1L << (INPATH - 256)) | (1L << (DIRECTORY - 256)) | (1L << (VACUUM - 256)) | (1L << (LIST - 256)) | (1L << (SUBPARTITION - 256)) | (1L << (SUBPARTITIONS - 256)) | (1L << (EVERY - 256)) | (1L << (INCLUSIVE - 256)) | (1L << (EXCLUSIVE - 256)) | (1L << (TEMPLATE - 256)) | (1L << (ENCODING - 256)) | (1L << (LOG - 256)) | (1L << (ERRORS - 256)) | (1L << (SEGMENT - 256)) | (1L << (REJECT - 256)) | (1L << (PERCENT - 256)) | (1L << (WRITABLE - 256)) | (1L << (CHECK - 256)) | (1L << (UNIQUE - 256)) | (1L << (CONCURRENTLY - 256)) | (1L << (BITMAP - 256)) | (1L << (FORCE - 256)) | (1L << (SPLIT - 256)) | (1L << (REINDEX - 256)) | (1L << (FREEZE - 256)) | (1L << (MSCK - 256)) | (1L << (REPAIR - 256)) | (1L << (FETCH - 256)) | (1L << (DEFINITION - 256)) | (1L << (LESS - 256)) | (1L << (THAN - 256)) | (1L << (HASH - 256)) | (1L << (NOLOGGING - 256)) | (1L << (STRUCT - 256)) | (1L << (GLOBAL - 256)) | (1L << (PRESERVE - 256)) | (1L << (AUTO_INCREMENT - 256)) | (1L << (ENGINE - 256)) | (1L << (CHARSET - 256)) | (1L << (COMPRESS - 256)) | (1L << (EXPRESS - 256)) | (1L << (REPLICATED - 256)) | (1L << (NOCOPIES - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (SPACE - 320)) | (1L << (SHRINK - 320)) | (1L << (KEY_BLOCK_SIZE - 320)) | (1L << (KEY_DC_SIZE - 320)) | (1L << (AUTOEXTEND - 320)) | (1L << (NEXT - 320)) | (1L << (OFF - 320)) | (1L << (MATCHED - 320)) | (1L << (MERGE - 320)) | (1L << (OUTFILE - 320)) | (1L << (OPTIONALLY - 320)) | (1L << (ENCLOSED - 320)) | (1L << (DOUBLE_ENCLOSED - 320)) | (1L << (NULL_VALUE - 320)) | (1L << (OUTFILEMODE - 320)) | (1L << (HDFS - 320)) | (1L << (WRITEMODE - 320)) | (1L << (NORMAL - 320)) | (1L << (OVERWRITES - 320)) | (1L << (FILECOUNT - 320)) | (1L << (FILESIZE - 320)) | (1L << (CHARACTER - 320)) | (1L << (GBK - 320)) | (1L << (UTF8 - 320)) | (1L << (HEAD - 320)) | (1L << (RMTSELECT - 320)) | (1L << (INFILE - 320)) | (1L << (DATA_FORMAT - 320)) | (1L << (SEPARATOR - 320)) | (1L << (BLANKS - 320)) | (1L << (AUTOFILL - 320)) | (1L << (LENGTH - 320)) | (1L << (TABLE_FIELDS - 320)) | (1L << (MAX_BAD_RECORDS - 320)) | (1L << (DATETIME - 320)) | (1L << (TRACE - 320)) | (1L << (TRACE_PATH - 320)) | (1L << (NOSPLIT - 320)) | (1L << (PARALLEL - 320)) | (1L << (MAX_DATA_PROCESSORS - 320)) | (1L << (MIN_CHUNK_SIZE - 320)) | (1L << (SKIP_BAD_FILE - 320)) | (1L << (NUM - 320)) | (1L << (FILE_FORMAT - 320)) | (1L << (IMMEDIATE - 320)) | (1L << (STARTING - 320)) | (1L << (ENDING - 320)) | (1L << (INITIALLY - 320)) | (1L << (REFRESH - 320)) | (1L << (ACTIVATE - 320)) | (1L << (LOGGED - 320)) | (1L << (EMPTY - 320)) | (1L << (SEQUENCE - 320)) | (1L << (INCREMENT - 320)) | (1L << (MINVALUE - 320)) | (1L << (MAXVALUE - 320)) | (1L << (OVERLAY - 320)) | (1L << (PLACING - 320)) | (1L << (TRIM - 320)) | (1L << (LTRIM - 320)) | (1L << (RTRIM - 320)) | (1L << (BOTH - 320)) | (1L << (TO_CHAR - 320)) | (1L << (AGE - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (DATE_PART - 384)) | (1L << (ISFINITE - 384)) | (1L << (INT - 384)) | (1L << (UNSIGNED - 384)) | (1L << (REGEXP - 384)) | (1L << (BINARY - 384)) | (1L << (LEADING - 384)) | (1L << (TRAILING - 384)) | (1L << (RLIKE - 384)) | (1L << (DATE_SUB - 384)) | (1L << (ADDDATE - 384)) | (1L << (DATE_ADD - 384)) | (1L << (YEAR_MONTH - 384)) | (1L << (DAY_HOUR - 384)) | (1L << (DAY_MINUTE - 384)) | (1L << (DAY_SECOND - 384)) | (1L << (HOUR_MINUTE - 384)) | (1L << (HOUR_SECOND - 384)) | (1L << (MINUTE_SECOND - 384)) | (1L << (UNKNOWN - 384)) | (1L << (IDENTIFIER - 384)) | (1L << (DIGIT_IDENTIFIER - 384)) | (1L << (QUOTED_IDENTIFIER - 384)) | (1L << (BACKQUOTED_IDENTIFIER - 384)))) != 0)) {
					{
					setState(4162);
					qualifiedName();
					setState(4167);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(4163);
						match(T__2);
						setState(4164);
						qualifiedName();
						}
						}
						setState(4169);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(4172);
				match(T__3);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(4194);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,524,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(4192);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
					case 1:
						{
						_localctx = new IsBooleanValueContext(new PrimaryExpressionContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						setState(4175);
						if (!(precpred(_ctx, 37))) throw new FailedPredicateException(this, "precpred(_ctx, 37)");
						setState(4176);
						match(IS);
						setState(4178);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4177);
							match(NOT);
							}
						}

						setState(4180);
						_la = _input.LA(1);
						if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						_localctx = new SubscriptContext(new PrimaryExpressionContext(_parentctx, _parentState));
						((SubscriptContext)_localctx).value = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						setState(4181);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(4182);
						match(T__8);
						setState(4183);
						((SubscriptContext)_localctx).index = valueExpression(0);
						setState(4184);
						match(T__9);
						}
						break;
					case 3:
						{
						_localctx = new DereferenceContext(new PrimaryExpressionContext(_parentctx, _parentState));
						((DereferenceContext)_localctx).base = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						setState(4186);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(4187);
						match(T__4);
						setState(4188);
						((DereferenceContext)_localctx).fieldName = identifier(0);
						setState(4190);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
						case 1:
							{
							setState(4189);
							oracleJoinType();
							}
							break;
						}
						}
						break;
					}
					}
				}
				setState(4196);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,524,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class GpFunctionCallsContext extends ParserRuleContext {
		public GpFunctionCallsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gpFunctionCalls; }

		public GpFunctionCallsContext() { }
		public void copyFrom(GpFunctionCallsContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class GpIsfiniteFunctionContext extends GpFunctionCallsContext {
		public TerminalNode ISFINITE() { return getToken(EntireSqlParser.ISFINITE, 0); }
		public TerminalNode INTERVAL() { return getToken(EntireSqlParser.INTERVAL, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public GpIsfiniteFunctionContext(GpFunctionCallsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGpIsfiniteFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGpIsfiniteFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGpIsfiniteFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GpTocharFunctionContext extends GpFunctionCallsContext {
		public TerminalNode TO_CHAR() { return getToken(EntireSqlParser.TO_CHAR, 0); }
		public TerminalNode INTERVAL() { return getToken(EntireSqlParser.INTERVAL, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public GpTocharFunctionContext(GpFunctionCallsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGpTocharFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGpTocharFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGpTocharFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GpExtractFunctionContext extends GpFunctionCallsContext {
		public TerminalNode EXTRACT() { return getToken(EntireSqlParser.EXTRACT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode FROM() { return getToken(EntireSqlParser.FROM, 0); }
		public TerminalNode TIMESTAMP() { return getToken(EntireSqlParser.TIMESTAMP, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public GpExtractFunctionContext(GpFunctionCallsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGpExtractFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGpExtractFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGpExtractFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GpJustifyHourFunctionContext extends GpFunctionCallsContext {
		public TerminalNode JUSTIFY_HOURS() { return getToken(EntireSqlParser.JUSTIFY_HOURS, 0); }
		public TerminalNode INTERVAL() { return getToken(EntireSqlParser.INTERVAL, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public GpJustifyHourFunctionContext(GpFunctionCallsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGpJustifyHourFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGpJustifyHourFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGpJustifyHourFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GpAgeFunctionContext extends GpFunctionCallsContext {
		public TerminalNode AGE() { return getToken(EntireSqlParser.AGE, 0); }
		public List<TerminalNode> TIMESTAMP() { return getTokens(EntireSqlParser.TIMESTAMP); }
		public TerminalNode TIMESTAMP(int i) {
			return getToken(EntireSqlParser.TIMESTAMP, i);
		}
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public GpAgeFunctionContext(GpFunctionCallsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGpAgeFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGpAgeFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGpAgeFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GpJustifyIntervalFunctionContext extends GpFunctionCallsContext {
		public TerminalNode JUSTIFY_INTERVAL() { return getToken(EntireSqlParser.JUSTIFY_INTERVAL, 0); }
		public TerminalNode INTERVAL() { return getToken(EntireSqlParser.INTERVAL, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public GpJustifyIntervalFunctionContext(GpFunctionCallsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGpJustifyIntervalFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGpJustifyIntervalFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGpJustifyIntervalFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GpJustifyDaysFunctionContext extends GpFunctionCallsContext {
		public TerminalNode JUSTIFY_DAYS() { return getToken(EntireSqlParser.JUSTIFY_DAYS, 0); }
		public TerminalNode INTERVAL() { return getToken(EntireSqlParser.INTERVAL, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public GpJustifyDaysFunctionContext(GpFunctionCallsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGpJustifyDaysFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGpJustifyDaysFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGpJustifyDaysFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GpOverLayFunctionContext extends GpFunctionCallsContext {
		public TerminalNode OVERLAY() { return getToken(EntireSqlParser.OVERLAY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode PLACING() { return getToken(EntireSqlParser.PLACING, 0); }
		public TerminalNode FROM() { return getToken(EntireSqlParser.FROM, 0); }
		public TerminalNode FOR() { return getToken(EntireSqlParser.FOR, 0); }
		public GpOverLayFunctionContext(GpFunctionCallsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGpOverLayFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGpOverLayFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGpOverLayFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GpTrimFunctionContext extends GpFunctionCallsContext {
		public TerminalNode TRIM() { return getToken(EntireSqlParser.TRIM, 0); }
		public TerminalNode BOTH() { return getToken(EntireSqlParser.BOTH, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode FROM() { return getToken(EntireSqlParser.FROM, 0); }
		public GpTrimFunctionContext(GpFunctionCallsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGpTrimFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGpTrimFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGpTrimFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GpdatePartFunctionContext extends GpFunctionCallsContext {
		public TerminalNode DATE_PART() { return getToken(EntireSqlParser.DATE_PART, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode TIMESTAMP() { return getToken(EntireSqlParser.TIMESTAMP, 0); }
		public GpdatePartFunctionContext(GpFunctionCallsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterGpdatePartFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitGpdatePartFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitGpdatePartFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GpFunctionCallsContext gpFunctionCalls() throws RecognitionException {
		GpFunctionCallsContext _localctx = new GpFunctionCallsContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_gpFunctionCalls);
		try {
			setState(4273);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OVERLAY:
				_localctx = new GpOverLayFunctionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4197);
				match(OVERLAY);
				setState(4198);
				match(T__1);
				setState(4199);
				expression();
				setState(4200);
				match(PLACING);
				setState(4201);
				expression();
				setState(4202);
				match(FROM);
				setState(4203);
				expression();
				setState(4204);
				match(FOR);
				setState(4205);
				expression();
				setState(4206);
				match(T__3);
				}
				break;
			case TRIM:
				_localctx = new GpTrimFunctionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4208);
				match(TRIM);
				setState(4209);
				match(T__1);
				setState(4210);
				match(BOTH);
				setState(4211);
				expression();
				setState(4212);
				match(FROM);
				setState(4213);
				expression();
				setState(4214);
				match(T__3);
				}
				break;
			case TO_CHAR:
				_localctx = new GpTocharFunctionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4216);
				match(TO_CHAR);
				setState(4217);
				match(T__1);
				setState(4218);
				match(INTERVAL);
				setState(4219);
				string();
				setState(4220);
				match(T__2);
				setState(4221);
				string();
				setState(4222);
				match(T__3);
				}
				break;
			case AGE:
				_localctx = new GpAgeFunctionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4224);
				match(AGE);
				setState(4225);
				match(T__1);
				setState(4226);
				match(TIMESTAMP);
				setState(4227);
				string();
				setState(4228);
				match(T__2);
				setState(4229);
				match(TIMESTAMP);
				setState(4230);
				string();
				setState(4231);
				match(T__3);
				}
				break;
			case DATE_PART:
				_localctx = new GpdatePartFunctionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4233);
				match(DATE_PART);
				setState(4234);
				match(T__1);
				setState(4235);
				string();
				setState(4236);
				match(T__2);
				setState(4237);
				match(TIMESTAMP);
				setState(4238);
				string();
				setState(4239);
				match(T__3);
				}
				break;
			case EXTRACT:
				_localctx = new GpExtractFunctionContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4241);
				match(EXTRACT);
				setState(4242);
				match(T__1);
				setState(4243);
				expression();
				setState(4244);
				match(FROM);
				setState(4245);
				match(TIMESTAMP);
				setState(4246);
				string();
				setState(4247);
				match(T__3);
				}
				break;
			case ISFINITE:
				_localctx = new GpIsfiniteFunctionContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4249);
				match(ISFINITE);
				setState(4250);
				match(T__1);
				setState(4251);
				match(INTERVAL);
				setState(4252);
				string();
				setState(4253);
				match(T__3);
				}
				break;
			case JUSTIFY_DAYS:
				_localctx = new GpJustifyDaysFunctionContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(4255);
				match(JUSTIFY_DAYS);
				setState(4256);
				match(T__1);
				setState(4257);
				match(INTERVAL);
				setState(4258);
				string();
				setState(4259);
				match(T__3);
				}
				break;
			case JUSTIFY_HOURS:
				_localctx = new GpJustifyHourFunctionContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(4261);
				match(JUSTIFY_HOURS);
				setState(4262);
				match(T__1);
				setState(4263);
				match(INTERVAL);
				setState(4264);
				string();
				setState(4265);
				match(T__3);
				}
				break;
			case JUSTIFY_INTERVAL:
				_localctx = new GpJustifyIntervalFunctionContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(4267);
				match(JUSTIFY_INTERVAL);
				setState(4268);
				match(T__1);
				setState(4269);
				match(INTERVAL);
				setState(4270);
				string();
				setState(4271);
				match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MysqlFunctionCallsContext extends ParserRuleContext {
		public MysqlFunctionCallsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mysqlFunctionCalls; }

		public MysqlFunctionCallsContext() { }
		public void copyFrom(MysqlFunctionCallsContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class MysqlDateFunctionContext extends MysqlFunctionCallsContext {
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode INTERVAL() { return getToken(EntireSqlParser.INTERVAL, 0); }
		public IntervalFieldContext intervalField() {
			return getRuleContext(IntervalFieldContext.class,0);
		}
		public TerminalNode DATE_ADD() { return getToken(EntireSqlParser.DATE_ADD, 0); }
		public TerminalNode ADDDATE() { return getToken(EntireSqlParser.ADDDATE, 0); }
		public TerminalNode DATE_SUB() { return getToken(EntireSqlParser.DATE_SUB, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public MysqlDateFunctionContext(MysqlFunctionCallsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterMysqlDateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitMysqlDateFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitMysqlDateFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MysqlTrimFunctionContext extends MysqlFunctionCallsContext {
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode FROM() { return getToken(EntireSqlParser.FROM, 0); }
		public TerminalNode TRIM() { return getToken(EntireSqlParser.TRIM, 0); }
		public TerminalNode RTRIM() { return getToken(EntireSqlParser.RTRIM, 0); }
		public TerminalNode LTRIM() { return getToken(EntireSqlParser.LTRIM, 0); }
		public TerminalNode LEADING() { return getToken(EntireSqlParser.LEADING, 0); }
		public TerminalNode BOTH() { return getToken(EntireSqlParser.BOTH, 0); }
		public TerminalNode TRAILING() { return getToken(EntireSqlParser.TRAILING, 0); }
		public MysqlTrimFunctionContext(MysqlFunctionCallsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterMysqlTrimFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitMysqlTrimFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitMysqlTrimFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MysqlFunctionCallsContext mysqlFunctionCalls() throws RecognitionException {
		MysqlFunctionCallsContext _localctx = new MysqlFunctionCallsContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_mysqlFunctionCalls);
		int _la;
		try {
			setState(4295);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRIM:
			case LTRIM:
			case RTRIM:
				_localctx = new MysqlTrimFunctionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4275);
				_la = _input.LA(1);
				if ( !(((((_la - 378)) & ~0x3f) == 0 && ((1L << (_la - 378)) & ((1L << (TRIM - 378)) | (1L << (LTRIM - 378)) | (1L << (RTRIM - 378)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4276);
				match(T__1);
				setState(4277);
				_la = _input.LA(1);
				if ( !(((((_la - 381)) & ~0x3f) == 0 && ((1L << (_la - 381)) & ((1L << (BOTH - 381)) | (1L << (LEADING - 381)) | (1L << (TRAILING - 381)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4278);
				string();
				setState(4279);
				match(FROM);
				setState(4280);
				string();
				setState(4281);
				match(T__3);
				}
				break;
			case DATE_SUB:
			case ADDDATE:
			case DATE_ADD:
				_localctx = new MysqlDateFunctionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4283);
				_la = _input.LA(1);
				if ( !(((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (DATE_SUB - 396)) | (1L << (ADDDATE - 396)) | (1L << (DATE_ADD - 396)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4284);
				match(T__1);
				setState(4285);
				string();
				setState(4286);
				match(T__2);
				setState(4287);
				match(INTERVAL);
				setState(4290);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING:
				case UNICODE_STRING:
					{
					setState(4288);
					string();
					}
					break;
				case INTEGER_VALUE:
				case DECIMAL_VALUE:
				case DOUBLE_VALUE:
					{
					setState(4289);
					number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4292);
				intervalField();
				setState(4293);
				match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OracleJoinTypeContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(EntireSqlParser.PLUS, 0); }
		public OracleJoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oracleJoinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterOracleJoinType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitOracleJoinType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitOracleJoinType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OracleJoinTypeContext oracleJoinType() throws RecognitionException {
		OracleJoinTypeContext _localctx = new OracleJoinTypeContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_oracleJoinType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4297);
			if (!(isOracleType())) throw new FailedPredicateException(this, "isOracleType()");
			setState(4298);
			match(T__1);
			setState(4299);
			match(PLUS);
			setState(4300);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeConstructorContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DOUBLE_PRECISION() { return getToken(EntireSqlParser.DOUBLE_PRECISION, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TypeConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeConstructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterTypeConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitTypeConstructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitTypeConstructor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeConstructorContext typeConstructor() throws RecognitionException {
		TypeConstructorContext _localctx = new TypeConstructorContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_typeConstructor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4305);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case ALL:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case AT:
			case BERNOULLI:
			case BETWEEN:
			case BY:
			case CALL:
			case CASCADE:
			case CASE:
			case CAST:
			case CATALOGS:
			case COLUMN:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONSTRAINT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_PATH:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATA:
			case DATE:
			case DAY:
			case DEALLOCATE:
			case DESC:
			case DESCRIBE:
			case DISTINCT:
			case DISTRIBUTED:
			case DROP:
			case ELSE:
			case ESCAPE:
			case EXCEPT:
			case EXCLUDING:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FOR:
			case FORMAT:
			case FULL:
			case FUNCTIONS:
			case GRANT:
			case GRANTS:
			case GRAPHVIZ:
			case GROUP:
			case GROUPING:
			case HAVING:
			case HOUR:
			case IF:
			case IN:
			case INCLUDING:
			case INNER:
			case INPUT:
			case INSERT:
			case INTERSECT:
			case MINUSES:
			case INTERVAL:
			case INTO:
			case IO:
			case IS:
			case ISOLATION:
			case JSON:
			case JOIN:
			case LAST:
			case LATERAL:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LIMIT:
			case LISTAGG:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOGICAL:
			case MAP:
			case MINUTE:
			case MONTH:
			case MODIFY:
			case NATURAL:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NORMALIZE:
			case NULLIF:
			case NULLS:
			case ON:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case ORDINALITY:
			case OUTER:
			case OUTPUT:
			case OVER:
			case PARTITION:
			case PARTITIONS:
			case PATH:
			case POSITION:
			case PRECEDING:
			case PREPARE:
			case PRIVILEGES:
			case PROPERTIES:
			case PUBLIC:
			case RANGE:
			case READ:
			case RECURSIVE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTRICT:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SCHEMA:
			case SCHEMAS:
			case SECOND:
			case SERIALIZABLE:
			case SESSION:
			case SET:
			case SETS:
			case SHOW:
			case SOME:
			case START:
			case STATS:
			case SUBSTRING:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRANSACTION:
			case TRY_CAST:
			case TYPE:
			case TRUNCATE:
			case UPDATE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNION:
			case UNNEST:
			case USE:
			case VALIDATE:
			case VERBOSE:
			case VIEW:
			case WHEN:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case SEMI:
			case SORT:
			case OFFSET:
			case DEFAULT:
			case TABLESPACE:
			case EXTERNAL:
			case PURGE:
			case TEMPORARY:
			case PRIMARY:
			case KEY:
			case DISABLE:
			case NOVALIDATE:
			case FOREIGN:
			case REFERENCES:
			case PARTITIONED:
			case CLUSTERED:
			case SORTED:
			case BUCKETS:
			case SKEWED:
			case STORED:
			case DELIMITED:
			case FIELDS:
			case TERMINATED:
			case ESCAPED:
			case COLLECTION:
			case ITEMS:
			case KEYS:
			case LINES:
			case DEFINED:
			case SEQUENCEFILE:
			case TEXTFILE:
			case RCFILE:
			case ORC:
			case ORCFILE:
			case PARQUET:
			case AVRO:
			case JSONFILE:
			case INPUTFORMAT:
			case OUTPUTFORMAT:
			case SERDE:
			case SERDEPROPERTIES:
			case LOCATION:
			case TBLPROPERTIES:
			case RELY:
			case EXCHANGE:
			case RECOVER:
			case ARCHIVE:
			case UNARCHIVE:
			case IGNORE:
			case PROTECTION:
			case TOUCH:
			case ENABLE:
			case NO_DROP:
			case OFFLINE:
			case COMPACT:
			case WAIT:
			case CONCATENATE:
			case CHANGE:
			case AFTER:
			case DEFERRED:
			case REBUILD:
			case INDEX:
			case IDXPROPERTIES:
			case FUNCTION:
			case JAR:
			case FILE:
			case DATABASE:
			case DBPROPERTIES:
			case OWNER:
			case RELOAD:
			case USER:
			case ROLE:
			case FILEFORMAT:
			case LOAD:
			case LOCAL:
			case INPATH:
			case DIRECTORY:
			case VACUUM:
			case LIST:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case EVERY:
			case INCLUSIVE:
			case EXCLUSIVE:
			case TEMPLATE:
			case ENCODING:
			case LOG:
			case ERRORS:
			case SEGMENT:
			case REJECT:
			case PERCENT:
			case WRITABLE:
			case CHECK:
			case UNIQUE:
			case CONCURRENTLY:
			case BITMAP:
			case FORCE:
			case SPLIT:
			case REINDEX:
			case FREEZE:
			case MSCK:
			case REPAIR:
			case FETCH:
			case DEFINITION:
			case LESS:
			case THAN:
			case HASH:
			case NOLOGGING:
			case STRUCT:
			case GLOBAL:
			case PRESERVE:
			case AUTO_INCREMENT:
			case ENGINE:
			case CHARSET:
			case COMPRESS:
			case EXPRESS:
			case REPLICATED:
			case NOCOPIES:
			case SPACE:
			case SHRINK:
			case KEY_BLOCK_SIZE:
			case KEY_DC_SIZE:
			case AUTOEXTEND:
			case NEXT:
			case OFF:
			case MATCHED:
			case MERGE:
			case OUTFILE:
			case OPTIONALLY:
			case ENCLOSED:
			case DOUBLE_ENCLOSED:
			case NULL_VALUE:
			case OUTFILEMODE:
			case HDFS:
			case WRITEMODE:
			case NORMAL:
			case OVERWRITES:
			case FILECOUNT:
			case FILESIZE:
			case CHARACTER:
			case GBK:
			case UTF8:
			case HEAD:
			case RMTSELECT:
			case INFILE:
			case DATA_FORMAT:
			case SEPARATOR:
			case BLANKS:
			case AUTOFILL:
			case LENGTH:
			case TABLE_FIELDS:
			case MAX_BAD_RECORDS:
			case DATETIME:
			case TRACE:
			case TRACE_PATH:
			case NOSPLIT:
			case PARALLEL:
			case MAX_DATA_PROCESSORS:
			case MIN_CHUNK_SIZE:
			case SKIP_BAD_FILE:
			case NUM:
			case FILE_FORMAT:
			case IMMEDIATE:
			case STARTING:
			case ENDING:
			case INITIALLY:
			case REFRESH:
			case ACTIVATE:
			case LOGGED:
			case EMPTY:
			case SEQUENCE:
			case INCREMENT:
			case MINVALUE:
			case MAXVALUE:
			case OVERLAY:
			case PLACING:
			case TRIM:
			case LTRIM:
			case RTRIM:
			case BOTH:
			case TO_CHAR:
			case AGE:
			case DATE_PART:
			case ISFINITE:
			case INT:
			case UNSIGNED:
			case REGEXP:
			case BINARY:
			case LEADING:
			case TRAILING:
			case RLIKE:
			case DATE_SUB:
			case ADDDATE:
			case DATE_ADD:
			case YEAR_MONTH:
			case DAY_HOUR:
			case DAY_MINUTE:
			case DAY_SECOND:
			case HOUR_MINUTE:
			case HOUR_SECOND:
			case MINUTE_SECOND:
			case UNKNOWN:
			case IDENTIFIER:
			case DIGIT_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
				{
				setState(4302);
				identifier(0);
				}
				break;
			case DOUBLE_PRECISION:
				{
				setState(4303);
				match(DOUBLE_PRECISION);
				}
				break;
			case INTEGER_VALUE:
			case DECIMAL_VALUE:
			case DOUBLE_VALUE:
				{
				setState(4304);
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4308);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING || _la==UNICODE_STRING) {
				{
				setState(4307);
				string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringContext extends ParserRuleContext {
		public StringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string; }

		public StringContext() { }
		public void copyFrom(StringContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnicodeStringLiteralContext extends StringContext {
		public TerminalNode UNICODE_STRING() { return getToken(EntireSqlParser.UNICODE_STRING, 0); }
		public TerminalNode UESCAPE() { return getToken(EntireSqlParser.UESCAPE, 0); }
		public TerminalNode STRING() { return getToken(EntireSqlParser.STRING, 0); }
		public UnicodeStringLiteralContext(StringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterUnicodeStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitUnicodeStringLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitUnicodeStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BasicStringLiteralContext extends StringContext {
		public TerminalNode STRING() { return getToken(EntireSqlParser.STRING, 0); }
		public BasicStringLiteralContext(StringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterBasicStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitBasicStringLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitBasicStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringContext string() throws RecognitionException {
		StringContext _localctx = new StringContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_string);
		try {
			setState(4316);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
				_localctx = new BasicStringLiteralContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4310);
				match(STRING);
				}
				break;
			case UNICODE_STRING:
				_localctx = new UnicodeStringLiteralContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4311);
				match(UNICODE_STRING);
				setState(4314);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
				case 1:
					{
					setState(4312);
					match(UESCAPE);
					setState(4313);
					match(STRING);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimeZoneSpecifierContext extends ParserRuleContext {
		public TimeZoneSpecifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeZoneSpecifier; }

		public TimeZoneSpecifierContext() { }
		public void copyFrom(TimeZoneSpecifierContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TimeZoneIntervalContext extends TimeZoneSpecifierContext {
		public TerminalNode TIME() { return getToken(EntireSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(EntireSqlParser.ZONE, 0); }
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public TimeZoneIntervalContext(TimeZoneSpecifierContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterTimeZoneInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitTimeZoneInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitTimeZoneInterval(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TimeZoneStringContext extends TimeZoneSpecifierContext {
		public TerminalNode TIME() { return getToken(EntireSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(EntireSqlParser.ZONE, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TimeZoneStringContext(TimeZoneSpecifierContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterTimeZoneString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitTimeZoneString(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitTimeZoneString(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimeZoneSpecifierContext timeZoneSpecifier() throws RecognitionException {
		TimeZoneSpecifierContext _localctx = new TimeZoneSpecifierContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_timeZoneSpecifier);
		try {
			setState(4324);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
			case 1:
				_localctx = new TimeZoneIntervalContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4318);
				match(TIME);
				setState(4319);
				match(ZONE);
				setState(4320);
				interval();
				}
				break;
			case 2:
				_localctx = new TimeZoneStringContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4321);
				match(TIME);
				setState(4322);
				match(ZONE);
				setState(4323);
				string();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQ() { return getToken(EntireSqlParser.EQ, 0); }
		public TerminalNode NEQ() { return getToken(EntireSqlParser.NEQ, 0); }
		public TerminalNode LT() { return getToken(EntireSqlParser.LT, 0); }
		public TerminalNode LTE() { return getToken(EntireSqlParser.LTE, 0); }
		public TerminalNode GT() { return getToken(EntireSqlParser.GT, 0); }
		public TerminalNode GTE() { return getToken(EntireSqlParser.GTE, 0); }
		public TerminalNode NULLEQ() { return getToken(EntireSqlParser.NULLEQ, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_comparisonOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4326);
			_la = _input.LA(1);
			if ( !(((((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & ((1L << (NULLEQ - 407)) | (1L << (EQ - 407)) | (1L << (NEQ - 407)) | (1L << (LT - 407)) | (1L << (LTE - 407)) | (1L << (GT - 407)) | (1L << (GTE - 407)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonQuantifierContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(EntireSqlParser.ALL, 0); }
		public TerminalNode SOME() { return getToken(EntireSqlParser.SOME, 0); }
		public TerminalNode ANY() { return getToken(EntireSqlParser.ANY, 0); }
		public ComparisonQuantifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonQuantifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterComparisonQuantifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitComparisonQuantifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitComparisonQuantifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonQuantifierContext comparisonQuantifier() throws RecognitionException {
		ComparisonQuantifierContext _localctx = new ComparisonQuantifierContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_comparisonQuantifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4328);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanValueContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(EntireSqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(EntireSqlParser.FALSE, 0); }
		public BooleanValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterBooleanValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitBooleanValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitBooleanValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanValueContext booleanValue() throws RecognitionException {
		BooleanValueContext _localctx = new BooleanValueContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_booleanValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4330);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalContext extends ParserRuleContext {
		public Token sign;
		public IntervalFieldContext from;
		public IntervalFieldContext to;
		public TerminalNode INTERVAL() { return getToken(EntireSqlParser.INTERVAL, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public List<IntervalFieldContext> intervalField() {
			return getRuleContexts(IntervalFieldContext.class);
		}
		public IntervalFieldContext intervalField(int i) {
			return getRuleContext(IntervalFieldContext.class,i);
		}
		public TerminalNode TO() { return getToken(EntireSqlParser.TO, 0); }
		public TerminalNode PLUS() { return getToken(EntireSqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(EntireSqlParser.MINUS, 0); }
		public IntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalContext interval() throws RecognitionException {
		IntervalContext _localctx = new IntervalContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_interval);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4332);
			match(INTERVAL);
			setState(4334);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				setState(4333);
				((IntervalContext)_localctx).sign = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((IntervalContext)_localctx).sign = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4336);
			string();
			setState(4337);
			((IntervalContext)_localctx).from = intervalField();
			setState(4340);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
			case 1:
				{
				setState(4338);
				match(TO);
				setState(4339);
				((IntervalContext)_localctx).to = intervalField();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalFieldContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(EntireSqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(EntireSqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(EntireSqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(EntireSqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(EntireSqlParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(EntireSqlParser.SECOND, 0); }
		public TerminalNode YEAR_MONTH() { return getToken(EntireSqlParser.YEAR_MONTH, 0); }
		public TerminalNode DAY_HOUR() { return getToken(EntireSqlParser.DAY_HOUR, 0); }
		public TerminalNode DAY_MINUTE() { return getToken(EntireSqlParser.DAY_MINUTE, 0); }
		public TerminalNode DAY_SECOND() { return getToken(EntireSqlParser.DAY_SECOND, 0); }
		public TerminalNode HOUR_MINUTE() { return getToken(EntireSqlParser.HOUR_MINUTE, 0); }
		public TerminalNode HOUR_SECOND() { return getToken(EntireSqlParser.HOUR_SECOND, 0); }
		public TerminalNode MINUTE_SECOND() { return getToken(EntireSqlParser.MINUTE_SECOND, 0); }
		public IntervalFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterIntervalField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitIntervalField(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitIntervalField(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalFieldContext intervalField() throws RecognitionException {
		IntervalFieldContext _localctx = new IntervalFieldContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_intervalField);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4342);
			_la = _input.LA(1);
			if ( !(((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (DAY - 48)) | (1L << (HOUR - 48)) | (1L << (MINUTE - 48)) | (1L << (MONTH - 48)))) != 0) || _la==SECOND || _la==YEAR || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (YEAR_MONTH - 399)) | (1L << (DAY_HOUR - 399)) | (1L << (DAY_MINUTE - 399)) | (1L << (DAY_SECOND - 399)) | (1L << (HOUR_MINUTE - 399)) | (1L << (HOUR_SECOND - 399)) | (1L << (MINUTE_SECOND - 399)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NormalFormContext extends ParserRuleContext {
		public TerminalNode NFD() { return getToken(EntireSqlParser.NFD, 0); }
		public TerminalNode NFC() { return getToken(EntireSqlParser.NFC, 0); }
		public TerminalNode NFKD() { return getToken(EntireSqlParser.NFKD, 0); }
		public TerminalNode NFKC() { return getToken(EntireSqlParser.NFKC, 0); }
		public NormalFormContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_normalForm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterNormalForm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitNormalForm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitNormalForm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NormalFormContext normalForm() throws RecognitionException {
		NormalFormContext _localctx = new NormalFormContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_normalForm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4344);
			_la = _input.LA(1);
			if ( !(((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (NFC - 111)) | (1L << (NFD - 111)) | (1L << (NFKC - 111)) | (1L << (NFKD - 111)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeContext extends ParserRuleContext {
		public IntervalFieldContext from;
		public IntervalFieldContext to;
		public TerminalNode STRUCT() { return getToken(EntireSqlParser.STRUCT, 0); }
		public TerminalNode LT() { return getToken(EntireSqlParser.LT, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode GT() { return getToken(EntireSqlParser.GT, 0); }
		public TerminalNode ARRAY() { return getToken(EntireSqlParser.ARRAY, 0); }
		public List<TypeContext> type() {
			return getRuleContexts(TypeContext.class);
		}
		public TypeContext type(int i) {
			return getRuleContext(TypeContext.class,i);
		}
		public TerminalNode MAP() { return getToken(EntireSqlParser.MAP, 0); }
		public TerminalNode ROW() { return getToken(EntireSqlParser.ROW, 0); }
		public BaseTypeContext baseType() {
			return getRuleContext(BaseTypeContext.class,0);
		}
		public List<TypeParameterContext> typeParameter() {
			return getRuleContexts(TypeParameterContext.class);
		}
		public TypeParameterContext typeParameter(int i) {
			return getRuleContext(TypeParameterContext.class,i);
		}
		public TerminalNode INTERVAL() { return getToken(EntireSqlParser.INTERVAL, 0); }
		public TerminalNode TO() { return getToken(EntireSqlParser.TO, 0); }
		public List<IntervalFieldContext> intervalField() {
			return getRuleContexts(IntervalFieldContext.class);
		}
		public IntervalFieldContext intervalField(int i) {
			return getRuleContext(IntervalFieldContext.class,i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeContext type() throws RecognitionException {
		return type(0);
	}

	private TypeContext type(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TypeContext _localctx = new TypeContext(_ctx, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 220;
		enterRecursionRule(_localctx, 220, RULE_type, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4405);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
			case 1:
				{
				setState(4347);
				match(STRUCT);
				setState(4348);
				match(LT);
				setState(4349);
				identifier(0);
				setState(4354);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__2) {
					{
					{
					setState(4350);
					match(T__2);
					setState(4351);
					identifier(0);
					}
					}
					setState(4356);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4357);
				match(GT);
				}
				break;
			case 2:
				{
				setState(4359);
				match(ARRAY);
				setState(4360);
				match(LT);
				setState(4361);
				type(0);
				setState(4362);
				match(GT);
				}
				break;
			case 3:
				{
				setState(4364);
				match(MAP);
				setState(4365);
				match(LT);
				setState(4366);
				type(0);
				setState(4367);
				match(T__2);
				setState(4368);
				type(0);
				setState(4369);
				match(GT);
				}
				break;
			case 4:
				{
				setState(4371);
				match(ROW);
				setState(4372);
				match(T__1);
				setState(4373);
				identifier(0);
				setState(4374);
				type(0);
				setState(4381);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__2) {
					{
					{
					setState(4375);
					match(T__2);
					setState(4376);
					identifier(0);
					setState(4377);
					type(0);
					}
					}
					setState(4383);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4384);
				match(T__3);
				}
				break;
			case 5:
				{
				setState(4386);
				baseType();
				setState(4398);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
				case 1:
					{
					setState(4387);
					match(T__1);
					setState(4388);
					typeParameter();
					setState(4393);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==T__2) {
						{
						{
						setState(4389);
						match(T__2);
						setState(4390);
						typeParameter();
						}
						}
						setState(4395);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4396);
					match(T__3);
					}
					break;
				}
				}
				break;
			case 6:
				{
				setState(4400);
				match(INTERVAL);
				setState(4401);
				((TypeContext)_localctx).from = intervalField();
				setState(4402);
				match(TO);
				setState(4403);
				((TypeContext)_localctx).to = intervalField();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(4411);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,540,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_type);
					setState(4407);
					if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
					setState(4408);
					match(ARRAY);
					}
					}
				}
				setState(4413);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,540,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TypeParameterContext extends ParserRuleContext {
		public TerminalNode INTEGER_VALUE() { return getToken(EntireSqlParser.INTEGER_VALUE, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterTypeParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitTypeParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitTypeParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeParameterContext typeParameter() throws RecognitionException {
		TypeParameterContext _localctx = new TypeParameterContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_typeParameter);
		try {
			setState(4416);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTEGER_VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4414);
				match(INTEGER_VALUE);
				}
				break;
			case ADD:
			case ALL:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case AT:
			case BERNOULLI:
			case BETWEEN:
			case BY:
			case CALL:
			case CASCADE:
			case CASE:
			case CAST:
			case CATALOGS:
			case COLUMN:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONSTRAINT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_PATH:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATA:
			case DATE:
			case DAY:
			case DEALLOCATE:
			case DESC:
			case DESCRIBE:
			case DISTINCT:
			case DISTRIBUTED:
			case DROP:
			case ELSE:
			case ESCAPE:
			case EXCEPT:
			case EXCLUDING:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FOR:
			case FORMAT:
			case FULL:
			case FUNCTIONS:
			case GRANT:
			case GRANTS:
			case GRAPHVIZ:
			case GROUP:
			case GROUPING:
			case HAVING:
			case HOUR:
			case IF:
			case IN:
			case INCLUDING:
			case INNER:
			case INPUT:
			case INSERT:
			case INTERSECT:
			case MINUSES:
			case INTERVAL:
			case INTO:
			case IO:
			case IS:
			case ISOLATION:
			case JSON:
			case JOIN:
			case LAST:
			case LATERAL:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LIMIT:
			case LISTAGG:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOGICAL:
			case MAP:
			case MINUTE:
			case MONTH:
			case MODIFY:
			case NATURAL:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NORMALIZE:
			case NULLIF:
			case NULLS:
			case ON:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case ORDINALITY:
			case OUTER:
			case OUTPUT:
			case OVER:
			case PARTITION:
			case PARTITIONS:
			case PATH:
			case POSITION:
			case PRECEDING:
			case PREPARE:
			case PRIVILEGES:
			case PROPERTIES:
			case PUBLIC:
			case RANGE:
			case READ:
			case RECURSIVE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTRICT:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SCHEMA:
			case SCHEMAS:
			case SECOND:
			case SERIALIZABLE:
			case SESSION:
			case SET:
			case SETS:
			case SHOW:
			case SOME:
			case START:
			case STATS:
			case SUBSTRING:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRANSACTION:
			case TRY_CAST:
			case TYPE:
			case TRUNCATE:
			case UPDATE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNION:
			case UNNEST:
			case USE:
			case VALIDATE:
			case VERBOSE:
			case VIEW:
			case WHEN:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case SEMI:
			case SORT:
			case OFFSET:
			case DEFAULT:
			case TABLESPACE:
			case EXTERNAL:
			case PURGE:
			case TEMPORARY:
			case PRIMARY:
			case KEY:
			case DISABLE:
			case NOVALIDATE:
			case FOREIGN:
			case REFERENCES:
			case PARTITIONED:
			case CLUSTERED:
			case SORTED:
			case BUCKETS:
			case SKEWED:
			case STORED:
			case DELIMITED:
			case FIELDS:
			case TERMINATED:
			case ESCAPED:
			case COLLECTION:
			case ITEMS:
			case KEYS:
			case LINES:
			case DEFINED:
			case SEQUENCEFILE:
			case TEXTFILE:
			case RCFILE:
			case ORC:
			case ORCFILE:
			case PARQUET:
			case AVRO:
			case JSONFILE:
			case INPUTFORMAT:
			case OUTPUTFORMAT:
			case SERDE:
			case SERDEPROPERTIES:
			case LOCATION:
			case TBLPROPERTIES:
			case RELY:
			case EXCHANGE:
			case RECOVER:
			case ARCHIVE:
			case UNARCHIVE:
			case IGNORE:
			case PROTECTION:
			case TOUCH:
			case ENABLE:
			case NO_DROP:
			case OFFLINE:
			case COMPACT:
			case WAIT:
			case CONCATENATE:
			case CHANGE:
			case AFTER:
			case DEFERRED:
			case REBUILD:
			case INDEX:
			case IDXPROPERTIES:
			case FUNCTION:
			case JAR:
			case FILE:
			case DATABASE:
			case DBPROPERTIES:
			case OWNER:
			case RELOAD:
			case USER:
			case ROLE:
			case FILEFORMAT:
			case LOAD:
			case LOCAL:
			case INPATH:
			case DIRECTORY:
			case VACUUM:
			case LIST:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case EVERY:
			case INCLUSIVE:
			case EXCLUSIVE:
			case TEMPLATE:
			case ENCODING:
			case LOG:
			case ERRORS:
			case SEGMENT:
			case REJECT:
			case PERCENT:
			case WRITABLE:
			case CHECK:
			case UNIQUE:
			case CONCURRENTLY:
			case BITMAP:
			case FORCE:
			case SPLIT:
			case REINDEX:
			case FREEZE:
			case MSCK:
			case REPAIR:
			case FETCH:
			case DEFINITION:
			case LESS:
			case THAN:
			case HASH:
			case NOLOGGING:
			case STRUCT:
			case GLOBAL:
			case PRESERVE:
			case AUTO_INCREMENT:
			case ENGINE:
			case CHARSET:
			case COMPRESS:
			case EXPRESS:
			case REPLICATED:
			case NOCOPIES:
			case SPACE:
			case SHRINK:
			case KEY_BLOCK_SIZE:
			case KEY_DC_SIZE:
			case AUTOEXTEND:
			case NEXT:
			case OFF:
			case MATCHED:
			case MERGE:
			case OUTFILE:
			case OPTIONALLY:
			case ENCLOSED:
			case DOUBLE_ENCLOSED:
			case NULL_VALUE:
			case OUTFILEMODE:
			case HDFS:
			case WRITEMODE:
			case NORMAL:
			case OVERWRITES:
			case FILECOUNT:
			case FILESIZE:
			case CHARACTER:
			case GBK:
			case UTF8:
			case HEAD:
			case RMTSELECT:
			case INFILE:
			case DATA_FORMAT:
			case SEPARATOR:
			case BLANKS:
			case AUTOFILL:
			case LENGTH:
			case TABLE_FIELDS:
			case MAX_BAD_RECORDS:
			case DATETIME:
			case TRACE:
			case TRACE_PATH:
			case NOSPLIT:
			case PARALLEL:
			case MAX_DATA_PROCESSORS:
			case MIN_CHUNK_SIZE:
			case SKIP_BAD_FILE:
			case NUM:
			case FILE_FORMAT:
			case IMMEDIATE:
			case STARTING:
			case ENDING:
			case INITIALLY:
			case REFRESH:
			case ACTIVATE:
			case LOGGED:
			case EMPTY:
			case SEQUENCE:
			case INCREMENT:
			case MINVALUE:
			case MAXVALUE:
			case OVERLAY:
			case PLACING:
			case TRIM:
			case LTRIM:
			case RTRIM:
			case BOTH:
			case TO_CHAR:
			case AGE:
			case DATE_PART:
			case ISFINITE:
			case INT:
			case UNSIGNED:
			case REGEXP:
			case BINARY:
			case LEADING:
			case TRAILING:
			case RLIKE:
			case DATE_SUB:
			case ADDDATE:
			case DATE_ADD:
			case YEAR_MONTH:
			case DAY_HOUR:
			case DAY_MINUTE:
			case DAY_SECOND:
			case HOUR_MINUTE:
			case HOUR_SECOND:
			case MINUTE_SECOND:
			case UNKNOWN:
			case IDENTIFIER:
			case DIGIT_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
			case TIME_WITH_TIME_ZONE:
			case TIMESTAMP_WITH_TIME_ZONE:
			case INT_UNSIGNED:
			case DOUBLE_PRECISION:
				enterOuterAlt(_localctx, 2);
				{
				setState(4415);
				type(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BaseTypeContext extends ParserRuleContext {
		public TerminalNode TIME_WITH_TIME_ZONE() { return getToken(EntireSqlParser.TIME_WITH_TIME_ZONE, 0); }
		public TerminalNode TIMESTAMP_WITH_TIME_ZONE() { return getToken(EntireSqlParser.TIMESTAMP_WITH_TIME_ZONE, 0); }
		public TerminalNode DOUBLE_PRECISION() { return getToken(EntireSqlParser.DOUBLE_PRECISION, 0); }
		public TerminalNode INT_UNSIGNED() { return getToken(EntireSqlParser.INT_UNSIGNED, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public BaseTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_baseType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterBaseType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitBaseType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitBaseType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BaseTypeContext baseType() throws RecognitionException {
		BaseTypeContext _localctx = new BaseTypeContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_baseType);
		try {
			setState(4423);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TIME_WITH_TIME_ZONE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4418);
				match(TIME_WITH_TIME_ZONE);
				}
				break;
			case TIMESTAMP_WITH_TIME_ZONE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4419);
				match(TIMESTAMP_WITH_TIME_ZONE);
				}
				break;
			case DOUBLE_PRECISION:
				enterOuterAlt(_localctx, 3);
				{
				setState(4420);
				match(DOUBLE_PRECISION);
				}
				break;
			case INT_UNSIGNED:
				enterOuterAlt(_localctx, 4);
				{
				setState(4421);
				match(INT_UNSIGNED);
				}
				break;
			case ADD:
			case ALL:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case AT:
			case BERNOULLI:
			case BETWEEN:
			case BY:
			case CALL:
			case CASCADE:
			case CASE:
			case CAST:
			case CATALOGS:
			case COLUMN:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONSTRAINT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_PATH:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATA:
			case DATE:
			case DAY:
			case DEALLOCATE:
			case DESC:
			case DESCRIBE:
			case DISTINCT:
			case DISTRIBUTED:
			case DROP:
			case ELSE:
			case ESCAPE:
			case EXCEPT:
			case EXCLUDING:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FOR:
			case FORMAT:
			case FULL:
			case FUNCTIONS:
			case GRANT:
			case GRANTS:
			case GRAPHVIZ:
			case GROUP:
			case GROUPING:
			case HAVING:
			case HOUR:
			case IF:
			case IN:
			case INCLUDING:
			case INNER:
			case INPUT:
			case INSERT:
			case INTERSECT:
			case MINUSES:
			case INTERVAL:
			case INTO:
			case IO:
			case IS:
			case ISOLATION:
			case JSON:
			case JOIN:
			case LAST:
			case LATERAL:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LIMIT:
			case LISTAGG:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOGICAL:
			case MAP:
			case MINUTE:
			case MONTH:
			case MODIFY:
			case NATURAL:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NORMALIZE:
			case NULLIF:
			case NULLS:
			case ON:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case ORDINALITY:
			case OUTER:
			case OUTPUT:
			case OVER:
			case PARTITION:
			case PARTITIONS:
			case PATH:
			case POSITION:
			case PRECEDING:
			case PREPARE:
			case PRIVILEGES:
			case PROPERTIES:
			case PUBLIC:
			case RANGE:
			case READ:
			case RECURSIVE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTRICT:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SCHEMA:
			case SCHEMAS:
			case SECOND:
			case SERIALIZABLE:
			case SESSION:
			case SET:
			case SETS:
			case SHOW:
			case SOME:
			case START:
			case STATS:
			case SUBSTRING:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRANSACTION:
			case TRY_CAST:
			case TYPE:
			case TRUNCATE:
			case UPDATE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNION:
			case UNNEST:
			case USE:
			case VALIDATE:
			case VERBOSE:
			case VIEW:
			case WHEN:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case SEMI:
			case SORT:
			case OFFSET:
			case DEFAULT:
			case TABLESPACE:
			case EXTERNAL:
			case PURGE:
			case TEMPORARY:
			case PRIMARY:
			case KEY:
			case DISABLE:
			case NOVALIDATE:
			case FOREIGN:
			case REFERENCES:
			case PARTITIONED:
			case CLUSTERED:
			case SORTED:
			case BUCKETS:
			case SKEWED:
			case STORED:
			case DELIMITED:
			case FIELDS:
			case TERMINATED:
			case ESCAPED:
			case COLLECTION:
			case ITEMS:
			case KEYS:
			case LINES:
			case DEFINED:
			case SEQUENCEFILE:
			case TEXTFILE:
			case RCFILE:
			case ORC:
			case ORCFILE:
			case PARQUET:
			case AVRO:
			case JSONFILE:
			case INPUTFORMAT:
			case OUTPUTFORMAT:
			case SERDE:
			case SERDEPROPERTIES:
			case LOCATION:
			case TBLPROPERTIES:
			case RELY:
			case EXCHANGE:
			case RECOVER:
			case ARCHIVE:
			case UNARCHIVE:
			case IGNORE:
			case PROTECTION:
			case TOUCH:
			case ENABLE:
			case NO_DROP:
			case OFFLINE:
			case COMPACT:
			case WAIT:
			case CONCATENATE:
			case CHANGE:
			case AFTER:
			case DEFERRED:
			case REBUILD:
			case INDEX:
			case IDXPROPERTIES:
			case FUNCTION:
			case JAR:
			case FILE:
			case DATABASE:
			case DBPROPERTIES:
			case OWNER:
			case RELOAD:
			case USER:
			case ROLE:
			case FILEFORMAT:
			case LOAD:
			case LOCAL:
			case INPATH:
			case DIRECTORY:
			case VACUUM:
			case LIST:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case EVERY:
			case INCLUSIVE:
			case EXCLUSIVE:
			case TEMPLATE:
			case ENCODING:
			case LOG:
			case ERRORS:
			case SEGMENT:
			case REJECT:
			case PERCENT:
			case WRITABLE:
			case CHECK:
			case UNIQUE:
			case CONCURRENTLY:
			case BITMAP:
			case FORCE:
			case SPLIT:
			case REINDEX:
			case FREEZE:
			case MSCK:
			case REPAIR:
			case FETCH:
			case DEFINITION:
			case LESS:
			case THAN:
			case HASH:
			case NOLOGGING:
			case STRUCT:
			case GLOBAL:
			case PRESERVE:
			case AUTO_INCREMENT:
			case ENGINE:
			case CHARSET:
			case COMPRESS:
			case EXPRESS:
			case REPLICATED:
			case NOCOPIES:
			case SPACE:
			case SHRINK:
			case KEY_BLOCK_SIZE:
			case KEY_DC_SIZE:
			case AUTOEXTEND:
			case NEXT:
			case OFF:
			case MATCHED:
			case MERGE:
			case OUTFILE:
			case OPTIONALLY:
			case ENCLOSED:
			case DOUBLE_ENCLOSED:
			case NULL_VALUE:
			case OUTFILEMODE:
			case HDFS:
			case WRITEMODE:
			case NORMAL:
			case OVERWRITES:
			case FILECOUNT:
			case FILESIZE:
			case CHARACTER:
			case GBK:
			case UTF8:
			case HEAD:
			case RMTSELECT:
			case INFILE:
			case DATA_FORMAT:
			case SEPARATOR:
			case BLANKS:
			case AUTOFILL:
			case LENGTH:
			case TABLE_FIELDS:
			case MAX_BAD_RECORDS:
			case DATETIME:
			case TRACE:
			case TRACE_PATH:
			case NOSPLIT:
			case PARALLEL:
			case MAX_DATA_PROCESSORS:
			case MIN_CHUNK_SIZE:
			case SKIP_BAD_FILE:
			case NUM:
			case FILE_FORMAT:
			case IMMEDIATE:
			case STARTING:
			case ENDING:
			case INITIALLY:
			case REFRESH:
			case ACTIVATE:
			case LOGGED:
			case EMPTY:
			case SEQUENCE:
			case INCREMENT:
			case MINVALUE:
			case MAXVALUE:
			case OVERLAY:
			case PLACING:
			case TRIM:
			case LTRIM:
			case RTRIM:
			case BOTH:
			case TO_CHAR:
			case AGE:
			case DATE_PART:
			case ISFINITE:
			case INT:
			case UNSIGNED:
			case REGEXP:
			case BINARY:
			case LEADING:
			case TRAILING:
			case RLIKE:
			case DATE_SUB:
			case ADDDATE:
			case DATE_ADD:
			case YEAR_MONTH:
			case DAY_HOUR:
			case DAY_MINUTE:
			case DAY_SECOND:
			case HOUR_MINUTE:
			case HOUR_SECOND:
			case MINUTE_SECOND:
			case UNKNOWN:
			case IDENTIFIER:
			case DIGIT_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
				enterOuterAlt(_localctx, 5);
				{
				setState(4422);
				identifier(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhenClauseContext extends ParserRuleContext {
		public ExpressionContext condition;
		public ExpressionContext result;
		public TerminalNode WHEN() { return getToken(EntireSqlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(EntireSqlParser.THEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public WhenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterWhenClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitWhenClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitWhenClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhenClauseContext whenClause() throws RecognitionException {
		WhenClauseContext _localctx = new WhenClauseContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_whenClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4425);
			match(WHEN);
			setState(4426);
			((WhenClauseContext)_localctx).condition = expression();
			setState(4427);
			match(THEN);
			setState(4428);
			((WhenClauseContext)_localctx).result = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterContext extends ParserRuleContext {
		public TerminalNode FILTER() { return getToken(EntireSqlParser.FILTER, 0); }
		public TerminalNode WHERE() { return getToken(EntireSqlParser.WHERE, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public FilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterContext filter() throws RecognitionException {
		FilterContext _localctx = new FilterContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_filter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4430);
			match(FILTER);
			setState(4431);
			match(T__1);
			setState(4432);
			match(WHERE);
			setState(4433);
			booleanExpression(0);
			setState(4434);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverContext extends ParserRuleContext {
		public ExpressionContext expression;
		public List<ExpressionContext> partition = new ArrayList<ExpressionContext>();
		public TerminalNode OVER() { return getToken(EntireSqlParser.OVER, 0); }
		public TerminalNode PARTITION() { return getToken(EntireSqlParser.PARTITION, 0); }
		public List<TerminalNode> BY() { return getTokens(EntireSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(EntireSqlParser.BY, i);
		}
		public TerminalNode ORDER() { return getToken(EntireSqlParser.ORDER, 0); }
		public List<SortItemContext> sortItem() {
			return getRuleContexts(SortItemContext.class);
		}
		public SortItemContext sortItem(int i) {
			return getRuleContext(SortItemContext.class,i);
		}
		public WindowFrameContext windowFrame() {
			return getRuleContext(WindowFrameContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public OverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterOver(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitOver(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitOver(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverContext over() throws RecognitionException {
		OverContext _localctx = new OverContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_over);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4436);
			match(OVER);
			setState(4437);
			match(T__1);
			setState(4448);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4438);
				match(PARTITION);
				setState(4439);
				match(BY);
				setState(4440);
				((OverContext)_localctx).expression = expression();
				((OverContext)_localctx).partition.add(((OverContext)_localctx).expression);
				setState(4445);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__2) {
					{
					{
					setState(4441);
					match(T__2);
					setState(4442);
					((OverContext)_localctx).expression = expression();
					((OverContext)_localctx).partition.add(((OverContext)_localctx).expression);
					}
					}
					setState(4447);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4460);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(4450);
				match(ORDER);
				setState(4451);
				match(BY);
				setState(4452);
				sortItem();
				setState(4457);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__2) {
					{
					{
					setState(4453);
					match(T__2);
					setState(4454);
					sortItem();
					}
					}
					setState(4459);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4463);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				setState(4462);
				windowFrame();
				}
			}

			setState(4465);
			match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameContext extends ParserRuleContext {
		public Token frameType;
		public FrameBoundContext start;
		public FrameBoundContext end;
		public TerminalNode RANGE() { return getToken(EntireSqlParser.RANGE, 0); }
		public List<FrameBoundContext> frameBound() {
			return getRuleContexts(FrameBoundContext.class);
		}
		public FrameBoundContext frameBound(int i) {
			return getRuleContext(FrameBoundContext.class,i);
		}
		public TerminalNode ROWS() { return getToken(EntireSqlParser.ROWS, 0); }
		public TerminalNode BETWEEN() { return getToken(EntireSqlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(EntireSqlParser.AND, 0); }
		public WindowFrameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrame; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterWindowFrame(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitWindowFrame(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitWindowFrame(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameContext windowFrame() throws RecognitionException {
		WindowFrameContext _localctx = new WindowFrameContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_windowFrame);
		try {
			setState(4483);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4467);
				((WindowFrameContext)_localctx).frameType = match(RANGE);
				setState(4468);
				((WindowFrameContext)_localctx).start = frameBound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4469);
				((WindowFrameContext)_localctx).frameType = match(ROWS);
				setState(4470);
				((WindowFrameContext)_localctx).start = frameBound();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4471);
				((WindowFrameContext)_localctx).frameType = match(RANGE);
				setState(4472);
				match(BETWEEN);
				setState(4473);
				((WindowFrameContext)_localctx).start = frameBound();
				setState(4474);
				match(AND);
				setState(4475);
				((WindowFrameContext)_localctx).end = frameBound();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4477);
				((WindowFrameContext)_localctx).frameType = match(ROWS);
				setState(4478);
				match(BETWEEN);
				setState(4479);
				((WindowFrameContext)_localctx).start = frameBound();
				setState(4480);
				match(AND);
				setState(4481);
				((WindowFrameContext)_localctx).end = frameBound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameBoundContext extends ParserRuleContext {
		public FrameBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameBound; }

		public FrameBoundContext() { }
		public void copyFrom(FrameBoundContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class BoundedFrameContext extends FrameBoundContext {
		public Token boundType;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode PRECEDING() { return getToken(EntireSqlParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(EntireSqlParser.FOLLOWING, 0); }
		public BoundedFrameContext(FrameBoundContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterBoundedFrame(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitBoundedFrame(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitBoundedFrame(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnboundedFrameContext extends FrameBoundContext {
		public Token boundType;
		public TerminalNode UNBOUNDED() { return getToken(EntireSqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(EntireSqlParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(EntireSqlParser.FOLLOWING, 0); }
		public UnboundedFrameContext(FrameBoundContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterUnboundedFrame(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitUnboundedFrame(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitUnboundedFrame(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CurrentRowBoundContext extends FrameBoundContext {
		public TerminalNode CURRENT() { return getToken(EntireSqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(EntireSqlParser.ROW, 0); }
		public CurrentRowBoundContext(FrameBoundContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterCurrentRowBound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitCurrentRowBound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitCurrentRowBound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameBoundContext frameBound() throws RecognitionException {
		FrameBoundContext _localctx = new FrameBoundContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_frameBound);
		int _la;
		try {
			setState(4494);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,549,_ctx) ) {
			case 1:
				_localctx = new UnboundedFrameContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4485);
				match(UNBOUNDED);
				setState(4486);
				((UnboundedFrameContext)_localctx).boundType = match(PRECEDING);
				}
				break;
			case 2:
				_localctx = new UnboundedFrameContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4487);
				match(UNBOUNDED);
				setState(4488);
				((UnboundedFrameContext)_localctx).boundType = match(FOLLOWING);
				}
				break;
			case 3:
				_localctx = new CurrentRowBoundContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4489);
				match(CURRENT);
				setState(4490);
				match(ROW);
				}
				break;
			case 4:
				_localctx = new BoundedFrameContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4491);
				expression();
				setState(4492);
				((BoundedFrameContext)_localctx).boundType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
					((BoundedFrameContext)_localctx).boundType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainOptionContext extends ParserRuleContext {
		public ExplainOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainOption; }

		public ExplainOptionContext() { }
		public void copyFrom(ExplainOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ExplainFormatContext extends ExplainOptionContext {
		public Token value;
		public TerminalNode FORMAT() { return getToken(EntireSqlParser.FORMAT, 0); }
		public TerminalNode TEXT() { return getToken(EntireSqlParser.TEXT, 0); }
		public TerminalNode GRAPHVIZ() { return getToken(EntireSqlParser.GRAPHVIZ, 0); }
		public TerminalNode JSON() { return getToken(EntireSqlParser.JSON, 0); }
		public ExplainFormatContext(ExplainOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterExplainFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitExplainFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitExplainFormat(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExplainTypeContext extends ExplainOptionContext {
		public Token value;
		public TerminalNode TYPE() { return getToken(EntireSqlParser.TYPE, 0); }
		public TerminalNode LOGICAL() { return getToken(EntireSqlParser.LOGICAL, 0); }
		public TerminalNode DISTRIBUTED() { return getToken(EntireSqlParser.DISTRIBUTED, 0); }
		public TerminalNode VALIDATE() { return getToken(EntireSqlParser.VALIDATE, 0); }
		public TerminalNode IO() { return getToken(EntireSqlParser.IO, 0); }
		public ExplainTypeContext(ExplainOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterExplainType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitExplainType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitExplainType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainOptionContext explainOption() throws RecognitionException {
		ExplainOptionContext _localctx = new ExplainOptionContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_explainOption);
		int _la;
		try {
			setState(4500);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FORMAT:
				_localctx = new ExplainFormatContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4496);
				match(FORMAT);
				setState(4497);
				((ExplainFormatContext)_localctx).value = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==GRAPHVIZ || _la==JSON || _la==TEXT) ) {
					((ExplainFormatContext)_localctx).value = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TYPE:
				_localctx = new ExplainTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4498);
				match(TYPE);
				setState(4499);
				((ExplainTypeContext)_localctx).value = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (DISTRIBUTED - 54)) | (1L << (IO - 54)) | (1L << (LOGICAL - 54)))) != 0) || _la==VALIDATE) ) {
					((ExplainTypeContext)_localctx).value = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionModeContext extends ParserRuleContext {
		public TransactionModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionMode; }

		public TransactionModeContext() { }
		public void copyFrom(TransactionModeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TransactionAccessModeContext extends TransactionModeContext {
		public Token accessMode;
		public TerminalNode READ() { return getToken(EntireSqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(EntireSqlParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(EntireSqlParser.WRITE, 0); }
		public TransactionAccessModeContext(TransactionModeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterTransactionAccessMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitTransactionAccessMode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitTransactionAccessMode(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IsolationLevelContext extends TransactionModeContext {
		public TerminalNode ISOLATION() { return getToken(EntireSqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(EntireSqlParser.LEVEL, 0); }
		public LevelOfIsolationContext levelOfIsolation() {
			return getRuleContext(LevelOfIsolationContext.class,0);
		}
		public IsolationLevelContext(TransactionModeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterIsolationLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitIsolationLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitIsolationLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeContext transactionMode() throws RecognitionException {
		TransactionModeContext _localctx = new TransactionModeContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_transactionMode);
		int _la;
		try {
			setState(4507);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ISOLATION:
				_localctx = new IsolationLevelContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4502);
				match(ISOLATION);
				setState(4503);
				match(LEVEL);
				setState(4504);
				levelOfIsolation();
				}
				break;
			case READ:
				_localctx = new TransactionAccessModeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4505);
				match(READ);
				setState(4506);
				((TransactionAccessModeContext)_localctx).accessMode = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ONLY || _la==WRITE) ) {
					((TransactionAccessModeContext)_localctx).accessMode = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelOfIsolationContext extends ParserRuleContext {
		public LevelOfIsolationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelOfIsolation; }

		public LevelOfIsolationContext() { }
		public void copyFrom(LevelOfIsolationContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ReadUncommittedContext extends LevelOfIsolationContext {
		public TerminalNode READ() { return getToken(EntireSqlParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(EntireSqlParser.UNCOMMITTED, 0); }
		public ReadUncommittedContext(LevelOfIsolationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterReadUncommitted(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitReadUncommitted(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitReadUncommitted(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SerializableContext extends LevelOfIsolationContext {
		public TerminalNode SERIALIZABLE() { return getToken(EntireSqlParser.SERIALIZABLE, 0); }
		public SerializableContext(LevelOfIsolationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterSerializable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitSerializable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitSerializable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ReadCommittedContext extends LevelOfIsolationContext {
		public TerminalNode READ() { return getToken(EntireSqlParser.READ, 0); }
		public TerminalNode COMMITTED() { return getToken(EntireSqlParser.COMMITTED, 0); }
		public ReadCommittedContext(LevelOfIsolationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterReadCommitted(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitReadCommitted(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitReadCommitted(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RepeatableReadContext extends LevelOfIsolationContext {
		public TerminalNode REPEATABLE() { return getToken(EntireSqlParser.REPEATABLE, 0); }
		public TerminalNode READ() { return getToken(EntireSqlParser.READ, 0); }
		public RepeatableReadContext(LevelOfIsolationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterRepeatableRead(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitRepeatableRead(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitRepeatableRead(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelOfIsolationContext levelOfIsolation() throws RecognitionException {
		LevelOfIsolationContext _localctx = new LevelOfIsolationContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_levelOfIsolation);
		try {
			setState(4516);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,552,_ctx) ) {
			case 1:
				_localctx = new ReadUncommittedContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4509);
				match(READ);
				setState(4510);
				match(UNCOMMITTED);
				}
				break;
			case 2:
				_localctx = new ReadCommittedContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4511);
				match(READ);
				setState(4512);
				match(COMMITTED);
				}
				break;
			case 3:
				_localctx = new RepeatableReadContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4513);
				match(REPEATABLE);
				setState(4514);
				match(READ);
				}
				break;
			case 4:
				_localctx = new SerializableContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4515);
				match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallArgumentContext extends ParserRuleContext {
		public CallArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callArgument; }

		public CallArgumentContext() { }
		public void copyFrom(CallArgumentContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PositionalArgumentContext extends CallArgumentContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public PositionalArgumentContext(CallArgumentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterPositionalArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitPositionalArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitPositionalArgument(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NamedArgumentContext extends CallArgumentContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public NamedArgumentContext(CallArgumentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterNamedArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitNamedArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitNamedArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallArgumentContext callArgument() throws RecognitionException {
		CallArgumentContext _localctx = new CallArgumentContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_callArgument);
		try {
			setState(4523);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,553,_ctx) ) {
			case 1:
				_localctx = new PositionalArgumentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4518);
				expression();
				}
				break;
			case 2:
				_localctx = new NamedArgumentContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4519);
				identifier(0);
				setState(4520);
				match(T__10);
				setState(4521);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PathElementContext extends ParserRuleContext {
		public PathElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathElement; }

		public PathElementContext() { }
		public void copyFrom(PathElementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class QualifiedArgumentContext extends PathElementContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public QualifiedArgumentContext(PathElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterQualifiedArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitQualifiedArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitQualifiedArgument(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnqualifiedArgumentContext extends PathElementContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnqualifiedArgumentContext(PathElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterUnqualifiedArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitUnqualifiedArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitUnqualifiedArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PathElementContext pathElement() throws RecognitionException {
		PathElementContext _localctx = new PathElementContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_pathElement);
		try {
			setState(4530);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
			case 1:
				_localctx = new QualifiedArgumentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4525);
				identifier(0);
				setState(4526);
				match(T__4);
				setState(4527);
				identifier(0);
				}
				break;
			case 2:
				_localctx = new UnqualifiedArgumentContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4529);
				identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PathSpecificationContext extends ParserRuleContext {
		public List<PathElementContext> pathElement() {
			return getRuleContexts(PathElementContext.class);
		}
		public PathElementContext pathElement(int i) {
			return getRuleContext(PathElementContext.class,i);
		}
		public PathSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterPathSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitPathSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitPathSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PathSpecificationContext pathSpecification() throws RecognitionException {
		PathSpecificationContext _localctx = new PathSpecificationContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_pathSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4532);
			pathElement();
			setState(4537);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__2) {
				{
				{
				setState(4533);
				match(T__2);
				setState(4534);
				pathElement();
				}
				}
				setState(4539);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(EntireSqlParser.SELECT, 0); }
		public TerminalNode DELETE() { return getToken(EntireSqlParser.DELETE, 0); }
		public TerminalNode INSERT() { return getToken(EntireSqlParser.INSERT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitPrivilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_privilege);
		try {
			setState(4544);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4540);
				match(SELECT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4541);
				match(DELETE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4542);
				match(INSERT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4543);
				identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualifiedNameContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterQualifiedName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitQualifiedName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitQualifiedName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedNameContext qualifiedName() throws RecognitionException {
		QualifiedNameContext _localctx = new QualifiedNameContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_qualifiedName);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4546);
			identifier(0);
			setState(4551);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,557,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4547);
					match(T__4);
					setState(4548);
					identifier(0);
					}
					}
				}
				setState(4553);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,557,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }

		public IdentifierContext() { }
		public void copyFrom(IdentifierContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class BackQuotedIdentifierContext extends IdentifierContext {
		public TerminalNode BACKQUOTED_IDENTIFIER() { return getToken(EntireSqlParser.BACKQUOTED_IDENTIFIER, 0); }
		public BackQuotedIdentifierContext(IdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterBackQuotedIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitBackQuotedIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitBackQuotedIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MapidentifierContext extends IdentifierContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public MapidentifierContext(IdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterMapidentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitMapidentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitMapidentifier(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class QuotedIdentifierContext extends IdentifierContext {
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(EntireSqlParser.QUOTED_IDENTIFIER, 0); }
		public QuotedIdentifierContext(IdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterQuotedIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitQuotedIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitQuotedIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DigitIdentifierContext extends IdentifierContext {
		public TerminalNode DIGIT_IDENTIFIER() { return getToken(EntireSqlParser.DIGIT_IDENTIFIER, 0); }
		public DigitIdentifierContext(IdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterDigitIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitDigitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitDigitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnquotedIdentifierContext extends IdentifierContext {
		public List<TerminalNode> IDENTIFIER() { return getTokens(EntireSqlParser.IDENTIFIER); }
		public TerminalNode IDENTIFIER(int i) {
			return getToken(EntireSqlParser.IDENTIFIER, i);
		}
		public NonReservedContext nonReserved() {
			return getRuleContext(NonReservedContext.class,0);
		}
		public UnquotedIdentifierContext(IdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterUnquotedIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitUnquotedIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitUnquotedIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		return identifier(0);
	}

	private IdentifierContext identifier(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		IdentifierContext _localctx = new IdentifierContext(_ctx, _parentState);
		IdentifierContext _prevctx = _localctx;
		int _startState = 252;
		enterRecursionRule(_localctx, 252, RULE_identifier, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4566);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IDENTIFIER:
				{
				_localctx = new UnquotedIdentifierContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(4555);
				match(IDENTIFIER);
				setState(4560);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
				case 1:
					{
					{
					setState(4556);
					match(T__11);
					setState(4557);
					match(IDENTIFIER);
					}
					}
					break;
				case 2:
					{
					{
					setState(4558);
					match(T__5);
					setState(4559);
					match(IDENTIFIER);
					}
					}
					break;
				}
				}
				break;
			case QUOTED_IDENTIFIER:
				{
				_localctx = new QuotedIdentifierContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4562);
				match(QUOTED_IDENTIFIER);
				}
				break;
			case ADD:
			case ALL:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case AT:
			case BERNOULLI:
			case BETWEEN:
			case BY:
			case CALL:
			case CASCADE:
			case CASE:
			case CAST:
			case CATALOGS:
			case COLUMN:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONSTRAINT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_PATH:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATA:
			case DATE:
			case DAY:
			case DEALLOCATE:
			case DESC:
			case DESCRIBE:
			case DISTINCT:
			case DISTRIBUTED:
			case DROP:
			case ELSE:
			case ESCAPE:
			case EXCEPT:
			case EXCLUDING:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FOR:
			case FORMAT:
			case FULL:
			case FUNCTIONS:
			case GRANT:
			case GRANTS:
			case GRAPHVIZ:
			case GROUP:
			case GROUPING:
			case HAVING:
			case HOUR:
			case IF:
			case IN:
			case INCLUDING:
			case INNER:
			case INPUT:
			case INSERT:
			case INTERSECT:
			case MINUSES:
			case INTERVAL:
			case INTO:
			case IO:
			case IS:
			case ISOLATION:
			case JSON:
			case JOIN:
			case LAST:
			case LATERAL:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LIMIT:
			case LISTAGG:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOGICAL:
			case MAP:
			case MINUTE:
			case MONTH:
			case MODIFY:
			case NATURAL:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NORMALIZE:
			case NULLIF:
			case NULLS:
			case ON:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case ORDINALITY:
			case OUTER:
			case OUTPUT:
			case OVER:
			case PARTITION:
			case PARTITIONS:
			case PATH:
			case POSITION:
			case PRECEDING:
			case PREPARE:
			case PRIVILEGES:
			case PROPERTIES:
			case PUBLIC:
			case RANGE:
			case READ:
			case RECURSIVE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTRICT:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SCHEMA:
			case SCHEMAS:
			case SECOND:
			case SERIALIZABLE:
			case SESSION:
			case SET:
			case SETS:
			case SHOW:
			case SOME:
			case START:
			case STATS:
			case SUBSTRING:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRANSACTION:
			case TRY_CAST:
			case TYPE:
			case TRUNCATE:
			case UPDATE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNION:
			case UNNEST:
			case USE:
			case VALIDATE:
			case VERBOSE:
			case VIEW:
			case WHEN:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case SEMI:
			case SORT:
			case OFFSET:
			case DEFAULT:
			case TABLESPACE:
			case EXTERNAL:
			case PURGE:
			case TEMPORARY:
			case PRIMARY:
			case KEY:
			case DISABLE:
			case NOVALIDATE:
			case FOREIGN:
			case REFERENCES:
			case PARTITIONED:
			case CLUSTERED:
			case SORTED:
			case BUCKETS:
			case SKEWED:
			case STORED:
			case DELIMITED:
			case FIELDS:
			case TERMINATED:
			case ESCAPED:
			case COLLECTION:
			case ITEMS:
			case KEYS:
			case LINES:
			case DEFINED:
			case SEQUENCEFILE:
			case TEXTFILE:
			case RCFILE:
			case ORC:
			case ORCFILE:
			case PARQUET:
			case AVRO:
			case JSONFILE:
			case INPUTFORMAT:
			case OUTPUTFORMAT:
			case SERDE:
			case SERDEPROPERTIES:
			case LOCATION:
			case TBLPROPERTIES:
			case RELY:
			case EXCHANGE:
			case RECOVER:
			case ARCHIVE:
			case UNARCHIVE:
			case IGNORE:
			case PROTECTION:
			case TOUCH:
			case ENABLE:
			case NO_DROP:
			case OFFLINE:
			case COMPACT:
			case WAIT:
			case CONCATENATE:
			case CHANGE:
			case AFTER:
			case DEFERRED:
			case REBUILD:
			case INDEX:
			case IDXPROPERTIES:
			case FUNCTION:
			case JAR:
			case FILE:
			case DATABASE:
			case DBPROPERTIES:
			case OWNER:
			case RELOAD:
			case USER:
			case ROLE:
			case FILEFORMAT:
			case LOAD:
			case LOCAL:
			case INPATH:
			case DIRECTORY:
			case VACUUM:
			case LIST:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case EVERY:
			case INCLUSIVE:
			case EXCLUSIVE:
			case TEMPLATE:
			case ENCODING:
			case LOG:
			case ERRORS:
			case SEGMENT:
			case REJECT:
			case PERCENT:
			case WRITABLE:
			case CHECK:
			case UNIQUE:
			case CONCURRENTLY:
			case BITMAP:
			case FORCE:
			case SPLIT:
			case REINDEX:
			case FREEZE:
			case MSCK:
			case REPAIR:
			case FETCH:
			case DEFINITION:
			case LESS:
			case THAN:
			case HASH:
			case NOLOGGING:
			case STRUCT:
			case GLOBAL:
			case PRESERVE:
			case AUTO_INCREMENT:
			case ENGINE:
			case CHARSET:
			case COMPRESS:
			case EXPRESS:
			case REPLICATED:
			case NOCOPIES:
			case SPACE:
			case SHRINK:
			case KEY_BLOCK_SIZE:
			case KEY_DC_SIZE:
			case AUTOEXTEND:
			case NEXT:
			case OFF:
			case MATCHED:
			case MERGE:
			case OUTFILE:
			case OPTIONALLY:
			case ENCLOSED:
			case DOUBLE_ENCLOSED:
			case NULL_VALUE:
			case OUTFILEMODE:
			case HDFS:
			case WRITEMODE:
			case NORMAL:
			case OVERWRITES:
			case FILECOUNT:
			case FILESIZE:
			case CHARACTER:
			case GBK:
			case UTF8:
			case HEAD:
			case RMTSELECT:
			case INFILE:
			case DATA_FORMAT:
			case SEPARATOR:
			case BLANKS:
			case AUTOFILL:
			case LENGTH:
			case TABLE_FIELDS:
			case MAX_BAD_RECORDS:
			case DATETIME:
			case TRACE:
			case TRACE_PATH:
			case NOSPLIT:
			case PARALLEL:
			case MAX_DATA_PROCESSORS:
			case MIN_CHUNK_SIZE:
			case SKIP_BAD_FILE:
			case NUM:
			case FILE_FORMAT:
			case IMMEDIATE:
			case STARTING:
			case ENDING:
			case INITIALLY:
			case REFRESH:
			case ACTIVATE:
			case LOGGED:
			case EMPTY:
			case SEQUENCE:
			case INCREMENT:
			case MINVALUE:
			case MAXVALUE:
			case OVERLAY:
			case PLACING:
			case TRIM:
			case LTRIM:
			case RTRIM:
			case BOTH:
			case TO_CHAR:
			case AGE:
			case DATE_PART:
			case ISFINITE:
			case INT:
			case UNSIGNED:
			case REGEXP:
			case BINARY:
			case LEADING:
			case TRAILING:
			case RLIKE:
			case DATE_SUB:
			case ADDDATE:
			case DATE_ADD:
			case YEAR_MONTH:
			case DAY_HOUR:
			case DAY_MINUTE:
			case DAY_SECOND:
			case HOUR_MINUTE:
			case HOUR_SECOND:
			case MINUTE_SECOND:
			case UNKNOWN:
				{
				_localctx = new UnquotedIdentifierContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4563);
				nonReserved();
				}
				break;
			case BACKQUOTED_IDENTIFIER:
				{
				_localctx = new BackQuotedIdentifierContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4564);
				match(BACKQUOTED_IDENTIFIER);
				}
				break;
			case DIGIT_IDENTIFIER:
				{
				_localctx = new DigitIdentifierContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4565);
				match(DIGIT_IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(4574);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,560,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MapidentifierContext(new IdentifierContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_identifier);
					setState(4568);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4569);
					string();
					setState(4570);
					match(T__9);
					}
					} 
				}
				setState(4576);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,560,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Identifier_extContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER() { return getToken(EntireSqlParser.IDENTIFIER, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(EntireSqlParser.QUOTED_IDENTIFIER, 0); }
		public NonReservedContext nonReserved() {
			return getRuleContext(NonReservedContext.class,0);
		}
		public ReservedContext reserved() {
			return getRuleContext(ReservedContext.class,0);
		}
		public TerminalNode BACKQUOTED_IDENTIFIER() { return getToken(EntireSqlParser.BACKQUOTED_IDENTIFIER, 0); }
		public TerminalNode DIGIT_IDENTIFIER() { return getToken(EntireSqlParser.DIGIT_IDENTIFIER, 0); }
		public Identifier_extContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier_ext; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterIdentifier_ext(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitIdentifier_ext(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitIdentifier_ext(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Identifier_extContext identifier_ext() throws RecognitionException {
		Identifier_extContext _localctx = new Identifier_extContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_identifier_ext);
		try {
			setState(4583);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(4577);
				match(IDENTIFIER);
				}
				break;
			case QUOTED_IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4578);
				match(QUOTED_IDENTIFIER);
				}
				break;
			case ADD:
			case ALL:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case AT:
			case BERNOULLI:
			case BETWEEN:
			case BY:
			case CALL:
			case CASCADE:
			case CASE:
			case CAST:
			case CATALOGS:
			case COLUMN:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONSTRAINT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_PATH:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATA:
			case DATE:
			case DAY:
			case DEALLOCATE:
			case DESC:
			case DESCRIBE:
			case DISTINCT:
			case DISTRIBUTED:
			case DROP:
			case ELSE:
			case ESCAPE:
			case EXCEPT:
			case EXCLUDING:
			case EXECUTE:
			case EXISTS:
			case EXPLAIN:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FOR:
			case FORMAT:
			case FULL:
			case FUNCTIONS:
			case GRANT:
			case GRANTS:
			case GRAPHVIZ:
			case GROUP:
			case GROUPING:
			case HAVING:
			case HOUR:
			case IF:
			case IN:
			case INCLUDING:
			case INNER:
			case INPUT:
			case INSERT:
			case INTERSECT:
			case MINUSES:
			case INTERVAL:
			case INTO:
			case IO:
			case IS:
			case ISOLATION:
			case JSON:
			case JOIN:
			case LAST:
			case LATERAL:
			case LEFT:
			case LEVEL:
			case LIKE:
			case LIMIT:
			case LISTAGG:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOGICAL:
			case MAP:
			case MINUTE:
			case MONTH:
			case MODIFY:
			case NATURAL:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NORMALIZE:
			case NULLIF:
			case NULLS:
			case ON:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case ORDINALITY:
			case OUTER:
			case OUTPUT:
			case OVER:
			case PARTITION:
			case PARTITIONS:
			case PATH:
			case POSITION:
			case PRECEDING:
			case PREPARE:
			case PRIVILEGES:
			case PROPERTIES:
			case PUBLIC:
			case RANGE:
			case READ:
			case RECURSIVE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTRICT:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SCHEMA:
			case SCHEMAS:
			case SECOND:
			case SERIALIZABLE:
			case SESSION:
			case SET:
			case SETS:
			case SHOW:
			case SOME:
			case START:
			case STATS:
			case SUBSTRING:
			case SYSTEM:
			case TABLES:
			case TABLESAMPLE:
			case TEXT:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TO:
			case TRANSACTION:
			case TRY_CAST:
			case TYPE:
			case TRUNCATE:
			case UPDATE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNION:
			case UNNEST:
			case USE:
			case VALIDATE:
			case VERBOSE:
			case VIEW:
			case WHEN:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case SEMI:
			case SORT:
			case OFFSET:
			case DEFAULT:
			case TABLESPACE:
			case EXTERNAL:
			case PURGE:
			case TEMPORARY:
			case PRIMARY:
			case KEY:
			case DISABLE:
			case NOVALIDATE:
			case FOREIGN:
			case REFERENCES:
			case PARTITIONED:
			case CLUSTERED:
			case SORTED:
			case BUCKETS:
			case SKEWED:
			case STORED:
			case DELIMITED:
			case FIELDS:
			case TERMINATED:
			case ESCAPED:
			case COLLECTION:
			case ITEMS:
			case KEYS:
			case LINES:
			case DEFINED:
			case SEQUENCEFILE:
			case TEXTFILE:
			case RCFILE:
			case ORC:
			case ORCFILE:
			case PARQUET:
			case AVRO:
			case JSONFILE:
			case INPUTFORMAT:
			case OUTPUTFORMAT:
			case SERDE:
			case SERDEPROPERTIES:
			case LOCATION:
			case TBLPROPERTIES:
			case RELY:
			case EXCHANGE:
			case RECOVER:
			case ARCHIVE:
			case UNARCHIVE:
			case IGNORE:
			case PROTECTION:
			case TOUCH:
			case ENABLE:
			case NO_DROP:
			case OFFLINE:
			case COMPACT:
			case WAIT:
			case CONCATENATE:
			case CHANGE:
			case AFTER:
			case DEFERRED:
			case REBUILD:
			case INDEX:
			case IDXPROPERTIES:
			case FUNCTION:
			case JAR:
			case FILE:
			case DATABASE:
			case DBPROPERTIES:
			case OWNER:
			case RELOAD:
			case USER:
			case ROLE:
			case FILEFORMAT:
			case LOAD:
			case LOCAL:
			case INPATH:
			case DIRECTORY:
			case VACUUM:
			case LIST:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case EVERY:
			case INCLUSIVE:
			case EXCLUSIVE:
			case TEMPLATE:
			case ENCODING:
			case LOG:
			case ERRORS:
			case SEGMENT:
			case REJECT:
			case PERCENT:
			case WRITABLE:
			case CHECK:
			case UNIQUE:
			case CONCURRENTLY:
			case BITMAP:
			case FORCE:
			case SPLIT:
			case REINDEX:
			case FREEZE:
			case MSCK:
			case REPAIR:
			case FETCH:
			case DEFINITION:
			case LESS:
			case THAN:
			case HASH:
			case NOLOGGING:
			case STRUCT:
			case GLOBAL:
			case PRESERVE:
			case AUTO_INCREMENT:
			case ENGINE:
			case CHARSET:
			case COMPRESS:
			case EXPRESS:
			case REPLICATED:
			case NOCOPIES:
			case SPACE:
			case SHRINK:
			case KEY_BLOCK_SIZE:
			case KEY_DC_SIZE:
			case AUTOEXTEND:
			case NEXT:
			case OFF:
			case MATCHED:
			case MERGE:
			case OUTFILE:
			case OPTIONALLY:
			case ENCLOSED:
			case DOUBLE_ENCLOSED:
			case NULL_VALUE:
			case OUTFILEMODE:
			case HDFS:
			case WRITEMODE:
			case NORMAL:
			case OVERWRITES:
			case FILECOUNT:
			case FILESIZE:
			case CHARACTER:
			case GBK:
			case UTF8:
			case HEAD:
			case RMTSELECT:
			case INFILE:
			case DATA_FORMAT:
			case SEPARATOR:
			case BLANKS:
			case AUTOFILL:
			case LENGTH:
			case TABLE_FIELDS:
			case MAX_BAD_RECORDS:
			case DATETIME:
			case TRACE:
			case TRACE_PATH:
			case NOSPLIT:
			case PARALLEL:
			case MAX_DATA_PROCESSORS:
			case MIN_CHUNK_SIZE:
			case SKIP_BAD_FILE:
			case NUM:
			case FILE_FORMAT:
			case IMMEDIATE:
			case STARTING:
			case ENDING:
			case INITIALLY:
			case REFRESH:
			case ACTIVATE:
			case LOGGED:
			case EMPTY:
			case SEQUENCE:
			case INCREMENT:
			case MINVALUE:
			case MAXVALUE:
			case OVERLAY:
			case PLACING:
			case TRIM:
			case LTRIM:
			case RTRIM:
			case BOTH:
			case TO_CHAR:
			case AGE:
			case DATE_PART:
			case ISFINITE:
			case INT:
			case UNSIGNED:
			case REGEXP:
			case BINARY:
			case LEADING:
			case TRAILING:
			case RLIKE:
			case DATE_SUB:
			case ADDDATE:
			case DATE_ADD:
			case YEAR_MONTH:
			case DAY_HOUR:
			case DAY_MINUTE:
			case DAY_SECOND:
			case HOUR_MINUTE:
			case HOUR_SECOND:
			case MINUTE_SECOND:
			case UNKNOWN:
				enterOuterAlt(_localctx, 3);
				{
				setState(4579);
				nonReserved();
				}
				break;
			case ALTER:
			case CREATE:
			case DELETE:
			case END:
			case FALSE:
			case FROM:
			case NOT:
			case NULL:
			case OVERWRITE:
			case SELECT:
			case TABLE:
			case TRUE:
			case USING:
			case VALUES:
			case WHERE:
				enterOuterAlt(_localctx, 4);
				{
				setState(4580);
				reserved();
				}
				break;
			case BACKQUOTED_IDENTIFIER:
				enterOuterAlt(_localctx, 5);
				{
				setState(4581);
				match(BACKQUOTED_IDENTIFIER);
				}
				break;
			case DIGIT_IDENTIFIER:
				enterOuterAlt(_localctx, 6);
				{
				setState(4582);
				match(DIGIT_IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumberContext extends ParserRuleContext {
		public NumberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_number; }
	 
		public NumberContext() { }
		public void copyFrom(NumberContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DecimalLiteralContext extends NumberContext {
		public TerminalNode DECIMAL_VALUE() { return getToken(EntireSqlParser.DECIMAL_VALUE, 0); }
		public DecimalLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterDecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitDecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitDecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoubleLiteralContext extends NumberContext {
		public TerminalNode DOUBLE_VALUE() { return getToken(EntireSqlParser.DOUBLE_VALUE, 0); }
		public DoubleLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterDoubleLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitDoubleLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitDoubleLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntegerLiteralContext extends NumberContext {
		public TerminalNode INTEGER_VALUE() { return getToken(EntireSqlParser.INTEGER_VALUE, 0); }
		public IntegerLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterIntegerLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitIntegerLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitIntegerLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumberContext number() throws RecognitionException {
		NumberContext _localctx = new NumberContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_number);
		try {
			setState(4588);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL_VALUE:
				_localctx = new DecimalLiteralContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4585);
				match(DECIMAL_VALUE);
				}
				break;
			case DOUBLE_VALUE:
				_localctx = new DoubleLiteralContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4586);
				match(DOUBLE_VALUE);
				}
				break;
			case INTEGER_VALUE:
				_localctx = new IntegerLiteralContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4587);
				match(INTEGER_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReservedContext extends ParserRuleContext {
		public TerminalNode OVERWRITE() { return getToken(EntireSqlParser.OVERWRITE, 0); }
		public TerminalNode NOT() { return getToken(EntireSqlParser.NOT, 0); }
		public TerminalNode CREATE() { return getToken(EntireSqlParser.CREATE, 0); }
		public TerminalNode USING() { return getToken(EntireSqlParser.USING, 0); }
		public TerminalNode END() { return getToken(EntireSqlParser.END, 0); }
		public TerminalNode ALTER() { return getToken(EntireSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(EntireSqlParser.TABLE, 0); }
		public TerminalNode SELECT() { return getToken(EntireSqlParser.SELECT, 0); }
		public TerminalNode NULL() { return getToken(EntireSqlParser.NULL, 0); }
		public TerminalNode DELETE() { return getToken(EntireSqlParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(EntireSqlParser.FROM, 0); }
		public TerminalNode WHERE() { return getToken(EntireSqlParser.WHERE, 0); }
		public TerminalNode TRUE() { return getToken(EntireSqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(EntireSqlParser.FALSE, 0); }
		public TerminalNode VALUES() { return getToken(EntireSqlParser.VALUES, 0); }
		public ReservedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reserved; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterReserved(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitReserved(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitReserved(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReservedContext reserved() throws RecognitionException {
		ReservedContext _localctx = new ReservedContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_reserved);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4590);
			_la = _input.LA(1);
			if ( !(((((_la - 15)) & ~0x3f) == 0 && ((1L << (_la - 15)) & ((1L << (ALTER - 15)) | (1L << (CREATE - 15)) | (1L << (DELETE - 15)) | (1L << (END - 15)) | (1L << (FALSE - 15)) | (1L << (FROM - 15)))) != 0) || ((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (NOT - 117)) | (1L << (NULL - 117)) | (1L << (OVERWRITE - 117)) | (1L << (SELECT - 117)) | (1L << (TABLE - 117)) | (1L << (TRUE - 117)))) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & ((1L << (USING - 188)) | (1L << (VALUES - 188)) | (1L << (WHERE - 188)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonReservedContext extends ParserRuleContext {
		public TerminalNode JSONFILE() { return getToken(EntireSqlParser.JSONFILE, 0); }
		public TerminalNode EXCEPT() { return getToken(EntireSqlParser.EXCEPT, 0); }
		public TerminalNode PARQUET() { return getToken(EntireSqlParser.PARQUET, 0); }
		public TerminalNode SERDEPROPERTIES() { return getToken(EntireSqlParser.SERDEPROPERTIES, 0); }
		public TerminalNode DISABLE() { return getToken(EntireSqlParser.DISABLE, 0); }
		public TerminalNode GROUPING() { return getToken(EntireSqlParser.GROUPING, 0); }
		public TerminalNode NOVALIDATE() { return getToken(EntireSqlParser.NOVALIDATE, 0); }
		public TerminalNode DEFINED() { return getToken(EntireSqlParser.DEFINED, 0); }
		public TerminalNode ELSE() { return getToken(EntireSqlParser.ELSE, 0); }
		public TerminalNode UESCAPE() { return getToken(EntireSqlParser.UESCAPE, 0); }
		public TerminalNode RECURSIVE() { return getToken(EntireSqlParser.RECURSIVE, 0); }
		public TerminalNode WAIT() { return getToken(EntireSqlParser.WAIT, 0); }
		public TerminalNode GROUP() { return getToken(EntireSqlParser.GROUP, 0); }
		public TerminalNode INTERSECT() { return getToken(EntireSqlParser.INTERSECT, 0); }
		public TerminalNode DESCRIBE() { return getToken(EntireSqlParser.DESCRIBE, 0); }
		public TerminalNode WITHIN() { return getToken(EntireSqlParser.WITHIN, 0); }
		public TerminalNode LOCATION() { return getToken(EntireSqlParser.LOCATION, 0); }
		public TerminalNode SKEWED() { return getToken(EntireSqlParser.SKEWED, 0); }
		public TerminalNode SERDE() { return getToken(EntireSqlParser.SERDE, 0); }
		public TerminalNode CONSTRAINT() { return getToken(EntireSqlParser.CONSTRAINT, 0); }
		public TerminalNode MINUSES() { return getToken(EntireSqlParser.MINUSES, 0); }
		public TerminalNode MODIFY() { return getToken(EntireSqlParser.MODIFY, 0); }
		public TerminalNode EXECUTE() { return getToken(EntireSqlParser.EXECUTE, 0); }
		public TerminalNode PARTITIONED() { return getToken(EntireSqlParser.PARTITIONED, 0); }
		public TerminalNode LINES() { return getToken(EntireSqlParser.LINES, 0); }
		public TerminalNode CURRENT_PATH() { return getToken(EntireSqlParser.CURRENT_PATH, 0); }
		public TerminalNode AS() { return getToken(EntireSqlParser.AS, 0); }
		public TerminalNode THEN() { return getToken(EntireSqlParser.THEN, 0); }
		public TerminalNode REJECT() { return getToken(EntireSqlParser.REJECT, 0); }
		public TerminalNode NORMALIZE() { return getToken(EntireSqlParser.NORMALIZE, 0); }
		public TerminalNode EXISTS() { return getToken(EntireSqlParser.EXISTS, 0); }
		public TerminalNode LIKE() { return getToken(EntireSqlParser.LIKE, 0); }
		public TerminalNode OUTER() { return getToken(EntireSqlParser.OUTER, 0); }
		public TerminalNode BY() { return getToken(EntireSqlParser.BY, 0); }
		public TerminalNode DELIMITED() { return getToken(EntireSqlParser.DELIMITED, 0); }
		public TerminalNode OUTPUTFORMAT() { return getToken(EntireSqlParser.OUTPUTFORMAT, 0); }
		public TerminalNode ITEMS() { return getToken(EntireSqlParser.ITEMS, 0); }
		public TerminalNode HAVING() { return getToken(EntireSqlParser.HAVING, 0); }
		public TerminalNode UNION() { return getToken(EntireSqlParser.UNION, 0); }
		public TerminalNode AVRO() { return getToken(EntireSqlParser.AVRO, 0); }
		public TerminalNode DROP() { return getToken(EntireSqlParser.DROP, 0); }
		public TerminalNode INPUTFORMAT() { return getToken(EntireSqlParser.INPUTFORMAT, 0); }
		public TerminalNode WHEN() { return getToken(EntireSqlParser.WHEN, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(EntireSqlParser.CONCURRENTLY, 0); }
		public TerminalNode NATURAL() { return getToken(EntireSqlParser.NATURAL, 0); }
		public TerminalNode BETWEEN() { return getToken(EntireSqlParser.BETWEEN, 0); }
		public TerminalNode CAST() { return getToken(EntireSqlParser.CAST, 0); }
		public TerminalNode CLUSTERED() { return getToken(EntireSqlParser.CLUSTERED, 0); }
		public TerminalNode EXTERNAL() { return getToken(EntireSqlParser.EXTERNAL, 0); }
		public TerminalNode PREPARE() { return getToken(EntireSqlParser.PREPARE, 0); }
		public TerminalNode STORED() { return getToken(EntireSqlParser.STORED, 0); }
		public TerminalNode CASE() { return getToken(EntireSqlParser.CASE, 0); }
		public TerminalNode DEALLOCATE() { return getToken(EntireSqlParser.DEALLOCATE, 0); }
		public TerminalNode TERMINATED() { return getToken(EntireSqlParser.TERMINATED, 0); }
		public TerminalNode FULL() { return getToken(EntireSqlParser.FULL, 0); }
		public TerminalNode ESCAPE() { return getToken(EntireSqlParser.ESCAPE, 0); }
		public TerminalNode INTO() { return getToken(EntireSqlParser.INTO, 0); }
		public TerminalNode SORTED() { return getToken(EntireSqlParser.SORTED, 0); }
		public TerminalNode UNIQUE() { return getToken(EntireSqlParser.UNIQUE, 0); }
		public TerminalNode ROLLUP() { return getToken(EntireSqlParser.ROLLUP, 0); }
		public TerminalNode ON() { return getToken(EntireSqlParser.ON, 0); }
		public TerminalNode ORCFILE() { return getToken(EntireSqlParser.ORCFILE, 0); }
		public TerminalNode LIST() { return getToken(EntireSqlParser.LIST, 0); }
		public TerminalNode CUBE() { return getToken(EntireSqlParser.CUBE, 0); }
		public TerminalNode BITMAP() { return getToken(EntireSqlParser.BITMAP, 0); }
		public TerminalNode OR() { return getToken(EntireSqlParser.OR, 0); }
		public TerminalNode CHECK() { return getToken(EntireSqlParser.CHECK, 0); }
		public TerminalNode ESCAPED() { return getToken(EntireSqlParser.ESCAPED, 0); }
		public TerminalNode FREEZE() { return getToken(EntireSqlParser.FREEZE, 0); }
		public TerminalNode DISTINCT() { return getToken(EntireSqlParser.DISTINCT, 0); }
		public TerminalNode TEMPORARY() { return getToken(EntireSqlParser.TEMPORARY, 0); }
		public TerminalNode RCFILE() { return getToken(EntireSqlParser.RCFILE, 0); }
		public TerminalNode UNNEST() { return getToken(EntireSqlParser.UNNEST, 0); }
		public TerminalNode INNER() { return getToken(EntireSqlParser.INNER, 0); }
		public TerminalNode ORDER() { return getToken(EntireSqlParser.ORDER, 0); }
		public TerminalNode BUCKETS() { return getToken(EntireSqlParser.BUCKETS, 0); }
		public TerminalNode SPLIT() { return getToken(EntireSqlParser.SPLIT, 0); }
		public TerminalNode TEXTFILE() { return getToken(EntireSqlParser.TEXTFILE, 0); }
		public TerminalNode LISTAGG() { return getToken(EntireSqlParser.LISTAGG, 0); }
		public TerminalNode UPDATE() { return getToken(EntireSqlParser.UPDATE, 0); }
		public TerminalNode FOR() { return getToken(EntireSqlParser.FOR, 0); }
		public TerminalNode AND() { return getToken(EntireSqlParser.AND, 0); }
		public TerminalNode CROSS() { return getToken(EntireSqlParser.CROSS, 0); }
		public TerminalNode ORC() { return getToken(EntireSqlParser.ORC, 0); }
		public TerminalNode INDEX() { return getToken(EntireSqlParser.INDEX, 0); }
		public TerminalNode IN() { return getToken(EntireSqlParser.IN, 0); }
		public TerminalNode REFERENCES() { return getToken(EntireSqlParser.REFERENCES, 0); }
		public TerminalNode IS() { return getToken(EntireSqlParser.IS, 0); }
		public TerminalNode COLLECTION() { return getToken(EntireSqlParser.COLLECTION, 0); }
		public TerminalNode WITH() { return getToken(EntireSqlParser.WITH, 0); }
		public TerminalNode REINDEX() { return getToken(EntireSqlParser.REINDEX, 0); }
		public TerminalNode PERCENT() { return getToken(EntireSqlParser.PERCENT, 0); }
		public TerminalNode PURGE() { return getToken(EntireSqlParser.PURGE, 0); }
		public TerminalNode FIELDS() { return getToken(EntireSqlParser.FIELDS, 0); }
		public TerminalNode JOIN() { return getToken(EntireSqlParser.JOIN, 0); }
		public TerminalNode SEQUENCEFILE() { return getToken(EntireSqlParser.SEQUENCEFILE, 0); }
		public TerminalNode TBLPROPERTIES() { return getToken(EntireSqlParser.TBLPROPERTIES, 0); }
		public TerminalNode HASH() { return getToken(EntireSqlParser.HASH, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(EntireSqlParser.SUBPARTITIONS, 0); }
		public TerminalNode NOLOGGING() { return getToken(EntireSqlParser.NOLOGGING, 0); }
		public TerminalNode ADD() { return getToken(EntireSqlParser.ADD, 0); }
		public TerminalNode ALL() { return getToken(EntireSqlParser.ALL, 0); }
		public TerminalNode ANALYZE() { return getToken(EntireSqlParser.ANALYZE, 0); }
		public TerminalNode ANY() { return getToken(EntireSqlParser.ANY, 0); }
		public TerminalNode ARRAY() { return getToken(EntireSqlParser.ARRAY, 0); }
		public TerminalNode ASC() { return getToken(EntireSqlParser.ASC, 0); }
		public TerminalNode AT() { return getToken(EntireSqlParser.AT, 0); }
		public TerminalNode BERNOULLI() { return getToken(EntireSqlParser.BERNOULLI, 0); }
		public TerminalNode CALL() { return getToken(EntireSqlParser.CALL, 0); }
		public TerminalNode CASCADE() { return getToken(EntireSqlParser.CASCADE, 0); }
		public TerminalNode CATALOGS() { return getToken(EntireSqlParser.CATALOGS, 0); }
		public TerminalNode COLUMN() { return getToken(EntireSqlParser.COLUMN, 0); }
		public TerminalNode COLUMNS() { return getToken(EntireSqlParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(EntireSqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(EntireSqlParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(EntireSqlParser.COMMITTED, 0); }
		public TerminalNode CURRENT() { return getToken(EntireSqlParser.CURRENT, 0); }
		public TerminalNode DATA() { return getToken(EntireSqlParser.DATA, 0); }
		public TerminalNode DATE() { return getToken(EntireSqlParser.DATE, 0); }
		public TerminalNode DAY() { return getToken(EntireSqlParser.DAY, 0); }
		public TerminalNode DESC() { return getToken(EntireSqlParser.DESC, 0); }
		public TerminalNode DISTRIBUTED() { return getToken(EntireSqlParser.DISTRIBUTED, 0); }
		public TerminalNode EXCLUDING() { return getToken(EntireSqlParser.EXCLUDING, 0); }
		public TerminalNode EXPLAIN() { return getToken(EntireSqlParser.EXPLAIN, 0); }
		public TerminalNode FILTER() { return getToken(EntireSqlParser.FILTER, 0); }
		public TerminalNode FIRST() { return getToken(EntireSqlParser.FIRST, 0); }
		public TerminalNode FOLLOWING() { return getToken(EntireSqlParser.FOLLOWING, 0); }
		public TerminalNode FORMAT() { return getToken(EntireSqlParser.FORMAT, 0); }
		public TerminalNode FUNCTIONS() { return getToken(EntireSqlParser.FUNCTIONS, 0); }
		public TerminalNode GRANT() { return getToken(EntireSqlParser.GRANT, 0); }
		public TerminalNode GRANTS() { return getToken(EntireSqlParser.GRANTS, 0); }
		public TerminalNode GRAPHVIZ() { return getToken(EntireSqlParser.GRAPHVIZ, 0); }
		public TerminalNode HOUR() { return getToken(EntireSqlParser.HOUR, 0); }
		public TerminalNode IF() { return getToken(EntireSqlParser.IF, 0); }
		public TerminalNode INCLUDING() { return getToken(EntireSqlParser.INCLUDING, 0); }
		public TerminalNode INPUT() { return getToken(EntireSqlParser.INPUT, 0); }
		public TerminalNode INTERVAL() { return getToken(EntireSqlParser.INTERVAL, 0); }
		public TerminalNode IO() { return getToken(EntireSqlParser.IO, 0); }
		public TerminalNode ISOLATION() { return getToken(EntireSqlParser.ISOLATION, 0); }
		public TerminalNode JSON() { return getToken(EntireSqlParser.JSON, 0); }
		public TerminalNode LAST() { return getToken(EntireSqlParser.LAST, 0); }
		public TerminalNode LATERAL() { return getToken(EntireSqlParser.LATERAL, 0); }
		public TerminalNode LEVEL() { return getToken(EntireSqlParser.LEVEL, 0); }
		public TerminalNode LIMIT() { return getToken(EntireSqlParser.LIMIT, 0); }
		public TerminalNode LOGICAL() { return getToken(EntireSqlParser.LOGICAL, 0); }
		public TerminalNode MAP() { return getToken(EntireSqlParser.MAP, 0); }
		public TerminalNode MINUTE() { return getToken(EntireSqlParser.MINUTE, 0); }
		public TerminalNode MONTH() { return getToken(EntireSqlParser.MONTH, 0); }
		public TerminalNode NFC() { return getToken(EntireSqlParser.NFC, 0); }
		public TerminalNode NFD() { return getToken(EntireSqlParser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(EntireSqlParser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(EntireSqlParser.NFKD, 0); }
		public TerminalNode NO() { return getToken(EntireSqlParser.NO, 0); }
		public TerminalNode NULLIF() { return getToken(EntireSqlParser.NULLIF, 0); }
		public TerminalNode NULLS() { return getToken(EntireSqlParser.NULLS, 0); }
		public TerminalNode ONLY() { return getToken(EntireSqlParser.ONLY, 0); }
		public TerminalNode OPTION() { return getToken(EntireSqlParser.OPTION, 0); }
		public TerminalNode ORDINALITY() { return getToken(EntireSqlParser.ORDINALITY, 0); }
		public TerminalNode OUTPUT() { return getToken(EntireSqlParser.OUTPUT, 0); }
		public TerminalNode OVER() { return getToken(EntireSqlParser.OVER, 0); }
		public TerminalNode PARTITION() { return getToken(EntireSqlParser.PARTITION, 0); }
		public TerminalNode PARTITIONS() { return getToken(EntireSqlParser.PARTITIONS, 0); }
		public TerminalNode PATH() { return getToken(EntireSqlParser.PATH, 0); }
		public TerminalNode POSITION() { return getToken(EntireSqlParser.POSITION, 0); }
		public TerminalNode PRECEDING() { return getToken(EntireSqlParser.PRECEDING, 0); }
		public TerminalNode PRIVILEGES() { return getToken(EntireSqlParser.PRIVILEGES, 0); }
		public TerminalNode PROPERTIES() { return getToken(EntireSqlParser.PROPERTIES, 0); }
		public TerminalNode PUBLIC() { return getToken(EntireSqlParser.PUBLIC, 0); }
		public TerminalNode RANGE() { return getToken(EntireSqlParser.RANGE, 0); }
		public TerminalNode READ() { return getToken(EntireSqlParser.READ, 0); }
		public TerminalNode RENAME() { return getToken(EntireSqlParser.RENAME, 0); }
		public TerminalNode REPEATABLE() { return getToken(EntireSqlParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(EntireSqlParser.REPLACE, 0); }
		public TerminalNode RESET() { return getToken(EntireSqlParser.RESET, 0); }
		public TerminalNode RESTRICT() { return getToken(EntireSqlParser.RESTRICT, 0); }
		public TerminalNode REVOKE() { return getToken(EntireSqlParser.REVOKE, 0); }
		public TerminalNode ROLLBACK() { return getToken(EntireSqlParser.ROLLBACK, 0); }
		public TerminalNode ROW() { return getToken(EntireSqlParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(EntireSqlParser.ROWS, 0); }
		public TerminalNode SCHEMA() { return getToken(EntireSqlParser.SCHEMA, 0); }
		public TerminalNode SCHEMAS() { return getToken(EntireSqlParser.SCHEMAS, 0); }
		public TerminalNode SECOND() { return getToken(EntireSqlParser.SECOND, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(EntireSqlParser.SERIALIZABLE, 0); }
		public TerminalNode SESSION() { return getToken(EntireSqlParser.SESSION, 0); }
		public TerminalNode SET() { return getToken(EntireSqlParser.SET, 0); }
		public TerminalNode SETS() { return getToken(EntireSqlParser.SETS, 0); }
		public TerminalNode SHOW() { return getToken(EntireSqlParser.SHOW, 0); }
		public TerminalNode SOME() { return getToken(EntireSqlParser.SOME, 0); }
		public TerminalNode START() { return getToken(EntireSqlParser.START, 0); }
		public TerminalNode STATS() { return getToken(EntireSqlParser.STATS, 0); }
		public TerminalNode SUBSTRING() { return getToken(EntireSqlParser.SUBSTRING, 0); }
		public TerminalNode SYSTEM() { return getToken(EntireSqlParser.SYSTEM, 0); }
		public TerminalNode TABLES() { return getToken(EntireSqlParser.TABLES, 0); }
		public TerminalNode TABLESAMPLE() { return getToken(EntireSqlParser.TABLESAMPLE, 0); }
		public TerminalNode TEXT() { return getToken(EntireSqlParser.TEXT, 0); }
		public TerminalNode TIME() { return getToken(EntireSqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(EntireSqlParser.TIMESTAMP, 0); }
		public TerminalNode TO() { return getToken(EntireSqlParser.TO, 0); }
		public TerminalNode TRANSACTION() { return getToken(EntireSqlParser.TRANSACTION, 0); }
		public TerminalNode TRY_CAST() { return getToken(EntireSqlParser.TRY_CAST, 0); }
		public TerminalNode TYPE() { return getToken(EntireSqlParser.TYPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(EntireSqlParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(EntireSqlParser.UNCOMMITTED, 0); }
		public TerminalNode USE() { return getToken(EntireSqlParser.USE, 0); }
		public TerminalNode VALIDATE() { return getToken(EntireSqlParser.VALIDATE, 0); }
		public TerminalNode VERBOSE() { return getToken(EntireSqlParser.VERBOSE, 0); }
		public TerminalNode VIEW() { return getToken(EntireSqlParser.VIEW, 0); }
		public TerminalNode WORK() { return getToken(EntireSqlParser.WORK, 0); }
		public TerminalNode WRITE() { return getToken(EntireSqlParser.WRITE, 0); }
		public TerminalNode YEAR() { return getToken(EntireSqlParser.YEAR, 0); }
		public TerminalNode ZONE() { return getToken(EntireSqlParser.ZONE, 0); }
		public TerminalNode SEMI() { return getToken(EntireSqlParser.SEMI, 0); }
		public TerminalNode SORT() { return getToken(EntireSqlParser.SORT, 0); }
		public TerminalNode OFFSET() { return getToken(EntireSqlParser.OFFSET, 0); }
		public TerminalNode DEFAULT() { return getToken(EntireSqlParser.DEFAULT, 0); }
		public TerminalNode TABLESPACE() { return getToken(EntireSqlParser.TABLESPACE, 0); }
		public TerminalNode FORCE() { return getToken(EntireSqlParser.FORCE, 0); }
		public TerminalNode MSCK() { return getToken(EntireSqlParser.MSCK, 0); }
		public TerminalNode REPAIR() { return getToken(EntireSqlParser.REPAIR, 0); }
		public TerminalNode FETCH() { return getToken(EntireSqlParser.FETCH, 0); }
		public TerminalNode DEFINITION() { return getToken(EntireSqlParser.DEFINITION, 0); }
		public TerminalNode LESS() { return getToken(EntireSqlParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(EntireSqlParser.THAN, 0); }
		public TerminalNode GLOBAL() { return getToken(EntireSqlParser.GLOBAL, 0); }
		public TerminalNode PRESERVE() { return getToken(EntireSqlParser.PRESERVE, 0); }
		public TerminalNode ENGINE() { return getToken(EntireSqlParser.ENGINE, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(EntireSqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode CHARSET() { return getToken(EntireSqlParser.CHARSET, 0); }
		public TerminalNode RIGHT() { return getToken(EntireSqlParser.RIGHT, 0); }
		public TerminalNode LEFT() { return getToken(EntireSqlParser.LEFT, 0); }
		public TerminalNode INSERT() { return getToken(EntireSqlParser.INSERT, 0); }
		public TerminalNode TRUNCATE() { return getToken(EntireSqlParser.TRUNCATE, 0); }
		public TerminalNode KEY() { return getToken(EntireSqlParser.KEY, 0); }
		public TerminalNode KEYS() { return getToken(EntireSqlParser.KEYS, 0); }
		public TerminalNode FOREIGN() { return getToken(EntireSqlParser.FOREIGN, 0); }
		public TerminalNode PRIMARY() { return getToken(EntireSqlParser.PRIMARY, 0); }
		public TerminalNode RELY() { return getToken(EntireSqlParser.RELY, 0); }
		public TerminalNode EXCHANGE() { return getToken(EntireSqlParser.EXCHANGE, 0); }
		public TerminalNode RECOVER() { return getToken(EntireSqlParser.RECOVER, 0); }
		public TerminalNode ARCHIVE() { return getToken(EntireSqlParser.ARCHIVE, 0); }
		public TerminalNode IGNORE() { return getToken(EntireSqlParser.IGNORE, 0); }
		public TerminalNode PROTECTION() { return getToken(EntireSqlParser.PROTECTION, 0); }
		public TerminalNode UNARCHIVE() { return getToken(EntireSqlParser.UNARCHIVE, 0); }
		public TerminalNode TOUCH() { return getToken(EntireSqlParser.TOUCH, 0); }
		public TerminalNode ENABLE() { return getToken(EntireSqlParser.ENABLE, 0); }
		public TerminalNode NO_DROP() { return getToken(EntireSqlParser.NO_DROP, 0); }
		public TerminalNode OFFLINE() { return getToken(EntireSqlParser.OFFLINE, 0); }
		public TerminalNode COMPACT() { return getToken(EntireSqlParser.COMPACT, 0); }
		public TerminalNode CONCATENATE() { return getToken(EntireSqlParser.CONCATENATE, 0); }
		public TerminalNode CHANGE() { return getToken(EntireSqlParser.CHANGE, 0); }
		public TerminalNode AFTER() { return getToken(EntireSqlParser.AFTER, 0); }
		public TerminalNode DEFERRED() { return getToken(EntireSqlParser.DEFERRED, 0); }
		public TerminalNode REBUILD() { return getToken(EntireSqlParser.REBUILD, 0); }
		public TerminalNode IDXPROPERTIES() { return getToken(EntireSqlParser.IDXPROPERTIES, 0); }
		public TerminalNode FUNCTION() { return getToken(EntireSqlParser.FUNCTION, 0); }
		public TerminalNode JAR() { return getToken(EntireSqlParser.JAR, 0); }
		public TerminalNode FILE() { return getToken(EntireSqlParser.FILE, 0); }
		public TerminalNode DATABASE() { return getToken(EntireSqlParser.DATABASE, 0); }
		public TerminalNode DBPROPERTIES() { return getToken(EntireSqlParser.DBPROPERTIES, 0); }
		public TerminalNode OWNER() { return getToken(EntireSqlParser.OWNER, 0); }
		public TerminalNode RELOAD() { return getToken(EntireSqlParser.RELOAD, 0); }
		public TerminalNode USER() { return getToken(EntireSqlParser.USER, 0); }
		public TerminalNode ROLE() { return getToken(EntireSqlParser.ROLE, 0); }
		public TerminalNode FILEFORMAT() { return getToken(EntireSqlParser.FILEFORMAT, 0); }
		public TerminalNode LOAD() { return getToken(EntireSqlParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(EntireSqlParser.LOCAL, 0); }
		public TerminalNode INPATH() { return getToken(EntireSqlParser.INPATH, 0); }
		public TerminalNode DIRECTORY() { return getToken(EntireSqlParser.DIRECTORY, 0); }
		public TerminalNode VACUUM() { return getToken(EntireSqlParser.VACUUM, 0); }
		public TerminalNode SUBPARTITION() { return getToken(EntireSqlParser.SUBPARTITION, 0); }
		public TerminalNode EVERY() { return getToken(EntireSqlParser.EVERY, 0); }
		public TerminalNode INCLUSIVE() { return getToken(EntireSqlParser.INCLUSIVE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(EntireSqlParser.EXCLUSIVE, 0); }
		public TerminalNode TEMPLATE() { return getToken(EntireSqlParser.TEMPLATE, 0); }
		public TerminalNode ENCODING() { return getToken(EntireSqlParser.ENCODING, 0); }
		public TerminalNode LOG() { return getToken(EntireSqlParser.LOG, 0); }
		public TerminalNode ERRORS() { return getToken(EntireSqlParser.ERRORS, 0); }
		public TerminalNode SEGMENT() { return getToken(EntireSqlParser.SEGMENT, 0); }
		public TerminalNode WRITABLE() { return getToken(EntireSqlParser.WRITABLE, 0); }
		public TerminalNode STRUCT() { return getToken(EntireSqlParser.STRUCT, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(EntireSqlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(EntireSqlParser.CURRENT_TIME, 0); }
		public TerminalNode EXTRACT() { return getToken(EntireSqlParser.EXTRACT, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(EntireSqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(EntireSqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(EntireSqlParser.LOCALTIME, 0); }
		public TerminalNode OVERLAY() { return getToken(EntireSqlParser.OVERLAY, 0); }
		public TerminalNode PLACING() { return getToken(EntireSqlParser.PLACING, 0); }
		public TerminalNode TRIM() { return getToken(EntireSqlParser.TRIM, 0); }
		public TerminalNode BOTH() { return getToken(EntireSqlParser.BOTH, 0); }
		public TerminalNode TO_CHAR() { return getToken(EntireSqlParser.TO_CHAR, 0); }
		public TerminalNode AGE() { return getToken(EntireSqlParser.AGE, 0); }
		public TerminalNode DATE_PART() { return getToken(EntireSqlParser.DATE_PART, 0); }
		public TerminalNode ISFINITE() { return getToken(EntireSqlParser.ISFINITE, 0); }
		public TerminalNode COMPRESS() { return getToken(EntireSqlParser.COMPRESS, 0); }
		public TerminalNode EXPRESS() { return getToken(EntireSqlParser.EXPRESS, 0); }
		public TerminalNode REPLICATED() { return getToken(EntireSqlParser.REPLICATED, 0); }
		public TerminalNode NOCOPIES() { return getToken(EntireSqlParser.NOCOPIES, 0); }
		public TerminalNode SPACE() { return getToken(EntireSqlParser.SPACE, 0); }
		public TerminalNode SHRINK() { return getToken(EntireSqlParser.SHRINK, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(EntireSqlParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode KEY_DC_SIZE() { return getToken(EntireSqlParser.KEY_DC_SIZE, 0); }
		public TerminalNode AUTOEXTEND() { return getToken(EntireSqlParser.AUTOEXTEND, 0); }
		public TerminalNode NEXT() { return getToken(EntireSqlParser.NEXT, 0); }
		public TerminalNode OFF() { return getToken(EntireSqlParser.OFF, 0); }
		public TerminalNode MATCHED() { return getToken(EntireSqlParser.MATCHED, 0); }
		public TerminalNode MERGE() { return getToken(EntireSqlParser.MERGE, 0); }
		public TerminalNode OUTFILE() { return getToken(EntireSqlParser.OUTFILE, 0); }
		public TerminalNode OPTIONALLY() { return getToken(EntireSqlParser.OPTIONALLY, 0); }
		public TerminalNode ENCLOSED() { return getToken(EntireSqlParser.ENCLOSED, 0); }
		public TerminalNode DOUBLE_ENCLOSED() { return getToken(EntireSqlParser.DOUBLE_ENCLOSED, 0); }
		public TerminalNode NULL_VALUE() { return getToken(EntireSqlParser.NULL_VALUE, 0); }
		public TerminalNode OUTFILEMODE() { return getToken(EntireSqlParser.OUTFILEMODE, 0); }
		public TerminalNode HDFS() { return getToken(EntireSqlParser.HDFS, 0); }
		public TerminalNode WRITEMODE() { return getToken(EntireSqlParser.WRITEMODE, 0); }
		public TerminalNode NORMAL() { return getToken(EntireSqlParser.NORMAL, 0); }
		public TerminalNode OVERWRITES() { return getToken(EntireSqlParser.OVERWRITES, 0); }
		public TerminalNode FILECOUNT() { return getToken(EntireSqlParser.FILECOUNT, 0); }
		public TerminalNode FILESIZE() { return getToken(EntireSqlParser.FILESIZE, 0); }
		public TerminalNode CHARACTER() { return getToken(EntireSqlParser.CHARACTER, 0); }
		public TerminalNode GBK() { return getToken(EntireSqlParser.GBK, 0); }
		public TerminalNode UTF8() { return getToken(EntireSqlParser.UTF8, 0); }
		public TerminalNode HEAD() { return getToken(EntireSqlParser.HEAD, 0); }
		public TerminalNode RMTSELECT() { return getToken(EntireSqlParser.RMTSELECT, 0); }
		public TerminalNode INFILE() { return getToken(EntireSqlParser.INFILE, 0); }
		public TerminalNode DATA_FORMAT() { return getToken(EntireSqlParser.DATA_FORMAT, 0); }
		public TerminalNode SEPARATOR() { return getToken(EntireSqlParser.SEPARATOR, 0); }
		public TerminalNode BLANKS() { return getToken(EntireSqlParser.BLANKS, 0); }
		public TerminalNode AUTOFILL() { return getToken(EntireSqlParser.AUTOFILL, 0); }
		public TerminalNode LENGTH() { return getToken(EntireSqlParser.LENGTH, 0); }
		public TerminalNode TABLE_FIELDS() { return getToken(EntireSqlParser.TABLE_FIELDS, 0); }
		public TerminalNode MAX_BAD_RECORDS() { return getToken(EntireSqlParser.MAX_BAD_RECORDS, 0); }
		public TerminalNode DATETIME() { return getToken(EntireSqlParser.DATETIME, 0); }
		public TerminalNode TRACE() { return getToken(EntireSqlParser.TRACE, 0); }
		public TerminalNode TRACE_PATH() { return getToken(EntireSqlParser.TRACE_PATH, 0); }
		public TerminalNode NOSPLIT() { return getToken(EntireSqlParser.NOSPLIT, 0); }
		public TerminalNode PARALLEL() { return getToken(EntireSqlParser.PARALLEL, 0); }
		public TerminalNode MAX_DATA_PROCESSORS() { return getToken(EntireSqlParser.MAX_DATA_PROCESSORS, 0); }
		public TerminalNode MIN_CHUNK_SIZE() { return getToken(EntireSqlParser.MIN_CHUNK_SIZE, 0); }
		public TerminalNode SKIP_BAD_FILE() { return getToken(EntireSqlParser.SKIP_BAD_FILE, 0); }
		public TerminalNode NUM() { return getToken(EntireSqlParser.NUM, 0); }
		public TerminalNode FILE_FORMAT() { return getToken(EntireSqlParser.FILE_FORMAT, 0); }
		public TerminalNode UNKNOWN() { return getToken(EntireSqlParser.UNKNOWN, 0); }
		public TerminalNode IMMEDIATE() { return getToken(EntireSqlParser.IMMEDIATE, 0); }
		public TerminalNode STARTING() { return getToken(EntireSqlParser.STARTING, 0); }
		public TerminalNode ENDING() { return getToken(EntireSqlParser.ENDING, 0); }
		public TerminalNode INITIALLY() { return getToken(EntireSqlParser.INITIALLY, 0); }
		public TerminalNode REFRESH() { return getToken(EntireSqlParser.REFRESH, 0); }
		public TerminalNode ACTIVATE() { return getToken(EntireSqlParser.ACTIVATE, 0); }
		public TerminalNode LOGGED() { return getToken(EntireSqlParser.LOGGED, 0); }
		public TerminalNode EMPTY() { return getToken(EntireSqlParser.EMPTY, 0); }
		public TerminalNode SEQUENCE() { return getToken(EntireSqlParser.SEQUENCE, 0); }
		public TerminalNode INCREMENT() { return getToken(EntireSqlParser.INCREMENT, 0); }
		public TerminalNode MINVALUE() { return getToken(EntireSqlParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(EntireSqlParser.MAXVALUE, 0); }
		public TerminalNode INT() { return getToken(EntireSqlParser.INT, 0); }
		public TerminalNode UNSIGNED() { return getToken(EntireSqlParser.UNSIGNED, 0); }
		public TerminalNode REGEXP() { return getToken(EntireSqlParser.REGEXP, 0); }
		public TerminalNode BINARY() { return getToken(EntireSqlParser.BINARY, 0); }
		public TerminalNode LEADING() { return getToken(EntireSqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(EntireSqlParser.TRAILING, 0); }
		public TerminalNode RLIKE() { return getToken(EntireSqlParser.RLIKE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(EntireSqlParser.CURRENT_USER, 0); }
		public TerminalNode LTRIM() { return getToken(EntireSqlParser.LTRIM, 0); }
		public TerminalNode RTRIM() { return getToken(EntireSqlParser.RTRIM, 0); }
		public TerminalNode DATE_SUB() { return getToken(EntireSqlParser.DATE_SUB, 0); }
		public TerminalNode ADDDATE() { return getToken(EntireSqlParser.ADDDATE, 0); }
		public TerminalNode DATE_ADD() { return getToken(EntireSqlParser.DATE_ADD, 0); }
		public TerminalNode YEAR_MONTH() { return getToken(EntireSqlParser.YEAR_MONTH, 0); }
		public TerminalNode DAY_HOUR() { return getToken(EntireSqlParser.DAY_HOUR, 0); }
		public TerminalNode DAY_MINUTE() { return getToken(EntireSqlParser.DAY_MINUTE, 0); }
		public TerminalNode DAY_SECOND() { return getToken(EntireSqlParser.DAY_SECOND, 0); }
		public TerminalNode HOUR_MINUTE() { return getToken(EntireSqlParser.HOUR_MINUTE, 0); }
		public TerminalNode HOUR_SECOND() { return getToken(EntireSqlParser.HOUR_SECOND, 0); }
		public TerminalNode MINUTE_SECOND() { return getToken(EntireSqlParser.MINUTE_SECOND, 0); }
		public NonReservedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonReserved; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).enterNonReserved(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof EntireSqlListener ) ((EntireSqlListener)listener).exitNonReserved(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof EntireSqlVisitor ) return ((EntireSqlVisitor<? extends T>)visitor).visitNonReserved(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonReservedContext nonReserved() throws RecognitionException {
		NonReservedContext _localctx = new NonReservedContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_nonReserved);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4592);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALL) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << AT) | (1L << BERNOULLI) | (1L << BETWEEN) | (1L << BY) | (1L << CALL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONSTRAINT) | (1L << CROSS) | (1L << CUBE) | (1L << CURRENT) | (1L << CURRENT_DATE) | (1L << CURRENT_PATH) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DATA) | (1L << DATE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DESC) | (1L << DESCRIBE) | (1L << DISTINCT) | (1L << DISTRIBUTED) | (1L << DROP) | (1L << ELSE) | (1L << ESCAPE) | (1L << EXCEPT) | (1L << EXCLUDING) | (1L << EXECUTE) | (1L << EXISTS) | (1L << EXPLAIN))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXTRACT - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FOR - 64)) | (1L << (FORMAT - 64)) | (1L << (FULL - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GRANT - 64)) | (1L << (GRANTS - 64)) | (1L << (GRAPHVIZ - 64)) | (1L << (GROUP - 64)) | (1L << (GROUPING - 64)) | (1L << (HAVING - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IN - 64)) | (1L << (INCLUDING - 64)) | (1L << (INNER - 64)) | (1L << (INPUT - 64)) | (1L << (INSERT - 64)) | (1L << (INTERSECT - 64)) | (1L << (MINUSES - 64)) | (1L << (INTERVAL - 64)) | (1L << (INTO - 64)) | (1L << (IO - 64)) | (1L << (IS - 64)) | (1L << (ISOLATION - 64)) | (1L << (JSON - 64)) | (1L << (JOIN - 64)) | (1L << (LAST - 64)) | (1L << (LATERAL - 64)) | (1L << (LEFT - 64)) | (1L << (LEVEL - 64)) | (1L << (LIKE - 64)) | (1L << (LIMIT - 64)) | (1L << (LISTAGG - 64)) | (1L << (LOCALTIME - 64)) | (1L << (LOCALTIMESTAMP - 64)) | (1L << (LOGICAL - 64)) | (1L << (MAP - 64)) | (1L << (MINUTE - 64)) | (1L << (MONTH - 64)) | (1L << (MODIFY - 64)) | (1L << (NATURAL - 64)) | (1L << (NFC - 64)) | (1L << (NFD - 64)) | (1L << (NFKC - 64)) | (1L << (NFKD - 64)) | (1L << (NO - 64)) | (1L << (NORMALIZE - 64)) | (1L << (NULLIF - 64)) | (1L << (NULLS - 64)) | (1L << (ON - 64)) | (1L << (ONLY - 64)) | (1L << (OPTION - 64)) | (1L << (OR - 64)) | (1L << (ORDER - 64)) | (1L << (ORDINALITY - 64)) | (1L << (OUTER - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OUTPUT - 128)) | (1L << (OVER - 128)) | (1L << (PARTITION - 128)) | (1L << (PARTITIONS - 128)) | (1L << (PATH - 128)) | (1L << (POSITION - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROPERTIES - 128)) | (1L << (PUBLIC - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (RECURSIVE - 128)) | (1L << (RENAME - 128)) | (1L << (REPEATABLE - 128)) | (1L << (REPLACE - 128)) | (1L << (RESET - 128)) | (1L << (RESTRICT - 128)) | (1L << (REVOKE - 128)) | (1L << (RIGHT - 128)) | (1L << (ROLLBACK - 128)) | (1L << (ROLLUP - 128)) | (1L << (ROW - 128)) | (1L << (ROWS - 128)) | (1L << (SCHEMA - 128)) | (1L << (SCHEMAS - 128)) | (1L << (SECOND - 128)) | (1L << (SERIALIZABLE - 128)) | (1L << (SESSION - 128)) | (1L << (SET - 128)) | (1L << (SETS - 128)) | (1L << (SHOW - 128)) | (1L << (SOME - 128)) | (1L << (START - 128)) | (1L << (STATS - 128)) | (1L << (SUBSTRING - 128)) | (1L << (SYSTEM - 128)) | (1L << (TABLES - 128)) | (1L << (TABLESAMPLE - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TIMESTAMP - 128)) | (1L << (TO - 128)) | (1L << (TRANSACTION - 128)) | (1L << (TRY_CAST - 128)) | (1L << (TYPE - 128)) | (1L << (TRUNCATE - 128)) | (1L << (UPDATE - 128)) | (1L << (UESCAPE - 128)) | (1L << (UNBOUNDED - 128)) | (1L << (UNCOMMITTED - 128)) | (1L << (UNION - 128)) | (1L << (UNNEST - 128)) | (1L << (USE - 128)) | (1L << (VALIDATE - 128)) | (1L << (VERBOSE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (VIEW - 192)) | (1L << (WHEN - 192)) | (1L << (WITH - 192)) | (1L << (WITHIN - 192)) | (1L << (WORK - 192)) | (1L << (WRITE - 192)) | (1L << (YEAR - 192)) | (1L << (ZONE - 192)) | (1L << (SEMI - 192)) | (1L << (SORT - 192)) | (1L << (OFFSET - 192)) | (1L << (DEFAULT - 192)) | (1L << (TABLESPACE - 192)) | (1L << (EXTERNAL - 192)) | (1L << (PURGE - 192)) | (1L << (TEMPORARY - 192)) | (1L << (PRIMARY - 192)) | (1L << (KEY - 192)) | (1L << (DISABLE - 192)) | (1L << (NOVALIDATE - 192)) | (1L << (FOREIGN - 192)) | (1L << (REFERENCES - 192)) | (1L << (PARTITIONED - 192)) | (1L << (CLUSTERED - 192)) | (1L << (SORTED - 192)) | (1L << (BUCKETS - 192)) | (1L << (SKEWED - 192)) | (1L << (STORED - 192)) | (1L << (DELIMITED - 192)) | (1L << (FIELDS - 192)) | (1L << (TERMINATED - 192)) | (1L << (ESCAPED - 192)) | (1L << (COLLECTION - 192)) | (1L << (ITEMS - 192)) | (1L << (KEYS - 192)) | (1L << (LINES - 192)) | (1L << (DEFINED - 192)) | (1L << (SEQUENCEFILE - 192)) | (1L << (TEXTFILE - 192)) | (1L << (RCFILE - 192)) | (1L << (ORC - 192)) | (1L << (ORCFILE - 192)) | (1L << (PARQUET - 192)) | (1L << (AVRO - 192)) | (1L << (JSONFILE - 192)) | (1L << (INPUTFORMAT - 192)) | (1L << (OUTPUTFORMAT - 192)) | (1L << (SERDE - 192)) | (1L << (SERDEPROPERTIES - 192)) | (1L << (LOCATION - 192)) | (1L << (TBLPROPERTIES - 192)) | (1L << (RELY - 192)) | (1L << (EXCHANGE - 192)) | (1L << (RECOVER - 192)) | (1L << (ARCHIVE - 192)) | (1L << (UNARCHIVE - 192)) | (1L << (IGNORE - 192)) | (1L << (PROTECTION - 192)) | (1L << (TOUCH - 192)) | (1L << (ENABLE - 192)) | (1L << (NO_DROP - 192)) | (1L << (OFFLINE - 192)) | (1L << (COMPACT - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (WAIT - 256)) | (1L << (CONCATENATE - 256)) | (1L << (CHANGE - 256)) | (1L << (AFTER - 256)) | (1L << (DEFERRED - 256)) | (1L << (REBUILD - 256)) | (1L << (INDEX - 256)) | (1L << (IDXPROPERTIES - 256)) | (1L << (FUNCTION - 256)) | (1L << (JAR - 256)) | (1L << (FILE - 256)) | (1L << (DATABASE - 256)) | (1L << (DBPROPERTIES - 256)) | (1L << (OWNER - 256)) | (1L << (RELOAD - 256)) | (1L << (USER - 256)) | (1L << (ROLE - 256)) | (1L << (FILEFORMAT - 256)) | (1L << (LOAD - 256)) | (1L << (LOCAL - 256)) | (1L << (INPATH - 256)) | (1L << (DIRECTORY - 256)) | (1L << (VACUUM - 256)) | (1L << (LIST - 256)) | (1L << (SUBPARTITION - 256)) | (1L << (SUBPARTITIONS - 256)) | (1L << (EVERY - 256)) | (1L << (INCLUSIVE - 256)) | (1L << (EXCLUSIVE - 256)) | (1L << (TEMPLATE - 256)) | (1L << (ENCODING - 256)) | (1L << (LOG - 256)) | (1L << (ERRORS - 256)) | (1L << (SEGMENT - 256)) | (1L << (REJECT - 256)) | (1L << (PERCENT - 256)) | (1L << (WRITABLE - 256)) | (1L << (CHECK - 256)) | (1L << (UNIQUE - 256)) | (1L << (CONCURRENTLY - 256)) | (1L << (BITMAP - 256)) | (1L << (FORCE - 256)) | (1L << (SPLIT - 256)) | (1L << (REINDEX - 256)) | (1L << (FREEZE - 256)) | (1L << (MSCK - 256)) | (1L << (REPAIR - 256)) | (1L << (FETCH - 256)) | (1L << (DEFINITION - 256)) | (1L << (LESS - 256)) | (1L << (THAN - 256)) | (1L << (HASH - 256)) | (1L << (NOLOGGING - 256)) | (1L << (STRUCT - 256)) | (1L << (GLOBAL - 256)) | (1L << (PRESERVE - 256)) | (1L << (AUTO_INCREMENT - 256)) | (1L << (ENGINE - 256)) | (1L << (CHARSET - 256)) | (1L << (COMPRESS - 256)) | (1L << (EXPRESS - 256)) | (1L << (REPLICATED - 256)) | (1L << (NOCOPIES - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (SPACE - 320)) | (1L << (SHRINK - 320)) | (1L << (KEY_BLOCK_SIZE - 320)) | (1L << (KEY_DC_SIZE - 320)) | (1L << (AUTOEXTEND - 320)) | (1L << (NEXT - 320)) | (1L << (OFF - 320)) | (1L << (MATCHED - 320)) | (1L << (MERGE - 320)) | (1L << (OUTFILE - 320)) | (1L << (OPTIONALLY - 320)) | (1L << (ENCLOSED - 320)) | (1L << (DOUBLE_ENCLOSED - 320)) | (1L << (NULL_VALUE - 320)) | (1L << (OUTFILEMODE - 320)) | (1L << (HDFS - 320)) | (1L << (WRITEMODE - 320)) | (1L << (NORMAL - 320)) | (1L << (OVERWRITES - 320)) | (1L << (FILECOUNT - 320)) | (1L << (FILESIZE - 320)) | (1L << (CHARACTER - 320)) | (1L << (GBK - 320)) | (1L << (UTF8 - 320)) | (1L << (HEAD - 320)) | (1L << (RMTSELECT - 320)) | (1L << (INFILE - 320)) | (1L << (DATA_FORMAT - 320)) | (1L << (SEPARATOR - 320)) | (1L << (BLANKS - 320)) | (1L << (AUTOFILL - 320)) | (1L << (LENGTH - 320)) | (1L << (TABLE_FIELDS - 320)) | (1L << (MAX_BAD_RECORDS - 320)) | (1L << (DATETIME - 320)) | (1L << (TRACE - 320)) | (1L << (TRACE_PATH - 320)) | (1L << (NOSPLIT - 320)) | (1L << (PARALLEL - 320)) | (1L << (MAX_DATA_PROCESSORS - 320)) | (1L << (MIN_CHUNK_SIZE - 320)) | (1L << (SKIP_BAD_FILE - 320)) | (1L << (NUM - 320)) | (1L << (FILE_FORMAT - 320)) | (1L << (IMMEDIATE - 320)) | (1L << (STARTING - 320)) | (1L << (ENDING - 320)) | (1L << (INITIALLY - 320)) | (1L << (REFRESH - 320)) | (1L << (ACTIVATE - 320)) | (1L << (LOGGED - 320)) | (1L << (EMPTY - 320)) | (1L << (SEQUENCE - 320)) | (1L << (INCREMENT - 320)) | (1L << (MINVALUE - 320)) | (1L << (MAXVALUE - 320)) | (1L << (OVERLAY - 320)) | (1L << (PLACING - 320)) | (1L << (TRIM - 320)) | (1L << (LTRIM - 320)) | (1L << (RTRIM - 320)) | (1L << (BOTH - 320)) | (1L << (TO_CHAR - 320)) | (1L << (AGE - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (DATE_PART - 384)) | (1L << (ISFINITE - 384)) | (1L << (INT - 384)) | (1L << (UNSIGNED - 384)) | (1L << (REGEXP - 384)) | (1L << (BINARY - 384)) | (1L << (LEADING - 384)) | (1L << (TRAILING - 384)) | (1L << (RLIKE - 384)) | (1L << (DATE_SUB - 384)) | (1L << (ADDDATE - 384)) | (1L << (DATE_ADD - 384)) | (1L << (YEAR_MONTH - 384)) | (1L << (DAY_HOUR - 384)) | (1L << (DAY_MINUTE - 384)) | (1L << (DAY_SECOND - 384)) | (1L << (HOUR_MINUTE - 384)) | (1L << (HOUR_SECOND - 384)) | (1L << (MINUTE_SECOND - 384)) | (1L << (UNKNOWN - 384)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2:
			return allStatement_sempred((AllStatementContext)_localctx, predIndex);
		case 33:
			return statement_sempred((StatementContext)_localctx, predIndex);
		case 34:
			return insertStm_sempred((InsertStmContext)_localctx, predIndex);
		case 37:
			return oracleComment_sempred((OracleCommentContext)_localctx, predIndex);
		case 38:
			return oraclePartitionItems_sempred((OraclePartitionItemsContext)_localctx, predIndex);
		case 39:
			return db2PartitionItems_sempred((Db2PartitionItemsContext)_localctx, predIndex);
		case 40:
			return db2CreateTableAsSelectItem_sempred((Db2CreateTableAsSelectItemContext)_localctx, predIndex);
		case 41:
			return oracleTemporayItem_sempred((OracleTemporayItemContext)_localctx, predIndex);
		case 42:
			return mysqlTemporayItem_sempred((MysqlTemporayItemContext)_localctx, predIndex);
		case 43:
			return gbaseTemporayItem_sempred((GbaseTemporayItemContext)_localctx, predIndex);
		case 55:
			return tableElement_sempred((TableElementContext)_localctx, predIndex);
		case 59:
			return autoIncrement_sempred((AutoIncrementContext)_localctx, predIndex);
		case 60:
			return compressType_sempred((CompressTypeContext)_localctx, predIndex);
		case 62:
			return columnConstraint_sempred((ColumnConstraintContext)_localctx, predIndex);
		case 68:
			return queryTerm_sempred((QueryTermContext)_localctx, predIndex);
		case 78:
			return selectItem_sempred((SelectItemContext)_localctx, predIndex);
		case 80:
			return relation_sempred((RelationContext)_localctx, predIndex);
		case 93:
			return booleanExpression_sempred((BooleanExpressionContext)_localctx, predIndex);
		case 95:
			return valueExpression_sempred((ValueExpressionContext)_localctx, predIndex);
		case 97:
			return primaryExpression_sempred((PrimaryExpressionContext)_localctx, predIndex);
		case 100:
			return oracleJoinType_sempred((OracleJoinTypeContext)_localctx, predIndex);
		case 110:
			return type_sempred((TypeContext)_localctx, predIndex);
		case 126:
			return identifier_sempred((IdentifierContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean allStatement_sempred(AllStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return isGbaseType();
		case 1:
			return isHiveType();
		case 2:
			return isGpType();
		case 3:
			return isDb2Type();
		}
		return true;
	}
	private boolean statement_sempred(StatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4:
			return isMysqlType();
		case 5:
			return isOracleType()||isMysqlType()||isGpType()||isDb2Type()||isGbaseType();
		case 6:
			return isOracleType()||isMysqlType()||isGpType()||isDb2Type()||isGbaseType();
		}
		return true;
	}
	private boolean insertStm_sempred(InsertStmContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return isHiveType();
		case 8:
			return isOracleType()||isMysqlType()||isGpType()||isDb2Type()||isGbaseType();
		}
		return true;
	}
	private boolean oracleComment_sempred(OracleCommentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return isOracleType() || isDb2Type() || isGpType();
		case 10:
			return isOracleType() || isDb2Type() || isGpType();
		}
		return true;
	}
	private boolean oraclePartitionItems_sempred(OraclePartitionItemsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11:
			return isOracleType() || isMysqlType() || isGbaseType();
		case 12:
			return isOracleType() || isMysqlType() || isGbaseType();
		case 13:
			return isOracleType() || isMysqlType() || isGbaseType();
		case 14:
			return isOracleType() || isMysqlType() || isGbaseType();
		}
		return true;
	}
	private boolean db2PartitionItems_sempred(Db2PartitionItemsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15:
			return isDb2Type();
		}
		return true;
	}
	private boolean db2CreateTableAsSelectItem_sempred(Db2CreateTableAsSelectItemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16:
			return isDb2Type();
		}
		return true;
	}
	private boolean oracleTemporayItem_sempred(OracleTemporayItemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17:
			return isOracleType();
		}
		return true;
	}
	private boolean mysqlTemporayItem_sempred(MysqlTemporayItemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18:
			return isMysqlType();
		case 19:
			return isMysqlType();
		}
		return true;
	}
	private boolean gbaseTemporayItem_sempred(GbaseTemporayItemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20:
			return isGbaseType();
		}
		return true;
	}
	private boolean tableElement_sempred(TableElementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21:
			return isGbaseType();
		case 22:
			return isOracleType();
		case 23:
			return isMysqlType();
		}
		return true;
	}
	private boolean autoIncrement_sempred(AutoIncrementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24:
			return isMysqlType();
		}
		return true;
	}
	private boolean compressType_sempred(CompressTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25:
			return isGbaseType();
		}
		return true;
	}
	private boolean columnConstraint_sempred(ColumnConstraintContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26:
			return isGpType();
		case 27:
			return isGpType();
		case 28:
			return isGpType();
		case 29:
			return isOracleType()||isMysqlType()||isGpType()||isDb2Type()||isGbaseType();
		case 30:
			return isOracleType()||isMysqlType()||isGpType()||isDb2Type()||isGbaseType();
		case 31:
			return isOracleType()||isMysqlType()||isGpType()||isDb2Type()||isGbaseType();
		case 32:
			return isOracleType()||isMysqlType()||isGpType()||isDb2Type()||isGbaseType();
		}
		return true;
	}
	private boolean queryTerm_sempred(QueryTermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33:
			return precpred(_ctx, 2);
		case 34:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean selectItem_sempred(SelectItemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35:
			return isExploreType();
		case 36:
			return isExploreType();
		}
		return true;
	}
	private boolean relation_sempred(RelationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37:
			return precpred(_ctx, 2);
		case 38:
			return isMysqlType();
		case 39:
			return !isMysqlType();
		}
		return true;
	}
	private boolean booleanExpression_sempred(BooleanExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40:
			return precpred(_ctx, 2);
		case 41:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean valueExpression_sempred(ValueExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42:
			return isGpType();
		case 43:
			return isMysqlType() || isGbaseType();
		case 44:
			return precpred(_ctx, 4);
		case 45:
			return precpred(_ctx, 3);
		case 46:
			return precpred(_ctx, 2);
		case 47:
			return precpred(_ctx, 1);
		case 48:
			return precpred(_ctx, 6);
		}
		return true;
	}
	private boolean primaryExpression_sempred(PrimaryExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49:
			return isGpType();
		case 50:
			return isMysqlType();
		case 51:
			return isDb2Type();
		case 52:
			return precpred(_ctx, 37);
		case 53:
			return precpred(_ctx, 15);
		case 54:
			return precpred(_ctx, 13);
		}
		return true;
	}
	private boolean oracleJoinType_sempred(OracleJoinTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55:
			return isOracleType();
		}
		return true;
	}
	private boolean type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56:
			return precpred(_ctx, 7);
		}
		return true;
	}
	private boolean identifier_sempred(IdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57:
			return precpred(_ctx, 1);
		}
		return true;
	}

	private static final int _serializedATNSegments = 2;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u01bf\u11f5\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\3\2\3"+
		"\2\3\2\7\2\u010c\n\2\f\2\16\2\u010f\13\2\3\2\5\2\u0112\n\2\3\2\3\2\3\3"+
		"\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u0122\n\4\3\5\3\5\3\5"+
		"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3"+
		"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5"+
		"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0152\n\5\3\5\3\5\3\5\3\5\3\5\3\5"+
		"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5"+
		"\5\u016b\n\5\3\5\3\5\3\5\3\5\5\5\u0171\n\5\3\5\3\5\5\5\u0175\n\5\3\5\3"+
		"\5\3\5\3\5\5\5\u017b\n\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3"+
		"\5\5\5\u0189\n\5\3\5\3\5\3\5\3\5\3\5\7\5\u0190\n\5\f\5\16\5\u0193\13\5"+
		"\3\5\3\5\5\5\u0197\n\5\3\5\3\5\5\5\u019b\n\5\3\5\3\5\3\5\3\5\3\5\3\5\3"+
		"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u01ac\n\5\3\5\3\5\3\5\3\5\5\5\u01b2"+
		"\n\5\3\6\3\6\5\6\u01b6\n\6\3\6\3\6\3\6\3\6\5\6\u01bc\n\6\3\6\3\6\5\6\u01c0"+
		"\n\6\3\6\5\6\u01c3\n\6\3\6\5\6\u01c6\n\6\3\6\3\6\5\6\u01ca\n\6\3\6\5\6"+
		"\u01cd\n\6\3\6\3\6\3\6\3\6\5\6\u01d3\n\6\3\6\3\6\3\6\3\6\5\6\u01d9\n\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u01fc"+
		"\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u0208\n\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u0218\n\6\3\6\3\6\3\6"+
		"\5\6\u021d\n\6\3\6\3\6\3\6\5\6\u0222\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\5\6\u0230\n\6\3\6\3\6\3\6\5\6\u0235\n\6\3\6\3\6\3\6"+
		"\5\6\u023a\n\6\3\6\3\6\3\6\3\6\5\6\u0240\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\3\6\5\6\u024e\n\6\3\6\3\6\3\6\3\6\3\6\5\6\u0255\n\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\5\6\u026a\n\6\3\6\3\6\5\6\u026e\n\6\3\6\3\6\3\6\5\6\u0273\n\6\3"+
		"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\7\6\u0284\n"+
		"\6\f\6\16\6\u0287\13\6\5\6\u0289\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\5\6\u0294\n\6\3\6\3\6\3\6\3\6\3\6\5\6\u029b\n\6\3\6\7\6\u029e\n\6\f"+
		"\6\16\6\u02a1\13\6\3\6\3\6\3\6\5\6\u02a6\n\6\3\6\3\6\3\6\3\6\3\6\7\6\u02ad"+
		"\n\6\f\6\16\6\u02b0\13\6\3\6\3\6\3\6\3\6\3\6\5\6\u02b7\n\6\3\6\3\6\3\6"+
		"\3\6\7\6\u02bd\n\6\f\6\16\6\u02c0\13\6\5\6\u02c2\n\6\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\5\7\u02cc\n\7\3\7\3\7\3\7\3\7\6\7\u02d2\n\7\r\7\16\7\u02d3"+
		"\3\7\3\7\3\7\3\7\5\7\u02da\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b"+
		"\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u02ed\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b"+
		"\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3"+
		"\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u0313\n\b\f\b\16\b"+
		"\u0316\13\b\3\b\3\b\3\b\3\b\3\b\5\b\u031d\n\b\3\t\3\t\3\t\5\t\u0322\n"+
		"\t\3\n\3\n\6\n\u0326\n\n\r\n\16\n\u0327\3\13\3\13\3\13\3\13\5\13\u032e"+
		"\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u0337\n\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\5\13\u0340\n\13\3\f\3\f\6\f\u0344\n\f\r\f\16\f\u0345"+
		"\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u034e\n\r\3\16\3\16\3\16\3\16\3\16\3\16\3"+
		"\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u0361\n\16"+
		"\3\17\3\17\3\17\6\17\u0366\n\17\r\17\16\17\u0367\3\17\3\17\3\17\3\17\3"+
		"\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0375\n\17\3\17\3\17\3\17\5\17"+
		"\u037a\n\17\3\17\3\17\5\17\u037e\n\17\3\17\3\17\3\17\5\17\u0383\n\17\3"+
		"\17\3\17\3\17\3\17\5\17\u0389\n\17\3\17\3\17\5\17\u038d\n\17\3\17\3\17"+
		"\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0397\n\17\3\17\3\17\3\17\5\17\u039c"+
		"\n\17\3\17\3\17\3\17\3\17\5\17\u03a2\n\17\3\17\3\17\5\17\u03a6\n\17\3"+
		"\17\3\17\3\17\3\17\3\17\5\17\u03ad\n\17\3\17\3\17\5\17\u03b1\n\17\3\17"+
		"\5\17\u03b4\n\17\3\17\3\17\3\17\3\17\5\17\u03ba\n\17\3\17\3\17\3\17\3"+
		"\17\3\17\3\17\5\17\u03c2\n\17\3\17\3\17\5\17\u03c6\n\17\3\17\3\17\3\17"+
		"\3\17\3\17\3\17\5\17\u03ce\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17"+
		"\3\17\7\17\u03d9\n\17\f\17\16\17\u03dc\13\17\3\17\3\17\5\17\u03e0\n\17"+
		"\5\17\u03e2\n\17\3\17\3\17\3\17\3\17\5\17\u03e8\n\17\3\17\3\17\3\17\3"+
		"\17\3\17\3\17\3\17\3\17\5\17\u03f2\n\17\5\17\u03f4\n\17\3\17\3\17\3\17"+
		"\5\17\u03f9\n\17\3\17\3\17\3\17\5\17\u03fe\n\17\3\17\3\17\3\17\3\17\3"+
		"\17\3\17\5\17\u0406\n\17\5\17\u0408\n\17\3\17\3\17\5\17\u040c\n\17\3\17"+
		"\3\17\5\17\u0410\n\17\3\17\3\17\5\17\u0414\n\17\3\17\3\17\5\17\u0418\n"+
		"\17\3\17\5\17\u041b\n\17\3\17\3\17\3\17\3\17\5\17\u0421\n\17\3\17\3\17"+
		"\3\17\3\17\3\17\5\17\u0428\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17"+
		"\3\17\3\17\3\17\3\17\5\17\u0436\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17"+
		"\3\17\3\17\5\17\u0441\n\17\5\17\u0443\n\17\3\17\3\17\3\17\3\17\3\17\3"+
		"\17\3\17\3\17\3\17\3\17\3\17\3\17\7\17\u0451\n\17\f\17\16\17\u0454\13"+
		"\17\3\17\3\17\5\17\u0458\n\17\5\17\u045a\n\17\3\17\3\17\3\17\3\17\3\17"+
		"\3\17\3\17\3\17\5\17\u0464\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17"+
		"\3\17\3\17\3\17\5\17\u0471\n\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0479"+
		"\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17"+
		"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17"+
		"\3\17\5\17\u0497\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u04a0\n"+
		"\17\3\17\3\17\3\17\3\17\5\17\u04a6\n\17\3\17\5\17\u04a9\n\17\3\17\3\17"+
		"\3\17\3\17\5\17\u04af\n\17\7\17\u04b1\n\17\f\17\16\17\u04b4\13\17\3\17"+
		"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17"+
		"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u04cd\n\17\3\17\3\17\3\17"+
		"\5\17\u04d2\n\17\3\17\3\17\7\17\u04d6\n\17\f\17\16\17\u04d9\13\17\3\17"+
		"\3\17\5\17\u04dd\n\17\3\17\5\17\u04e0\n\17\3\17\3\17\5\17\u04e4\n\17\3"+
		"\17\3\17\3\17\3\17\3\17\5\17\u04eb\n\17\3\17\3\17\3\17\3\17\3\17\3\17"+
		"\5\17\u04f3\n\17\3\17\3\17\5\17\u04f7\n\17\3\17\3\17\3\17\5\17\u04fc\n"+
		"\17\3\17\5\17\u04ff\n\17\3\17\3\17\5\17\u0503\n\17\3\17\3\17\3\17\3\17"+
		"\5\17\u0509\n\17\3\17\3\17\3\17\3\17\5\17\u050f\n\17\3\17\3\17\5\17\u0513"+
		"\n\17\3\17\3\17\3\17\5\17\u0518\n\17\3\17\3\17\5\17\u051c\n\17\3\17\3"+
		"\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u052a\n\17"+
		"\3\17\3\17\5\17\u052e\n\17\3\17\3\17\3\17\3\17\3\17\5\17\u0535\n\17\3"+
		"\17\3\17\3\17\5\17\u053a\n\17\3\17\5\17\u053d\n\17\3\17\3\17\3\17\3\17"+
		"\3\17\3\17\3\17\5\17\u0546\n\17\3\17\3\17\5\17\u054a\n\17\5\17\u054c\n"+
		"\17\3\17\3\17\3\17\3\17\3\17\5\17\u0553\n\17\3\17\3\17\3\17\3\17\3\17"+
		"\7\17\u055a\n\17\f\17\16\17\u055d\13\17\3\17\3\17\5\17\u0561\n\17\3\17"+
		"\3\17\5\17\u0565\n\17\3\17\3\17\5\17\u0569\n\17\3\17\3\17\3\17\3\17\3"+
		"\17\3\17\3\17\5\17\u0572\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17"+
		"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17"+
		"\u0589\n\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0591\n\17\3\17\3\17\5"+
		"\17\u0595\n\17\3\17\3\17\3\17\5\17\u059a\n\17\3\17\3\17\5\17\u059e\n\17"+
		"\3\17\3\17\3\17\5\17\u05a3\n\17\3\17\3\17\3\17\5\17\u05a8\n\17\3\17\3"+
		"\17\3\17\3\17\3\17\3\17\5\17\u05b0\n\17\5\17\u05b2\n\17\3\17\3\17\5\17"+
		"\u05b6\n\17\3\17\3\17\5\17\u05ba\n\17\3\17\3\17\5\17\u05be\n\17\3\17\3"+
		"\17\3\17\3\17\5\17\u05c4\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17"+
		"\3\17\3\17\3\17\5\17\u05d1\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17"+
		"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17"+
		"\3\17\3\17\7\17\u05eb\n\17\f\17\16\17\u05ee\13\17\5\17\u05f0\n\17\3\17"+
		"\3\17\5\17\u05f4\n\17\3\17\3\17\3\17\5\17\u05f9\n\17\3\17\3\17\3\17\3"+
		"\17\3\17\3\17\5\17\u0601\n\17\3\17\3\17\3\17\5\17\u0606\n\17\3\17\3\17"+
		"\3\17\3\17\3\17\5\17\u060d\n\17\5\17\u060f\n\17\3\20\3\20\5\20\u0613\n"+
		"\20\3\20\5\20\u0616\n\20\3\20\5\20\u0619\n\20\3\20\5\20\u061c\n\20\3\20"+
		"\3\20\5\20\u0620\n\20\3\20\3\20\3\20\3\20\5\20\u0626\n\20\3\20\5\20\u0629"+
		"\n\20\3\20\5\20\u062c\n\20\3\20\3\20\3\20\3\20\5\20\u0632\n\20\3\20\3"+
		"\20\3\20\5\20\u0637\n\20\3\20\3\20\3\20\3\20\5\20\u063d\n\20\5\20\u063f"+
		"\n\20\3\20\3\20\3\20\3\20\3\20\7\20\u0646\n\20\f\20\16\20\u0649\13\20"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u0651\n\20\7\20\u0653\n\20\f\20\16"+
		"\20\u0656\13\20\3\20\3\20\5\20\u065a\n\20\3\20\3\20\5\20\u065e\n\20\3"+
		"\20\3\20\3\20\3\20\5\20\u0664\n\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20"+
		"\u066c\n\20\3\20\3\20\5\20\u0670\n\20\3\20\3\20\3\20\3\20\5\20\u0676\n"+
		"\20\3\20\3\20\5\20\u067a\n\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u0682"+
		"\n\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u068b\n\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\5\20\u0694\n\20\3\20\3\20\3\20\5\20\u0699\n\20\3"+
		"\20\5\20\u069c\n\20\3\20\3\20\5\20\u06a0\n\20\3\20\3\20\5\20\u06a4\n\20"+
		"\3\20\3\20\5\20\u06a8\n\20\3\20\3\20\3\20\5\20\u06ad\n\20\3\20\3\20\3"+
		"\20\5\20\u06b2\n\20\3\20\3\20\3\20\3\20\3\20\5\20\u06b9\n\20\3\20\3\20"+
		"\5\20\u06bd\n\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\7\20\u06e8\n\20\f\20\16\20\u06eb\13\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u0716\n\20\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\5\20\u072c\n\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\5\20\u0737\n\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20"+
		"\u074f\n\20\5\20\u0751\n\20\3\21\3\21\3\21\3\21\7\21\u0757\n\21\f\21\16"+
		"\21\u075a\13\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22"+
		"\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22"+
		"\3\22\3\22\5\22\u0777\n\22\3\22\3\22\3\22\3\22\3\22\5\22\u077e\n\22\5"+
		"\22\u0780\n\22\3\22\3\22\3\22\5\22\u0785\n\22\3\23\3\23\3\23\3\23\7\23"+
		"\u078b\n\23\f\23\16\23\u078e\13\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24"+
		"\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24"+
		"\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u07ab\n\24\3\24\3\24\3\24\3\24\3\24"+
		"\5\24\u07b2\n\24\5\24\u07b4\n\24\3\24\3\24\3\24\5\24\u07b9\n\24\3\25\3"+
		"\25\3\25\5\25\u07be\n\25\3\25\3\25\3\25\3\25\3\25\5\25\u07c5\n\25\3\25"+
		"\3\25\3\25\5\25\u07ca\n\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u07d3"+
		"\n\25\3\25\3\25\3\25\3\25\6\25\u07d9\n\25\r\25\16\25\u07da\5\25\u07dd"+
		"\n\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\7\26\u07e6\n\26\f\26\16\26\u07e9"+
		"\13\26\3\26\3\26\3\26\3\26\5\26\u07ef\n\26\3\26\3\26\3\26\3\26\3\26\3"+
		"\26\3\26\3\26\3\26\7\26\u07fa\n\26\f\26\16\26\u07fd\13\26\3\26\3\26\3"+
		"\26\3\26\3\26\3\26\3\26\7\26\u0806\n\26\f\26\16\26\u0809\13\26\3\26\3"+
		"\26\3\26\3\26\5\26\u080f\n\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27"+
		"\3\27\3\27\3\27\3\27\3\27\5\27\u081e\n\27\3\30\3\30\3\30\3\30\3\30\3\30"+
		"\3\30\3\30\5\30\u0828\n\30\5\30\u082a\n\30\3\30\3\30\3\30\3\30\3\30\5"+
		"\30\u0831\n\30\3\30\3\30\3\30\3\30\3\30\5\30\u0838\n\30\3\30\3\30\3\30"+
		"\3\30\5\30\u083e\n\30\3\30\3\30\3\30\3\30\3\30\5\30\u0845\n\30\3\30\3"+
		"\30\3\30\3\30\3\30\5\30\u084c\n\30\5\30\u084e\n\30\3\31\3\31\5\31\u0852"+
		"\n\31\3\32\3\32\3\32\5\32\u0857\n\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33"+
		"\3\33\3\33\7\33\u0862\n\33\f\33\16\33\u0865\13\33\3\33\3\33\3\34\3\34"+
		"\3\34\3\34\3\34\3\34\3\34\3\34\3\34\7\34\u0872\n\34\f\34\16\34\u0875\13"+
		"\34\3\34\3\34\3\35\3\35\3\35\5\35\u087c\n\35\3\36\3\36\3\37\3\37\3\37"+
		"\3 \3 \3 \3!\3!\3!\3\"\3\"\3#\3#\3#\3#\3#\5#\u0890\n#\3#\3#\3#\3#\3#\3"+
		"#\3#\3#\3#\7#\u089b\n#\f#\16#\u089e\13#\3#\3#\5#\u08a2\n#\3#\3#\3#\3#"+
		"\3#\3#\3#\3#\3#\3#\3#\3#\5#\u08b0\n#\3#\3#\3#\5#\u08b5\n#\3#\3#\3#\3#"+
		"\5#\u08bb\n#\3#\3#\5#\u08bf\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#"+
		"\u08cd\n#\3#\3#\5#\u08d1\n#\3#\3#\5#\u08d5\n#\3#\3#\5#\u08d9\n#\3#\5#"+
		"\u08dc\n#\3#\3#\3#\3#\3#\3#\5#\u08e4\n#\3#\3#\5#\u08e8\n#\3#\5#\u08eb"+
		"\n#\3#\3#\5#\u08ef\n#\3#\5#\u08f2\n#\3#\3#\5#\u08f6\n#\3#\5#\u08f9\n#"+
		"\3#\5#\u08fc\n#\3#\3#\3#\3#\5#\u0902\n#\3#\3#\3#\3#\3#\7#\u0909\n#\f#"+
		"\16#\u090c\13#\3#\3#\5#\u0910\n#\3#\5#\u0913\n#\3#\5#\u0916\n#\3#\3#\5"+
		"#\u091a\n#\3#\5#\u091d\n#\3#\3#\5#\u0921\n#\3#\5#\u0924\n#\3#\5#\u0927"+
		"\n#\3#\3#\3#\3#\3#\5#\u092e\n#\3#\5#\u0931\n#\3#\3#\3#\5#\u0936\n#\3#"+
		"\3#\3#\5#\u093b\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#"+
		"\3#\3#\5#\u0950\n#\3#\5#\u0953\n#\3#\5#\u0956\n#\3#\3#\3#\3#\3#\3#\3#"+
		"\3#\3#\3#\3#\3#\5#\u0964\n#\3#\3#\5#\u0968\n#\3#\3#\3#\3#\3#\5#\u096f"+
		"\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u097b\n#\3#\3#\3#\3#\3#\5#\u0982"+
		"\n#\5#\u0984\n#\3#\3#\3#\5#\u0989\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#"+
		"\3#\5#\u0997\n#\5#\u0999\n#\3#\3#\5#\u099d\n#\3#\3#\3#\3#\3#\3#\3#\3#"+
		"\3#\3#\3#\3#\5#\u09ab\n#\3#\3#\5#\u09af\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#"+
		"\5#\u09ba\n#\3#\3#\3#\3#\3#\5#\u09c1\n#\3#\3#\3#\3#\5#\u09c7\n#\3#\7#"+
		"\u09ca\n#\f#\16#\u09cd\13#\3#\3#\3#\3#\3#\5#\u09d4\n#\3#\3#\3#\3#\3#\7"+
		"#\u09db\n#\f#\16#\u09de\13#\3#\3#\5#\u09e2\n#\3#\3#\3#\5#\u09e7\n#\3#"+
		"\3#\3#\5#\u09ec\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u09f7\n#\3#\3#\3#\3#"+
		"\3#\3#\3#\7#\u0a00\n#\f#\16#\u0a03\13#\5#\u0a05\n#\3#\3#\3#\3#\3#\3#\7"+
		"#\u0a0d\n#\f#\16#\u0a10\13#\3#\3#\5#\u0a14\n#\3#\3#\5#\u0a18\n#\3#\3#"+
		"\3#\3#\3#\3#\5#\u0a20\n#\3#\3#\3#\3#\5#\u0a26\n#\3#\3#\3#\7#\u0a2b\n#"+
		"\f#\16#\u0a2e\13#\3#\3#\5#\u0a32\n#\3#\3#\5#\u0a36\n#\3#\3#\3#\3#\3#\3"+
		"#\3#\3#\5#\u0a40\n#\3#\5#\u0a43\n#\3#\3#\5#\u0a47\n#\3#\5#\u0a4a\n#\3"+
		"#\3#\3#\3#\7#\u0a50\n#\f#\16#\u0a53\13#\3#\3#\5#\u0a57\n#\3#\3#\3#\3#"+
		"\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u0a66\n#\3#\3#\3#\3#\5#\u0a6c\n#\5#\u0a6e"+
		"\n#\3#\3#\3#\3#\5#\u0a74\n#\3#\3#\3#\3#\5#\u0a7a\n#\5#\u0a7c\n#\3#\3#"+
		"\3#\3#\5#\u0a82\n#\3#\3#\3#\3#\5#\u0a88\n#\5#\u0a8a\n#\3#\3#\3#\3#\5#"+
		"\u0a90\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#"+
		"\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\7#\u0aba"+
		"\n#\f#\16#\u0abd\13#\5#\u0abf\n#\3#\3#\3#\5#\u0ac4\n#\3#\3#\3#\5#\u0ac9"+
		"\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\7#\u0ad9\n#\f#\16#\u0adc"+
		"\13#\5#\u0ade\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\7#\u0aed\n#\f"+
		"#\16#\u0af0\13#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u0afa\n#\3$\3$\3$\5$\u0aff"+
		"\n$\3$\3$\5$\u0b03\n$\3$\3$\5$\u0b07\n$\3$\5$\u0b0a\n$\3$\3$\3$\3$\3$"+
		"\3$\5$\u0b12\n$\3$\3$\5$\u0b16\n$\3$\3$\3$\5$\u0b1b\n$\3$\5$\u0b1e\n$"+
		"\3$\3$\3$\3$\3$\3$\5$\u0b26\n$\3$\3$\5$\u0b2a\n$\3$\5$\u0b2d\n$\3$\3$"+
		"\5$\u0b31\n$\3%\5%\u0b34\n%\3%\3%\3&\3&\5&\u0b3a\n&\3&\3&\3&\7&\u0b3f"+
		"\n&\f&\16&\u0b42\13&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3"+
		"\'\3\'\3\'\3\'\5\'\u0b54\n\'\3(\3(\3(\3(\3(\3(\3(\3(\5(\u0b5e\n(\3)\3"+
		")\3)\3)\3)\3)\3)\3)\3)\3)\5)\u0b6a\n)\3)\3)\3)\3)\5)\u0b70\n)\3)\3)\3"+
		"*\3*\3*\3*\3*\3*\3*\3+\3+\3+\3+\3+\3+\3,\3,\3,\3,\3,\3,\3,\3,\5,\u0b89"+
		"\n,\3,\3,\3,\5,\u0b8e\n,\3,\3,\3,\3,\5,\u0b94\n,\5,\u0b96\n,\3-\3-\3-"+
		"\3-\3-\3-\3-\5-\u0b9f\n-\3-\3-\3-\5-\u0ba4\n-\3-\3-\3-\3-\3-\3-\3-\5-"+
		"\u0bad\n-\3-\5-\u0bb0\n-\3-\3-\3-\3-\5-\u0bb6\n-\3-\3-\3-\5-\u0bbb\n-"+
		"\3-\3-\3-\3-\5-\u0bc1\n-\3.\3.\3.\3.\3.\3.\3.\3.\7.\u0bcb\n.\f.\16.\u0bce"+
		"\13.\3.\3.\3/\3/\3/\3/\3/\3/\3/\3/\5/\u0bda\n/\3\60\3\60\3\60\3\60\3\60"+
		"\3\60\3\60\3\60\7\60\u0be4\n\60\f\60\16\60\u0be7\13\60\3\60\3\60\3\61"+
		"\3\61\3\61\3\61\3\61\3\61\5\61\u0bf1\n\61\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\7\62\u0bfb\n\62\f\62\16\62\u0bfe\13\62\3\62\3\62\3\63\3\63"+
		"\3\63\3\63\5\63\u0c06\n\63\3\63\3\63\3\63\3\63\3\63\5\63\u0c0d\n\63\5"+
		"\63\u0c0f\n\63\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\7\64\u0c1d\n\64\f\64\16\64\u0c20\13\64\3\64\3\64\3\65\3\65\3\65"+
		"\3\65\3\65\7\65\u0c29\n\65\f\65\16\65\u0c2c\13\65\3\65\3\65\5\65\u0c30"+
		"\n\65\3\65\3\65\3\65\3\65\3\65\7\65\u0c37\n\65\f\65\16\65\u0c3a\13\65"+
		"\3\65\3\65\5\65\u0c3e\n\65\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u0c46\n"+
		"\65\5\65\u0c48\n\65\3\66\3\66\5\66\u0c4c\n\66\3\66\3\66\3\66\3\66\3\66"+
		"\5\66\u0c53\n\66\3\66\3\66\3\66\3\66\5\66\u0c59\n\66\3\66\3\66\3\66\3"+
		"\66\3\66\3\66\3\66\3\66\3\66\5\66\u0c64\n\66\3\66\3\66\3\66\3\66\3\66"+
		"\5\66\u0c6b\n\66\3\67\3\67\3\67\3\67\38\38\38\38\38\38\38\39\39\39\39"+
		"\39\39\39\39\59\u0c80\n9\3:\3:\3:\7:\u0c85\n:\f:\16:\u0c88\13:\3;\5;\u0c8b"+
		"\n;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\5;\u0c99\n;\3<\3<\3<\3<\3<\3<"+
		"\3<\3<\3<\3<\3<\3<\5<\u0ca7\n<\5<\u0ca9\n<\3<\5<\u0cac\n<\3<\5<\u0caf"+
		"\n<\3<\5<\u0cb2\n<\3<\3<\5<\u0cb6\n<\3=\3=\3=\3>\3>\3>\3>\3>\3>\3?\3?"+
		"\5?\u0cc3\n?\3?\5?\u0cc6\n?\3?\3?\3@\3@\5@\u0ccc\n@\3@\3@\5@\u0cd0\n@"+
		"\3@\5@\u0cd3\n@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@"+
		"\3@\3@\3@\3@\3@\5@\u0cec\n@\3@\3@\3@\3@\5@\u0cf2\n@\3@\3@\3@\3@\3@\5@"+
		"\u0cf9\n@\3@\3@\3@\3@\3@\3@\3@\5@\u0d02\n@\3@\3@\3@\3@\3@\5@\u0d09\n@"+
		"\3A\3A\3A\3A\5A\u0d0f\nA\3B\3B\3B\3B\7B\u0d15\nB\fB\16B\u0d18\13B\3B\3"+
		"B\3C\3C\3C\3C\3D\3D\3D\3D\3D\3D\7D\u0d26\nD\fD\16D\u0d29\13D\5D\u0d2b"+
		"\nD\3D\3D\3D\3D\3D\7D\u0d32\nD\fD\16D\u0d35\13D\5D\u0d37\nD\3D\3D\3D\3"+
		"D\3D\7D\u0d3e\nD\fD\16D\u0d41\13D\5D\u0d43\nD\3D\3D\5D\u0d47\nD\3D\3D"+
		"\3D\3D\3D\3D\5D\u0d4f\nD\3E\3E\3E\5E\u0d54\nE\3E\3E\3E\5E\u0d59\nE\3F"+
		"\3F\3F\3F\3F\3F\5F\u0d61\nF\3F\3F\3F\3F\5F\u0d67\nF\3F\7F\u0d6a\nF\fF"+
		"\16F\u0d6d\13F\3G\3G\3G\3G\3G\3G\3G\5G\u0d76\nG\3H\3H\3H\3H\7H\u0d7c\n"+
		"H\fH\16H\u0d7f\13H\3I\3I\5I\u0d83\nI\3I\3I\5I\u0d87\nI\3J\3J\5J\u0d8b"+
		"\nJ\3J\3J\3J\7J\u0d90\nJ\fJ\16J\u0d93\13J\3J\3J\3J\3J\7J\u0d99\nJ\fJ\16"+
		"J\u0d9c\13J\5J\u0d9e\nJ\3J\3J\5J\u0da2\nJ\3J\3J\3J\3J\3J\5J\u0da9\nJ\5"+
		"J\u0dab\nJ\3J\3J\5J\u0daf\nJ\3K\5K\u0db2\nK\3K\3K\3K\7K\u0db7\nK\fK\16"+
		"K\u0dba\13K\3L\3L\3L\3L\3L\3L\7L\u0dc2\nL\fL\16L\u0dc5\13L\5L\u0dc7\n"+
		"L\3L\3L\3L\3L\3L\3L\7L\u0dcf\nL\fL\16L\u0dd2\13L\5L\u0dd4\nL\3L\3L\3L"+
		"\3L\3L\3L\3L\7L\u0ddd\nL\fL\16L\u0de0\13L\3L\3L\5L\u0de4\nL\3M\3M\3M\3"+
		"M\7M\u0dea\nM\fM\16M\u0ded\13M\5M\u0def\nM\3M\3M\5M\u0df3\nM\3N\3N\5N"+
		"\u0df7\nN\3N\3N\3N\3N\3N\3O\3O\3P\3P\5P\u0e02\nP\3P\5P\u0e05\nP\3P\3P"+
		"\3P\3P\3P\3P\3P\5P\u0e0e\nP\3Q\3Q\5Q\u0e12\nQ\3R\3R\3R\3R\3R\3R\3R\3R"+
		"\3R\3R\3R\3R\5R\u0e20\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u0e2d\nR"+
		"\7R\u0e2f\nR\fR\16R\u0e32\13R\3S\5S\u0e35\nS\3S\3S\5S\u0e39\nS\3S\5S\u0e3c"+
		"\nS\3S\3S\5S\u0e40\nS\3S\3S\5S\u0e44\nS\3S\5S\u0e47\nS\3T\3T\3T\3T\3T"+
		"\3T\3T\7T\u0e50\nT\fT\16T\u0e53\13T\3T\3T\5T\u0e57\nT\3U\3U\3U\3U\3U\3"+
		"U\3U\5U\u0e60\nU\3V\3V\3W\3W\5W\u0e66\nW\3W\3W\5W\u0e6a\nW\5W\u0e6c\n"+
		"W\3X\3X\3X\3X\7X\u0e72\nX\fX\16X\u0e75\13X\3X\3X\3Y\3Y\3Y\3Y\3Z\3Z\3Z"+
		"\5Z\u0e80\nZ\3Z\3Z\3Z\5Z\u0e85\nZ\7Z\u0e87\nZ\fZ\16Z\u0e8a\13Z\3Z\5Z\u0e8d"+
		"\nZ\3Z\3Z\3[\3[\3[\3[\3[\3[\5[\u0e97\n[\3[\3[\3[\3[\3[\3[\3[\3[\3[\7["+
		"\u0ea2\n[\f[\16[\u0ea5\13[\3[\3[\3[\5[\u0eaa\n[\3[\3[\3[\3[\3[\3[\3[\3"+
		"[\3[\5[\u0eb5\n[\3\\\3\\\3]\3]\3]\3]\7]\u0ebd\n]\f]\16]\u0ec0\13]\3]\3"+
		"]\3^\3^\3^\5^\u0ec7\n^\3^\3^\3_\3_\3_\5_\u0ece\n_\3_\3_\5_\u0ed2\n_\3"+
		"_\3_\3_\3_\3_\3_\7_\u0eda\n_\f_\16_\u0edd\13_\3`\3`\3`\3`\3`\3`\3`\3`"+
		"\3`\3`\5`\u0ee9\n`\3`\3`\3`\3`\3`\3`\5`\u0ef1\n`\3`\3`\3`\3`\3`\7`\u0ef8"+
		"\n`\f`\16`\u0efb\13`\3`\3`\3`\5`\u0f00\n`\3`\3`\3`\3`\3`\3`\5`\u0f08\n"+
		"`\3`\3`\3`\3`\5`\u0f0e\n`\3`\5`\u0f11\n`\3`\3`\3`\5`\u0f16\n`\3`\3`\3"+
		"`\3`\5`\u0f1c\n`\3`\3`\3`\5`\u0f21\n`\3`\3`\3`\5`\u0f26\n`\3a\3a\3a\3"+
		"a\3a\3a\3a\3a\3a\3a\3a\3a\5a\u0f34\na\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3"+
		"a\3a\3a\3a\3a\3a\7a\u0f46\na\fa\16a\u0f49\13a\3b\3b\3b\3b\5b\u0f4f\nb"+
		"\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\6c\u0f64\nc"+
		"\rc\16c\u0f65\3c\3c\3c\3c\3c\3c\3c\7c\u0f6f\nc\fc\16c\u0f72\13c\3c\3c"+
		"\3c\3c\3c\3c\3c\5c\u0f7b\nc\3c\5c\u0f7e\nc\3c\3c\3c\5c\u0f83\nc\3c\3c"+
		"\3c\7c\u0f88\nc\fc\16c\u0f8b\13c\5c\u0f8d\nc\3c\3c\3c\3c\3c\7c\u0f94\n"+
		"c\fc\16c\u0f97\13c\5c\u0f99\nc\3c\3c\5c\u0f9d\nc\3c\5c\u0fa0\nc\3c\3c"+
		"\3c\3c\3c\5c\u0fa7\nc\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c"+
		"\3c\3c\3c\3c\3c\3c\3c\3c\7c\u0fc1\nc\fc\16c\u0fc4\13c\5c\u0fc6\nc\3c\3"+
		"c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\6c\u0fd7\nc\rc\16c\u0fd8\3c\3"+
		"c\5c\u0fdd\nc\3c\3c\3c\3c\6c\u0fe3\nc\rc\16c\u0fe4\3c\3c\5c\u0fe9\nc\3"+
		"c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\7c\u1000"+
		"\nc\fc\16c\u1003\13c\5c\u1005\nc\3c\3c\3c\3c\3c\3c\3c\5c\u100e\nc\3c\3"+
		"c\3c\3c\5c\u1014\nc\3c\3c\3c\3c\5c\u101a\nc\3c\3c\3c\3c\5c\u1020\nc\3"+
		"c\3c\3c\3c\3c\3c\3c\3c\3c\5c\u102b\nc\3c\3c\3c\3c\3c\3c\3c\5c\u1034\n"+
		"c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\7c\u1048\nc\f"+
		"c\16c\u104b\13c\5c\u104d\nc\3c\5c\u1050\nc\3c\3c\3c\5c\u1055\nc\3c\3c"+
		"\3c\3c\3c\3c\3c\3c\3c\3c\5c\u1061\nc\7c\u1063\nc\fc\16c\u1066\13c\3d\3"+
		"d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3"+
		"d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3"+
		"d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3"+
		"d\3d\3d\3d\3d\3d\5d\u10b4\nd\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3"+
		"e\3e\5e\u10c5\ne\3e\3e\3e\5e\u10ca\ne\3f\3f\3f\3f\3f\3g\3g\3g\5g\u10d4"+
		"\ng\3g\5g\u10d7\ng\3h\3h\3h\3h\5h\u10dd\nh\5h\u10df\nh\3i\3i\3i\3i\3i"+
		"\3i\5i\u10e7\ni\3j\3j\3k\3k\3l\3l\3m\3m\5m\u10f1\nm\3m\3m\3m\3m\5m\u10f7"+
		"\nm\3n\3n\3o\3o\3p\3p\3p\3p\3p\3p\7p\u1103\np\fp\16p\u1106\13p\3p\3p\3"+
		"p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\7p\u111e\n"+
		"p\fp\16p\u1121\13p\3p\3p\3p\3p\3p\3p\3p\7p\u112a\np\fp\16p\u112d\13p\3"+
		"p\3p\5p\u1131\np\3p\3p\3p\3p\3p\5p\u1138\np\3p\3p\7p\u113c\np\fp\16p\u113f"+
		"\13p\3q\3q\5q\u1143\nq\3r\3r\3r\3r\3r\5r\u114a\nr\3s\3s\3s\3s\3s\3t\3"+
		"t\3t\3t\3t\3t\3u\3u\3u\3u\3u\3u\3u\7u\u115e\nu\fu\16u\u1161\13u\5u\u1163"+
		"\nu\3u\3u\3u\3u\3u\7u\u116a\nu\fu\16u\u116d\13u\5u\u116f\nu\3u\5u\u1172"+
		"\nu\3u\3u\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\5v\u1186\nv"+
		"\3w\3w\3w\3w\3w\3w\3w\3w\3w\5w\u1191\nw\3x\3x\3x\3x\5x\u1197\nx\3y\3y"+
		"\3y\3y\3y\5y\u119e\ny\3z\3z\3z\3z\3z\3z\3z\5z\u11a7\nz\3{\3{\3{\3{\3{"+
		"\5{\u11ae\n{\3|\3|\3|\3|\3|\5|\u11b5\n|\3}\3}\3}\7}\u11ba\n}\f}\16}\u11bd"+
		"\13}\3~\3~\3~\3~\5~\u11c3\n~\3\177\3\177\3\177\7\177\u11c8\n\177\f\177"+
		"\16\177\u11cb\13\177\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5"+
		"\u0080\u11d3\n\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u11d9\n\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\7\u0080\u11df\n\u0080\f\u0080\16\u0080"+
		"\u11e2\13\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\5\u0081"+
		"\u11ea\n\u0081\3\u0082\3\u0082\3\u0082\5\u0082\u11ef\n\u0082\3\u0083\3"+
		"\u0083\3\u0084\3\u0084\3\u0084\2\t\u008a\u00a2\u00bc\u00c0\u00c4\u00de"+
		"\u00fe\u0085\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64"+
		"\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088"+
		"\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0"+
		"\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8"+
		"\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0"+
		"\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8"+
		"\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100"+
		"\u0102\u0104\u0106\2\64\4\2\u0115\u0115\u0139\u0139\3\2\u0158\u0159\4"+
		"\2\"\"\u00e0\u00e0\4\2\u0115\u0115\u0151\u0151\3\2\u0153\u0154\4\2\u009c"+
		"\u009c\u010d\u010d\4\2\35\35\u0095\u0095\3\2\u0111\u0112\4\2\27\27\65"+
		"\65\4\2\u00d5\u00d5\u00fe\u00fe\3\2\u00f9\u00fa\4\2\17\17\u0093\u0093"+
		"\4\2\u008e\u008e\u0119\u0119\3\2\u011d\u011e\4\2\u0128\u0128\u012a\u012a"+
		"\4\2\u00d3\u00d3\u0108\u0108\4\2IITT\4\2GG{{\4\2\64\64\u013a\u013a\4\2"+
		"\u0085\u0085\u011a\u011a\4\2\u0085\u0085\u011b\u011b\4\2\u0119\u0119\u0135"+
		"\u0135\4\2>>UU\4\2\20\20\u01af\u01af\3\2YZ\4\2==\u00bb\u00bb\4\2EEbb\4"+
		"\2\u009f\u009f\u015b\u015b\4\2\20\20\67\67\4\2\31\31\u00a9\u00a9\4\2\u01a0"+
		"\u01a1\u01aa\u01aa\3\2\u01a2\u01a5\5\2\u01a0\u01a1\u01a7\u01a9\u01ab\u01ab"+
		"\4\2\61\61\u00af\u00b0\5\2CC\u00b3\u00b3\u0198\u0198\3\2\u017c\u017e\4"+
		"\2\u017f\u017f\u018b\u018c\3\2\u018e\u0190\3\2\u0199\u019f\5\2\20\20\24"+
		"\24\u00a5\u00a5\4\2CC\u00b3\u00b3\3\2\u01a0\u01a1\b\2\62\62RRmn\u009e"+
		"\u009e\u00c9\u00c9\u0191\u0197\3\2qt\4\2FF\u0089\u0089\5\2NN``\u00ad\u00ad"+
		"\6\288]]kk\u00bf\u00bf\4\2||\u00c8\u00c8\20\2\21\21\'\'\64\64;;CCIIwx"+
		"\u0084\u0084\u009f\u009f\u00aa\u00aa\u00b3\u00b3\u00be\u00be\u00c0\u00c0"+
		"\u00c4\u00c4\23\2\17\20\22&(\63\65:<BDHJvy\u0083\u0085\u009e\u00a0\u00a9"+
		"\u00ab\u00b2\u00b4\u00bd\u00bf\u00bf\u00c1\u00c3\u00c5\u0135\u0137\u0183"+
		"\u0187\u0198\2\u14eb\2\u0108\3\2\2\2\4\u0115\3\2\2\2\6\u0121\3\2\2\2\b"+
		"\u01b1\3\2\2\2\n\u02c1\3\2\2\2\f\u02d9\3\2\2\2\16\u031c\3\2\2\2\20\u0321"+
		"\3\2\2\2\22\u0323\3\2\2\2\24\u033f\3\2\2\2\26\u0341\3\2\2\2\30\u034d\3"+
		"\2\2\2\32\u0360\3\2\2\2\34\u060e\3\2\2\2\36\u0750\3\2\2\2 \u0752\3\2\2"+
		"\2\"\u0784\3\2\2\2$\u0786\3\2\2\2&\u07b8\3\2\2\2(\u07dc\3\2\2\2*\u07ee"+
		"\3\2\2\2,\u081d\3\2\2\2.\u084d\3\2\2\2\60\u0851\3\2\2\2\62\u0856\3\2\2"+
		"\2\64\u0858\3\2\2\2\66\u0868\3\2\2\28\u0878\3\2\2\2:\u087d\3\2\2\2<\u087f"+
		"\3\2\2\2>\u0882\3\2\2\2@\u0885\3\2\2\2B\u0888\3\2\2\2D\u0af9\3\2\2\2F"+
		"\u0b30\3\2\2\2H\u0b33\3\2\2\2J\u0b37\3\2\2\2L\u0b53\3\2\2\2N\u0b5d\3\2"+
		"\2\2P\u0b5f\3\2\2\2R\u0b73\3\2\2\2T\u0b7a\3\2\2\2V\u0b95\3\2\2\2X\u0b97"+
		"\3\2\2\2Z\u0bc2\3\2\2\2\\\u0bd1\3\2\2\2^\u0bdb\3\2\2\2`\u0bea\3\2\2\2"+
		"b\u0bf2\3\2\2\2d\u0c0e\3\2\2\2f\u0c10\3\2\2\2h\u0c47\3\2\2\2j\u0c6a\3"+
		"\2\2\2l\u0c6c\3\2\2\2n\u0c70\3\2\2\2p\u0c7f\3\2\2\2r\u0c81\3\2\2\2t\u0c98"+
		"\3\2\2\2v\u0c9a\3\2\2\2x\u0cb7\3\2\2\2z\u0cba\3\2\2\2|\u0cc2\3\2\2\2~"+
		"\u0d08\3\2\2\2\u0080\u0d0a\3\2\2\2\u0082\u0d10\3\2\2\2\u0084\u0d1b\3\2"+
		"\2\2\u0086\u0d1f\3\2\2\2\u0088\u0d58\3\2\2\2\u008a\u0d5a\3\2\2\2\u008c"+
		"\u0d75\3\2\2\2\u008e\u0d77\3\2\2\2\u0090\u0d80\3\2\2\2\u0092\u0d88\3\2"+
		"\2\2\u0094\u0db1\3\2\2\2\u0096\u0de3\3\2\2\2\u0098\u0df2\3\2\2\2\u009a"+
		"\u0df4\3\2\2\2\u009c\u0dfd\3\2\2\2\u009e\u0e0d\3\2\2\2\u00a0\u0e11\3\2"+
		"\2\2\u00a2\u0e13\3\2\2\2\u00a4\u0e46\3\2\2\2\u00a6\u0e56\3\2\2\2\u00a8"+
		"\u0e58\3\2\2\2\u00aa\u0e61\3\2\2\2\u00ac\u0e63\3\2\2\2\u00ae\u0e6d\3\2"+
		"\2\2\u00b0\u0e78\3\2\2\2\u00b2\u0e7c\3\2\2\2\u00b4\u0eb4\3\2\2\2\u00b6"+
		"\u0eb6\3\2\2\2\u00b8\u0eb8\3\2\2\2\u00ba\u0ec6\3\2\2\2\u00bc\u0ed1\3\2"+
		"\2\2\u00be\u0f25\3\2\2\2\u00c0\u0f33\3\2\2\2\u00c2\u0f4e\3\2\2\2\u00c4"+
		"\u104f\3\2\2\2\u00c6\u10b3\3\2\2\2\u00c8\u10c9\3\2\2\2\u00ca\u10cb\3\2"+
		"\2\2\u00cc\u10d3\3\2\2\2\u00ce\u10de\3\2\2\2\u00d0\u10e6\3\2\2\2\u00d2"+
		"\u10e8\3\2\2\2\u00d4\u10ea\3\2\2\2\u00d6\u10ec\3\2\2\2\u00d8\u10ee\3\2"+
		"\2\2\u00da\u10f8\3\2\2\2\u00dc\u10fa\3\2\2\2\u00de\u1137\3\2\2\2\u00e0"+
		"\u1142\3\2\2\2\u00e2\u1149\3\2\2\2\u00e4\u114b\3\2\2\2\u00e6\u1150\3\2"+
		"\2\2\u00e8\u1156\3\2\2\2\u00ea\u1185\3\2\2\2\u00ec\u1190\3\2\2\2\u00ee"+
		"\u1196\3\2\2\2\u00f0\u119d\3\2\2\2\u00f2\u11a6\3\2\2\2\u00f4\u11ad\3\2"+
		"\2\2\u00f6\u11b4\3\2\2\2\u00f8\u11b6\3\2\2\2\u00fa\u11c2\3\2\2\2\u00fc"+
		"\u11c4\3\2\2\2\u00fe\u11d8\3\2\2\2\u0100\u11e9\3\2\2\2\u0102\u11ee\3\2"+
		"\2\2\u0104\u11f0\3\2\2\2\u0106\u11f2\3\2\2\2\u0108\u010d\5\6\4\2\u0109"+
		"\u010a\7\3\2\2\u010a\u010c\5\6\4\2\u010b\u0109\3\2\2\2\u010c\u010f\3\2"+
		"\2\2\u010d\u010b\3\2\2\2\u010d\u010e\3\2\2\2\u010e\u0111\3\2\2\2\u010f"+
		"\u010d\3\2\2\2\u0110\u0112\7\3\2\2\u0111\u0110\3\2\2\2\u0111\u0112\3\2"+
		"\2\2\u0112\u0113\3\2\2\2\u0113\u0114\7\2\2\3\u0114\3\3\2\2\2\u0115\u0116"+
		"\5\6\4\2\u0116\u0117\7\2\2\3\u0117\5\3\2\2\2\u0118\u0122\5D#\2\u0119\u011a"+
		"\6\4\2\2\u011a\u0122\5\n\6\2\u011b\u011c\6\4\3\2\u011c\u0122\5\34\17\2"+
		"\u011d\u011e\6\4\4\2\u011e\u0122\5\36\20\2\u011f\u0120\6\4\5\2\u0120\u0122"+
		"\5\b\5\2\u0121\u0118\3\2\2\2\u0121\u0119\3\2\2\2\u0121\u011b\3\2\2\2\u0121"+
		"\u011d\3\2\2\2\u0121\u011f\3\2\2\2\u0122\7\3\2\2\2\u0123\u0124\7\21\2"+
		"\2\u0124\u0125\7\u00aa\2\2\u0125\u016a\5\u00fc\177\2\u0126\u0127\7\17"+
		"\2\2\u0127\u0128\7&\2\2\u0128\u0129\5\u00fe\u0080\2\u0129\u012a\7\u00d3"+
		"\2\2\u012a\u012b\7\u00d4\2\2\u012b\u012c\5\u00aeX\2\u012c\u016b\3\2\2"+
		"\2\u012d\u012e\7\17\2\2\u012e\u012f\7&\2\2\u012f\u0130\5\u00fe\u0080\2"+
		"\u0130\u0131\7\u00d7\2\2\u0131\u0132\7\u00d4\2\2\u0132\u0133\5\u00aeX"+
		"\2\u0133\u0134\7\u00d8\2\2\u0134\u0135\5\u00fc\177\2\u0135\u0136\5\u00ae"+
		"X\2\u0136\u016b\3\2\2\2\u0137\u0138\7\17\2\2\u0138\u0139\7&\2\2\u0139"+
		"\u013a\5\u00fe\u0080\2\u013a\u013b\7\u0128\2\2\u013b\u013c\5\u00aeX\2"+
		"\u013c\u016b\3\2\2\2\u013d\u013e\79\2\2\u013e\u013f\7\u00d3\2\2\u013f"+
		"\u016b\7\u00d4\2\2\u0140\u0141\79\2\2\u0141\u0142\7&\2\2\u0142\u016b\5"+
		"\u00fe\u0080\2\u0143\u0144\7\21\2\2\u0144\u0145\5\u00fe\u0080\2\u0145"+
		"\u0146\7\u00a2\2\2\u0146\u0147\7w\2\2\u0147\u0148\7x\2\2\u0148\u016b\3"+
		"\2\2\2\u0149\u014a\7\21\2\2\u014a\u014b\7!\2\2\u014b\u014c\5\u00fe\u0080"+
		"\2\u014c\u014d\7\u00a2\2\2\u014d\u0151\7\u00ce\2\2\u014e\u0152\5\u00ce"+
		"h\2\u014f\u0152\5\u00fe\u0080\2\u0150\u0152\5\u0102\u0082\2\u0151\u014e"+
		"\3\2\2\2\u0151\u014f\3\2\2\2\u0151\u0150\3\2\2\2\u0152\u016b\3\2\2\2\u0153"+
		"\u0154\7\21\2\2\u0154\u0155\7!\2\2\u0155\u0156\5\u00fe\u0080\2\u0156\u0157"+
		"\7\u00a2\2\2\u0157\u0158\7w\2\2\u0158\u0159\7x\2\2\u0159\u016b\3\2\2\2"+
		"\u015a\u015b\7\21\2\2\u015b\u015c\5\u00fe\u0080\2\u015c\u015d\7\u00a2"+
		"\2\2\u015d\u015e\7\60\2\2\u015e\u015f\7\u00b5\2\2\u015f\u0160\5\u00de"+
		"p\2\u0160\u016b\3\2\2\2\u0161\u0162\7\u0173\2\2\u0162\u0163\7w\2\2\u0163"+
		"\u0164\7\u0174\2\2\u0164\u0165\7\u0171\2\2\u0165\u0166\7\u00c5\2\2\u0166"+
		"\u0167\7\u0175\2\2\u0167\u016b\7\u00aa\2\2\u0168\u0169\79\2\2\u0169\u016b"+
		"\5\u00fe\u0080\2\u016a\u0126\3\2\2\2\u016a\u012d\3\2\2\2\u016a\u0137\3"+
		"\2\2\2\u016a\u013d\3\2\2\2\u016a\u0140\3\2\2\2\u016a\u0143\3\2\2\2\u016a"+
		"\u0149\3\2\2\2\u016a\u0153\3\2\2\2\u016a\u015a\3\2\2\2\u016a\u0161\3\2"+
		"\2\2\u016a\u0168\3\2\2\2\u016b\u01b2\3\2\2\2\u016c\u016d\7\u00b6\2\2\u016d"+
		"\u016e\7\u00aa\2\2\u016e\u0170\5\u00fc\177\2\u016f\u0171\7\u016e\2\2\u0170"+
		"\u016f\3\2\2\2\u0170\u0171\3\2\2\2\u0171\u01b2\3\2\2\2\u0172\u0174\7\'"+
		"\2\2\u0173\u0175\7\u00d2\2\2\u0174\u0173\3\2\2\2\u0174\u0175\3\2\2\2\u0175"+
		"\u0176\3\2\2\2\u0176\u017a\7\u00aa\2\2\u0177\u0178\7S\2\2\u0178\u0179"+
		"\7w\2\2\u0179\u017b\7@\2\2\u017a\u0177\3\2\2\2\u017a\u017b\3\2\2\2\u017b"+
		"\u017c\3\2\2\2\u017c\u017d\5\u00fc\177\2\u017d\u017e\7f\2\2\u017e\u017f"+
		"\5\u00fc\177\2\u017f\u01b2\3\2\2\2\u0180\u0181\7\u0172\2\2\u0181\u0182"+
		"\7\u00aa\2\2\u0182\u01b2\5\u00fc\177\2\u0183\u0184\7\'\2\2\u0184\u0188"+
		"\7\u00c2\2\2\u0185\u0186\7S\2\2\u0186\u0187\7w\2\2\u0187\u0189\7@\2\2"+
		"\u0188\u0185\3\2\2\2\u0188\u0189\3\2\2\2\u0189\u018a\3\2\2\2\u018a\u0196"+
		"\5\u00fc\177\2\u018b\u018c\7\4\2\2\u018c\u0191\58\35\2\u018d\u018e\7\5"+
		"\2\2\u018e\u0190\58\35\2\u018f\u018d\3\2\2\2\u0190\u0193\3\2\2\2\u0191"+
		"\u018f\3\2\2\2\u0191\u0192\3\2\2\2\u0192\u0194\3\2\2\2\u0193\u0191\3\2"+
		"\2\2\u0194\u0195\7\6\2\2\u0195\u0197\3\2\2\2\u0196\u018b\3\2\2\2\u0196"+
		"\u0197\3\2\2\2\u0197\u019a\3\2\2\2\u0198\u0199\7#\2\2\u0199\u019b\5\u00ce"+
		"h\2\u019a\u0198\3\2\2\2\u019a\u019b\3\2\2\2\u019b\u019c\3\2\2\2\u019c"+
		"\u019d\7\26\2\2\u019d\u019e\5H%\2\u019e\u01b2\3\2\2\2\u019f\u01a0\7\'"+
		"\2\2\u01a0\u01a1\7\u0176\2\2\u01a1\u01a2\5\u00fe\u0080\2\u01a2\u01a3\7"+
		"\u0177\2\2\u01a3\u01a4\7\33\2\2\u01a4\u01a5\5\u0102\u0082\2\u01a5\u01a6"+
		"\7\u0178\2\2\u01a6\u01ab\5\u0102\u0082\2\u01a7\u01a8\7\u0179\2\2\u01a8"+
		"\u01ac\5\u0102\u0082\2\u01a9\u01aa\7u\2\2\u01aa\u01ac\7\u0179\2\2\u01ab"+
		"\u01a7\3\2\2\2\u01ab\u01a9\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad\u01ae\7\u00a6"+
		"\2\2\u01ae\u01af\7\u00c5\2\2\u01af\u01b0\5\u0102\u0082\2\u01b0\u01b2\3"+
		"\2\2\2\u01b1\u0123\3\2\2\2\u01b1\u016c\3\2\2\2\u01b1\u0172\3\2\2\2\u01b1"+
		"\u0180\3\2\2\2\u01b1\u0183\3\2\2\2\u01b1\u019f\3\2\2\2\u01b2\t\3\2\2\2"+
		"\u01b3\u01b5\7\'\2\2\u01b4\u01b6\7\u00d2\2\2\u01b5\u01b4\3\2\2\2\u01b5"+
		"\u01b6\3\2\2\2\u01b6\u01b7\3\2\2\2\u01b7\u01bb\7\u00aa\2\2\u01b8\u01b9"+
		"\7S\2\2\u01b9\u01ba\7w\2\2\u01ba\u01bc\7@\2\2\u01bb\u01b8\3\2\2\2\u01bb"+
		"\u01bc\3\2\2\2\u01bc\u01bd\3\2\2\2\u01bd\u01bf\5\u00fc\177\2\u01be\u01c0"+
		"\5\u00aeX\2\u01bf\u01be\3\2\2\2\u01bf\u01c0\3\2\2\2\u01c0\u01c2\3\2\2"+
		"\2\u01c1\u01c3\7\u0141\2\2\u01c2\u01c1\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3"+
		"\u01c5\3\2\2\2\u01c4\u01c6\7\u0140\2\2\u01c5\u01c4\3\2\2\2\u01c5\u01c6"+
		"\3\2\2\2\u01c6\u01c9\3\2\2\2\u01c7\u01c8\78\2\2\u01c8\u01ca\7\33\2\2\u01c9"+
		"\u01c7\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01cc\3\2\2\2\u01cb\u01cd\7\26"+
		"\2\2\u01cc\u01cb\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd\u01ce\3\2\2\2\u01ce"+
		"\u01cf\5H%\2\u01cf\u02c2\3\2\2\2\u01d0\u01d2\7\'\2\2\u01d1\u01d3\7\u00d2"+
		"\2\2\u01d2\u01d1\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4"+
		"\u01d8\7\u00aa\2\2\u01d5\u01d6\7S\2\2\u01d6\u01d7\7w\2\2\u01d7\u01d9\7"+
		"@\2\2\u01d8\u01d5\3\2\2\2\u01d8\u01d9\3\2\2\2\u01d9\u01da\3\2\2\2\u01da"+
		"\u01db\5\u00fc\177\2\u01db\u01dc\7f\2\2\u01dc\u01dd\5\u00fc\177\2\u01dd"+
		"\u02c2\3\2\2\2\u01de\u01df\7\21\2\2\u01df\u01e0\7\u00aa\2\2\u01e0\u01e1"+
		"\5\u00fc\177\2\u01e1\u01e2\79\2\2\u01e2\u01e3\7\u0141\2\2\u01e3\u02c2"+
		"\3\2\2\2\u01e4\u01e5\7\21\2\2\u01e5\u01e6\7\u00aa\2\2\u01e6\u01e7\5\u00fc"+
		"\177\2\u01e7\u01e8\7\u0143\2\2\u01e8\u01e9\7\u0142\2\2\u01e9\u02c2\3\2"+
		"\2\2\u01ea\u01eb\7\21\2\2\u01eb\u01ec\7\u00aa\2\2\u01ec\u01ed\5\u00fc"+
		"\177\2\u01ed\u01ee\7\u0104\2\2\u01ee\u01ef\5\u00fe\u0080\2\u01ef\u01f0"+
		"\5\u00fe\u0080\2\u01f0\u01f1\5\u00dep\2\u01f1\u02c2\3\2\2\2\u01f2\u01f3"+
		"\7\21\2\2\u01f3\u01f4\7\u00aa\2\2\u01f4\u01f5\5\u00fc\177\2\u01f5\u01f6"+
		"\7o\2\2\u01f6\u01f7\5\u00fe\u0080\2\u01f7\u01fb\5\u00dep\2\u01f8\u01fc"+
		"\7E\2\2\u01f9\u01fa\7\u0105\2\2\u01fa\u01fc\5\u00fe\u0080\2\u01fb\u01f8"+
		"\3\2\2\2\u01fb\u01f9\3\2\2\2\u01fb\u01fc\3\2\2\2\u01fc\u02c2\3\2\2\2\u01fd"+
		"\u01fe\7\u0091\2\2\u01fe\u01ff\7\u00aa\2\2\u01ff\u0200\5\u00fc\177\2\u0200"+
		"\u0201\7\u00b1\2\2\u0201\u0202\5\u00fc\177\2\u0202\u02c2\3\2\2\2\u0203"+
		"\u0204\7\21\2\2\u0204\u0205\7\u00c2\2\2\u0205\u0207\5\u00fc\177\2\u0206"+
		"\u0208\5\u00aeX\2\u0207\u0206\3\2\2\2\u0207\u0208\3\2\2\2\u0208\u0209"+
		"\3\2\2\2\u0209\u020a\7\26\2\2\u020a\u020b\5H%\2\u020b\u02c2\3\2\2\2\u020c"+
		"\u020d\7\'\2\2\u020d\u020e\7\u0108\2\2\u020e\u020f\5\u00fe\u0080\2\u020f"+
		"\u0210\7{\2\2\u0210\u0211\5\u00fc\177\2\u0211\u0212\7\4\2\2\u0212\u0213"+
		"\5\u00fe\u0080\2\u0213\u0217\7\6\2\2\u0214\u0215\7\u0145\2\2\u0215\u0216"+
		"\7\u019a\2\2\u0216\u0218\5\u0102\u0082\2\u0217\u0214\3\2\2\2\u0217\u0218"+
		"\3\2\2\2\u0218\u021c\3\2\2\2\u0219\u021a\7\u0144\2\2\u021a\u021b\7\u019a"+
		"\2\2\u021b\u021d\5\u0102\u0082\2\u021c\u0219\3\2\2\2\u021c\u021d\3\2\2"+
		"\2\u021d\u021e\3\2\2\2\u021e\u021f\7\u00be\2\2\u021f\u0221\7\u0135\2\2"+
		"\u0220\u0222\t\2\2\2\u0221\u0220\3\2\2\2\u0221\u0222\3\2\2\2\u0222\u02c2"+
		"\3\2\2\2\u0223\u0224\7\21\2\2\u0224\u0225\7\u00aa\2\2\u0225\u0226\5\u00fc"+
		"\177\2\u0226\u0227\7\17\2\2\u0227\u0228\7\u0108\2\2\u0228\u0229\5\u00fe"+
		"\u0080\2\u0229\u022a\7\4\2\2\u022a\u022b\5\u00fe\u0080\2\u022b\u022f\7"+
		"\6\2\2\u022c\u022d\7\u0145\2\2\u022d\u022e\7\u019a\2\2\u022e\u0230\5\u0102"+
		"\u0082\2\u022f\u022c\3\2\2\2\u022f\u0230\3\2\2\2\u0230\u0234\3\2\2\2\u0231"+
		"\u0232\7\u0144\2\2\u0232\u0233\7\u019a\2\2\u0233\u0235\5\u0102\u0082\2"+
		"\u0234\u0231\3\2\2\2\u0234\u0235\3\2\2\2\u0235\u0236\3\2\2\2\u0236\u0237"+
		"\7\u00be\2\2\u0237\u0239\7\u0135\2\2\u0238\u023a\7\u0139\2\2\u0239\u0238"+
		"\3\2\2\2\u0239\u023a\3\2\2\2\u023a\u02c2\3\2\2\2\u023b\u023c\79\2\2\u023c"+
		"\u023f\7\u0108\2\2\u023d\u023e\7S\2\2\u023e\u0240\7@\2\2\u023f\u023d\3"+
		"\2\2\2\u023f\u0240\3\2\2\2\u0240\u0241\3\2\2\2\u0241\u0242\5\u00fc\177"+
		"\2\u0242\u0243\7{\2\2\u0243\u0244\5\u00fc\177\2\u0244\u02c2\3\2\2\2\u0245"+
		"\u0246\7\21\2\2\u0246\u0247\7\u00aa\2\2\u0247\u0248\5\u00fc\177\2\u0248"+
		"\u024d\7\u0146\2\2\u0249\u024a\7{\2\2\u024a\u024b\7\u0147\2\2\u024b\u024e"+
		"\5\u00fe\u0080\2\u024c\u024e\7\u0148\2\2\u024d\u0249\3\2\2\2\u024d\u024c"+
		"\3\2\2\2\u024e\u02c2\3\2\2\2\u024f\u0250\7\21\2\2\u0250\u0251\7\u00aa"+
		"\2\2\u0251\u0252\5\u00fc\177\2\u0252\u0254\7\21\2\2\u0253\u0255\7!\2\2"+
		"\u0254\u0253\3\2\2\2\u0254\u0255\3\2\2\2\u0255\u0256\3\2\2\2\u0256\u0257"+
		"\5\u00fe\u0080\2\u0257\u0258\7\u013e\2\2\u0258\u0259\7\4\2\2\u0259\u025a"+
		"\7\u01af\2\2\u025a\u025b\7\6\2\2\u025b\u02c2\3\2\2\2\u025c\u025d\7\21"+
		"\2\2\u025d\u025e\7\u00aa\2\2\u025e\u025f\5\u00fc\177\2\u025f\u0260\7\21"+
		"\2\2\u0260\u0261\7\u013e\2\2\u0261\u0262\7\4\2\2\u0262\u0263\7\u01af\2"+
		"\2\u0263\u0264\7\5\2\2\u0264\u0265\7\u01af\2\2\u0265\u0266\7\6\2\2\u0266"+
		"\u02c2\3\2\2\2\u0267\u0269\7\u014a\2\2\u0268\u026a\7\\\2\2\u0269\u0268"+
		"\3\2\2\2\u0269\u026a\3\2\2\2\u026a\u026b\3\2\2\2\u026b\u026d\5\u00fc\177"+
		"\2\u026c\u026e\5\u00fe\u0080\2\u026d\u026c\3\2\2\2\u026d\u026e\3\2\2\2"+
		"\u026e\u026f\3\2\2\2\u026f\u0270\7\u00be\2\2\u0270\u0272\5\u00fc\177\2"+
		"\u0271\u0273\5\u00fe\u0080\2\u0272\u0271\3\2\2\2\u0272\u0273\3\2\2\2\u0273"+
		"\u0274\3\2\2\2\u0274\u0275\7{\2\2\u0275\u0288\5\u00bc_\2\u0276\u0277\7"+
		"\u00c3\2\2\u0277\u0278\7\u0149\2\2\u0278\u0279\7\u00ae\2\2\u0279\u027a"+
		"\7\u00b7\2\2\u027a\u027b\7\u00a2\2\2\u027b\u027c\5\u00c4c\2\u027c\u027d"+
		"\7\u019a\2\2\u027d\u0285\5\u00c0a\2\u027e\u027f\7\5\2\2\u027f\u0280\5"+
		"\u00c4c\2\u0280\u0281\7\u019a\2\2\u0281\u0282\5\u00c0a\2\u0282\u0284\3"+
		"\2\2\2\u0283\u027e\3\2\2\2\u0284\u0287\3\2\2\2\u0285\u0283\3\2\2\2\u0285"+
		"\u0286\3\2\2\2\u0286\u0289\3\2\2\2\u0287\u0285\3\2\2\2\u0288\u0276\3\2"+
		"\2\2\u0288\u0289\3\2\2\2\u0289\u02a5\3\2\2\2\u028a\u028b\7\u00c3\2\2\u028b"+
		"\u028c\7w\2\2\u028c\u028d\7\u0149\2\2\u028d\u028e\7\u00ae\2\2\u028e\u028f"+
		"\7X\2\2\u028f\u0293\7\4\2\2\u0290\u0291\5\u00fe\u0080\2\u0291\u0292\7"+
		"\7\2\2\u0292\u0294\3\2\2\2\u0293\u0290\3\2\2\2\u0293\u0294\3\2\2\2\u0294"+
		"\u0295\3\2\2\2\u0295\u029f\5\u00fe\u0080\2\u0296\u029a\7\5\2\2\u0297\u0298"+
		"\5\u00fe\u0080\2\u0298\u0299\7\7\2\2\u0299\u029b\3\2\2\2\u029a\u0297\3"+
		"\2\2\2\u029a\u029b\3\2\2\2\u029b\u029c\3\2\2\2\u029c\u029e\5\u00fe\u0080"+
		"\2\u029d\u0296\3\2\2\2\u029e\u02a1\3\2\2\2\u029f\u029d\3\2\2\2\u029f\u02a0"+
		"\3\2\2\2\u02a0\u02a2\3\2\2\2\u02a1\u029f\3\2\2\2\u02a2\u02a3\7\6\2\2\u02a3"+
		"\u02a4\5\u008eH\2\u02a4\u02a6\3\2\2\2\u02a5\u028a\3\2\2\2\u02a5\u02a6"+
		"\3\2\2\2\u02a6\u02c2\3\2\2\2\u02a7\u02a8\5H%\2\u02a8\u02a9\7\\\2\2\u02a9"+
		"\u02aa\7\u014b\2\2\u02aa\u02ae\5\u00ceh\2\u02ab\u02ad\5\20\t\2\u02ac\u02ab"+
		"\3\2\2\2\u02ad\u02b0\3\2\2\2\u02ae\u02ac\3\2\2\2\u02ae\u02af\3\2\2\2\u02af"+
		"\u02c2\3\2\2\2\u02b0\u02ae\3\2\2\2\u02b1\u02b2\7\u0114\2\2\u02b2\u02b3"+
		"\7\60\2\2\u02b3\u02b4\7\u015c\2\2\u02b4\u02b6\5\u00ceh\2\u02b5\u02b7\7"+
		"\u0093\2\2\u02b6\u02b5\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7\u02b8\3\2\2\2"+
		"\u02b8\u02b9\7\\\2\2\u02b9\u02ba\7\u00aa\2\2\u02ba\u02be\5\u00fc\177\2"+
		"\u02bb\u02bd\5\f\7\2\u02bc\u02bb\3\2\2\2\u02bd\u02c0\3\2\2\2\u02be\u02bc"+
		"\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02c2\3\2\2\2\u02c0\u02be\3\2\2\2\u02c1"+
		"\u01b3\3\2\2\2\u02c1\u01d0\3\2\2\2\u02c1\u01de\3\2\2\2\u02c1\u01e4\3\2"+
		"\2\2\u02c1\u01ea\3\2\2\2\u02c1\u01f2\3\2\2\2\u02c1\u01fd\3\2\2\2\u02c1"+
		"\u0203\3\2\2\2\u02c1\u020c\3\2\2\2\u02c1\u0223\3\2\2\2\u02c1\u023b\3\2"+
		"\2\2\u02c1\u0245\3\2\2\2\u02c1\u024f\3\2\2\2\u02c1\u025c\3\2\2\2\u02c1"+
		"\u0267\3\2\2\2\u02c1\u02a7\3\2\2\2\u02c1\u02b1\3\2\2\2\u02c2\13\3\2\2"+
		"\2\u02c3\u02c4\7\u0157\2\2\u02c4\u02c5\7\u00a2\2\2\u02c5\u02da\t\3\2\2"+
		"\u02c6\u02c7\7\u015d\2\2\u02c7\u02cb\5\u0102\u0082\2\u02c8\u02c9\7Q\2"+
		"\2\u02c9\u02ca\7\u00e6\2\2\u02ca\u02cc\7\u015e\2\2\u02cb\u02c8\3\2\2\2"+
		"\u02cb\u02cc\3\2\2\2\u02cc\u02da\3\2\2\2\u02cd\u02ce\7\u014f\2\2\u02ce"+
		"\u02da\5\u00ceh\2\u02cf\u02d1\7\u00e0\2\2\u02d0\u02d2\5\16\b\2\u02d1\u02d0"+
		"\3\2\2\2\u02d2\u02d3\3\2\2\2\u02d3\u02d1\3\2\2\2\u02d3\u02d4\3\2\2\2\u02d4"+
		"\u02da\3\2\2\2\u02d5\u02d6\7\u00e6\2\2\u02d6\u02d7\7\u00e1\2\2\u02d7\u02d8"+
		"\7\33\2\2\u02d8\u02da\5\u00ceh\2\u02d9\u02c3\3\2\2\2\u02d9\u02c6\3\2\2"+
		"\2\u02d9\u02cd\3\2\2\2\u02d9\u02cf\3\2\2\2\u02d9\u02d5\3\2\2\2\u02da\r"+
		"\3\2\2\2\u02db\u02dc\7\u00e1\2\2\u02dc\u02dd\7\33\2\2\u02dd\u031d\5\u00ce"+
		"h\2\u02de\u02df\7\u014d\2\2\u02df\u02e0\7\33\2\2\u02e0\u031d\5\u00ceh"+
		"\2\u02e1\u02e2\7\u013a\2\2\u02e2\u031d\7\u015f\2\2\u02e3\u031d\7\u0160"+
		"\2\2\u02e4\u02e5\7\u0161\2\2\u02e5\u031d\5\u00ceh\2\u02e6\u02e7\7\u0162"+
		"\2\2\u02e7\u031d\5\u00ceh\2\u02e8\u02ec\7\u00e6\2\2\u02e9\u02ea\7\u00e1"+
		"\2\2\u02ea\u02eb\7\33\2\2\u02eb\u02ed\5\u00ceh\2\u02ec\u02e9\3\2\2\2\u02ec"+
		"\u02ed\3\2\2\2\u02ed\u031d\3\2\2\2\u02ee\u02ef\7\u0163\2\2\u02ef\u031d"+
		"\5\u0102\u0082\2\u02f0\u02f1\7\u0164\2\2\u02f1\u02f2\7H\2\2\u02f2\u031d"+
		"\5\u00ceh\2\u02f3\u02f4\7\61\2\2\u02f4\u02f5\7H\2\2\u02f5\u031d\5\u00ce"+
		"h\2\u02f6\u02f7\7\u00b0\2\2\u02f7\u02f8\7H\2\2\u02f8\u031d\5\u00ceh\2"+
		"\u02f9\u02fa\7\u00af\2\2\u02fa\u02fb\7H\2\2\u02fb\u031d\5\u00ceh\2\u02fc"+
		"\u02fd\7\u0165\2\2\u02fd\u031d\5\u0102\u0082\2\u02fe\u02ff\7\u0166\2\2"+
		"\u02ff\u031d\5\u00ceh\2\u0300\u031d\7\u0167\2\2\u0301\u0302\7\u0168\2"+
		"\2\u0302\u031d\5\u0102\u0082\2\u0303\u0304\7\u0169\2\2\u0304\u031d\5\u0102"+
		"\u0082\2\u0305\u0306\7\u016a\2\2\u0306\u031d\5\u0102\u0082\2\u0307\u0308"+
		"\7\u016b\2\2\u0308\u031d\5\u0102\u0082\2\u0309\u030a\7\u00a2\2\2\u030a"+
		"\u030b\5\u00fe\u0080\2\u030b\u030c\7\u019a\2\2\u030c\u0314\5\u00c4c\2"+
		"\u030d\u030e\7\5\2\2\u030e\u030f\5\u00fe\u0080\2\u030f\u0310\7\u019a\2"+
		"\2\u0310\u0311\5\u00c4c\2\u0311\u0313\3\2\2\2\u0312\u030d\3\2\2\2\u0313"+
		"\u0316\3\2\2\2\u0314\u0312\3\2\2\2\u0314\u0315\3\2\2\2\u0315\u031d\3\2"+
		"\2\2\u0316\u0314\3\2\2\2\u0317\u0318\7\u00fb\2\2\u0318\u0319\7\u016c\2"+
		"\2\u0319\u031d\7\u00e6\2\2\u031a\u031b\7\u016d\2\2\u031b\u031d\5\u00ce"+
		"h\2\u031c\u02db\3\2\2\2\u031c\u02de\3\2\2\2\u031c\u02e1\3\2\2\2\u031c"+
		"\u02e3\3\2\2\2\u031c\u02e4\3\2\2\2\u031c\u02e6\3\2\2\2\u031c\u02e8\3\2"+
		"\2\2\u031c\u02ee\3\2\2\2\u031c\u02f0\3\2\2\2\u031c\u02f3\3\2\2\2\u031c"+
		"\u02f6\3\2\2\2\u031c\u02f9\3\2\2\2\u031c\u02fc\3\2\2\2\u031c\u02fe\3\2"+
		"\2\2\u031c\u0300\3\2\2\2\u031c\u0301\3\2\2\2\u031c\u0303\3\2\2\2\u031c"+
		"\u0305\3\2\2\2\u031c\u0307\3\2\2\2\u031c\u0309\3\2\2\2\u031c\u0317\3\2"+
		"\2\2\u031c\u031a\3\2\2\2\u031d\17\3\2\2\2\u031e\u0322\5\22\n\2\u031f\u0322"+
		"\5\26\f\2\u0320\u0322\5\32\16\2\u0321\u031e\3\2\2\2\u0321\u031f\3\2\2"+
		"\2\u0321\u0320\3\2\2\2\u0322\21\3\2\2\2\u0323\u0325\t\4\2\2\u0324\u0326"+
		"\5\24\13\2\u0325\u0324\3\2\2\2\u0326\u0327\3\2\2\2\u0327\u0325\3\2\2\2"+
		"\u0327\u0328\3\2\2\2\u0328\23\3\2\2\2\u0329\u032a\7\u00e1\2\2\u032a\u032b"+
		"\7\33\2\2\u032b\u0340\5\u00ceh\2\u032c\u032e\7\u014c\2\2\u032d\u032c\3"+
		"\2\2\2\u032d\u032e\3\2\2\2\u032e\u032f\3\2\2\2\u032f\u0330\7\u014d\2\2"+
		"\u0330\u0331\7\33\2\2\u0331\u0340\5\u00ceh\2\u0332\u0333\7\u00e2\2\2\u0333"+
		"\u0334\7\33\2\2\u0334\u0340\5\u00ceh\2\u0335\u0337\7\u014c\2\2\u0336\u0335"+
		"\3\2\2\2\u0336\u0337\3\2\2\2\u0337\u0338\3\2\2\2\u0338\u0339\7\u014e\2"+
		"\2\u0339\u033a\7\33\2\2\u033a\u0340\5\u00ceh\2\u033b\u033c\7\u0161\2\2"+
		"\u033c\u0340\5\u00ceh\2\u033d\u033e\7\u01bf\2\2\u033e\u0340\5\u00fe\u0080"+
		"\2\u033f\u0329\3\2\2\2\u033f\u032d\3\2\2\2\u033f\u0332\3\2\2\2\u033f\u0336"+
		"\3\2\2\2\u033f\u033b\3\2\2\2\u033f\u033d\3\2\2\2\u0340\25\3\2\2\2\u0341"+
		"\u0343\7\u00e6\2\2\u0342\u0344\5\30\r\2\u0343\u0342\3\2\2\2\u0344\u0345"+
		"\3\2\2\2\u0345\u0343\3\2\2\2\u0345\u0346\3\2\2\2\u0346\27\3\2\2\2\u0347"+
		"\u0348\7\u00e1\2\2\u0348\u0349\7\33\2\2\u0349\u034e\5\u00ceh\2\u034a\u034b"+
		"\7\u016f\2\2\u034b\u034c\7\33\2\2\u034c\u034e\5\u00ceh\2\u034d\u0347\3"+
		"\2\2\2\u034d\u034a\3\2\2\2\u034e\31\3\2\2\2\u034f\u0350\7\u014f\2\2\u0350"+
		"\u0361\5\u00ceh\2\u0351\u0352\7\u0150\2\2\u0352\u0353\7\33\2\2\u0353\u0361"+
		"\t\5\2\2\u0354\u0355\7\u0152\2\2\u0355\u0356\7\33\2\2\u0356\u0361\t\6"+
		"\2\2\u0357\u0358\7\u0155\2\2\u0358\u0361\5\u0102\u0082\2\u0359\u035a\7"+
		"\u0156\2\2\u035a\u0361\5\u0102\u0082\2\u035b\u035c\7\u0157\2\2\u035c\u035d"+
		"\7\u00a2\2\2\u035d\u0361\t\3\2\2\u035e\u035f\7\u00c5\2\2\u035f\u0361\7"+
		"\u015a\2\2\u0360\u034f\3\2\2\2\u0360\u0351\3\2\2\2\u0360\u0354\3\2\2\2"+
		"\u0360\u0357\3\2\2\2\u0360\u0359\3\2\2\2\u0360\u035b\3\2\2\2\u0360\u035e"+
		"\3\2\2\2\u0361\33\3\2\2\2\u0362\u0363\7I\2\2\u0363\u0365\5\u00fc\177\2"+
		"\u0364\u0366\5F$\2\u0365\u0364\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u0365"+
		"\3\2\2\2\u0367\u0368\3\2\2\2\u0368\u060f\3\2\2\2\u0369\u060f\5(\25\2\u036a"+
		"\u036b\7\u00a2\2\2\u036b\u036c\5\u00fc\177\2\u036c\u036d\7\u019a\2\2\u036d"+
		"\u036e\5\u00c4c\2\u036e\u060f\3\2\2\2\u036f\u0370\7\'\2\2\u0370\u0374"+
		"\t\7\2\2\u0371\u0372\7S\2\2\u0372\u0373\7w\2\2\u0373\u0375\7@\2\2\u0374"+
		"\u0371\3\2\2\2\u0374\u0375\3\2\2\2\u0375\u0376\3\2\2\2\u0376\u0379\5\u00fc"+
		"\177\2\u0377\u0378\7#\2\2\u0378\u037a\5\u00ceh\2\u0379\u0377\3\2\2\2\u0379"+
		"\u037a\3\2\2\2\u037a\u037d\3\2\2\2\u037b\u037c\7\u00f4\2\2\u037c\u037e"+
		"\5\60\31\2\u037d\u037b\3\2\2\2\u037d\u037e\3\2\2\2\u037e\u0382\3\2\2\2"+
		"\u037f\u0380\7\u00c5\2\2\u0380\u0381\7\u010e\2\2\u0381\u0383\5\66\34\2"+
		"\u0382\u037f\3\2\2\2\u0382\u0383\3\2\2\2\u0383\u060f\3\2\2\2\u0384\u0385"+
		"\79\2\2\u0385\u0388\t\7\2\2\u0386\u0387\7S\2\2\u0387\u0389\7@\2\2\u0388"+
		"\u0386\3\2\2\2\u0388\u0389\3\2\2\2\u0389\u038a\3\2\2\2\u038a\u038c\5\u00fc"+
		"\177\2\u038b\u038d\t\b\2\2\u038c\u038b\3\2\2\2\u038c\u038d\3\2\2\2\u038d"+
		"\u060f\3\2\2\2\u038e\u038f\7\21\2\2\u038f\u0390\t\7\2\2\u0390\u0391\5"+
		"\u00fc\177\2\u0391\u039b\7\u00a2\2\2\u0392\u0393\7\u010e\2\2\u0393\u039c"+
		"\5\66\34\2\u0394\u0396\7\u010f\2\2\u0395\u0397\t\t\2\2\u0396\u0395\3\2"+
		"\2\2\u0396\u0397\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u039c\5\u00fe\u0080"+
		"\2\u0399\u039a\7\u00f4\2\2\u039a\u039c\5\60\31\2\u039b\u0392\3\2\2\2\u039b"+
		"\u0394\3\2\2\2\u039b\u0399\3\2\2\2\u039c\u060f\3\2\2\2\u039d\u039e\79"+
		"\2\2\u039e\u03a1\7\u00aa\2\2\u039f\u03a0\7S\2\2\u03a0\u03a2\7@\2\2\u03a1"+
		"\u039f\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a5\5\u00fc"+
		"\177\2\u03a4\u03a6\7\u00d1\2\2\u03a5\u03a4\3\2\2\2\u03a5\u03a6\3\2\2\2"+
		"\u03a6\u060f\3\2\2\2\u03a7\u03a8\7\u00b6\2\2\u03a8\u03a9\7\u00aa\2\2\u03a9"+
		"\u03ac\5\u00fc\177\2\u03aa\u03ab\7\u0085\2\2\u03ab\u03ad\5\u00b8]\2\u03ac"+
		"\u03aa\3\2\2\2\u03ac\u03ad\3\2\2\2\u03ad\u060f\3\2\2\2\u03ae\u03b0\7\'"+
		"\2\2\u03af\u03b1\7\u00d2\2\2\u03b0\u03af\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1"+
		"\u03b3\3\2\2\2\u03b2\u03b4\7\u00d0\2\2\u03b3\u03b2\3\2\2\2\u03b3\u03b4"+
		"\3\2\2\2\u03b4\u03b5\3\2\2\2\u03b5\u03b9\7\u00aa\2\2\u03b6\u03b7\7S\2"+
		"\2\u03b7\u03b8\7w\2\2\u03b8\u03ba\7@\2\2\u03b9\u03b6\3\2\2\2\u03b9\u03ba"+
		"\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb\u03c1\5\u00fc\177\2\u03bc\u03bd\7\4"+
		"\2\2\u03bd\u03be\5r:\2\u03be\u03bf\5*\26\2\u03bf\u03c0\7\6\2\2\u03c0\u03c2"+
		"\3\2\2\2\u03c1\u03bc\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u03c5\3\2\2\2\u03c3"+
		"\u03c4\7#\2\2\u03c4\u03c6\5\u00ceh\2\u03c5\u03c3\3\2\2\2\u03c5\u03c6\3"+
		"\2\2\2\u03c6\u03cd\3\2\2\2\u03c7\u03c8\7\u00d9\2\2\u03c8\u03c9\7\33\2"+
		"\2\u03c9\u03ca\7\4\2\2\u03ca\u03cb\5r:\2\u03cb\u03cc\7\6\2\2\u03cc\u03ce"+
		"\3\2\2\2\u03cd\u03c7\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce\u03e7\3\2\2\2\u03cf"+
		"\u03d0\7\u00da\2\2\u03d0\u03d1\7\33\2\2\u03d1\u03e1\5\u00aeX\2\u03d2\u03d3"+
		"\7\u00db\2\2\u03d3\u03d4\7\33\2\2\u03d4\u03d5\7\4\2\2\u03d5\u03da\5\u0090"+
		"I\2\u03d6\u03d7\7\5\2\2\u03d7\u03d9\5\u0090I\2\u03d8\u03d6\3\2\2\2\u03d9"+
		"\u03dc\3\2\2\2\u03da\u03d8\3\2\2\2\u03da\u03db\3\2\2\2\u03db\u03dd\3\2"+
		"\2\2\u03dc\u03da\3\2\2\2\u03dd\u03df\7\6\2\2\u03de\u03e0\t\n\2\2\u03df"+
		"\u03de\3\2\2\2\u03df\u03e0\3\2\2\2\u03e0\u03e2\3\2\2\2\u03e1\u03d2\3\2"+
		"\2\2\u03e1\u03e2\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3\u03e4\7\\\2\2\u03e4"+
		"\u03e5\7\u01af\2\2\u03e5\u03e6\7\u00dc\2\2\u03e6\u03e8\3\2\2\2\u03e7\u03cf"+
		"\3\2\2\2\u03e7\u03e8\3\2\2\2\u03e8\u03f3\3\2\2\2\u03e9\u03ea\7\u00dd\2"+
		"\2\u03ea\u03eb\7\33\2\2\u03eb\u03ec\5\u00aeX\2\u03ec\u03ed\7{\2\2\u03ed"+
		"\u03f1\5\u00c4c\2\u03ee\u03ef\7\u00de\2\2\u03ef\u03f0\7\26\2\2\u03f0\u03f2"+
		"\5\u00ceh\2\u03f1\u03ee\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u03f4\3\2\2"+
		"\2\u03f3\u03e9\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4\u0407\3\2\2\2\u03f5\u03f6"+
		"\7\u009a\2\2\u03f6\u03f7\7H\2\2\u03f7\u03f9\5.\30\2\u03f8\u03f5\3\2\2"+
		"\2\u03f8\u03f9\3\2\2\2\u03f9\u03fd\3\2\2\2\u03fa\u03fb\7\u00de\2\2\u03fb"+
		"\u03fc\7\26\2\2\u03fc\u03fe\5,\27\2\u03fd\u03fa\3\2\2\2\u03fd\u03fe\3"+
		"\2\2\2\u03fe\u0408\3\2\2\2\u03ff\u0400\7\u00de\2\2\u0400\u0401\7\33\2"+
		"\2\u0401\u0405\5\60\31\2\u0402\u0403\7\u00c5\2\2\u0403\u0404\7\u00f3\2"+
		"\2\u0404\u0406\5\64\33\2\u0405\u0402\3\2\2\2\u0405\u0406\3\2\2\2\u0406"+
		"\u0408\3\2\2\2\u0407\u03f8\3\2\2\2\u0407\u03ff\3\2\2\2\u0407\u0408\3\2"+
		"\2\2\u0408\u040b\3\2\2\2\u0409\u040a\7\u00f4\2\2\u040a\u040c\5\60\31\2"+
		"\u040b\u0409\3\2\2\2\u040b\u040c\3\2\2\2\u040c\u040f\3\2\2\2\u040d\u040e"+
		"\7\u00f5\2\2\u040e\u0410\5\64\33\2\u040f\u040d\3\2\2\2\u040f\u0410\3\2"+
		"\2\2\u0410\u0413\3\2\2\2\u0411\u0412\7\26\2\2\u0412\u0414\5H%\2\u0413"+
		"\u0411\3\2\2\2\u0413\u0414\3\2\2\2\u0414\u060f\3\2\2\2\u0415\u0417\7\'"+
		"\2\2\u0416\u0418\7\u00d2\2\2\u0417\u0416\3\2\2\2\u0417\u0418\3\2\2\2\u0418"+
		"\u041a\3\2\2\2\u0419\u041b\7\u00d0\2\2\u041a\u0419\3\2\2\2\u041a\u041b"+
		"\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u0420\7\u00aa\2\2\u041d\u041e\7S\2"+
		"\2\u041e\u041f\7w\2\2\u041f\u0421\7@\2\2\u0420\u041d\3\2\2\2\u0420\u0421"+
		"\3\2\2\2\u0421\u0422\3\2\2\2\u0422\u0423\5\u00fc\177\2\u0423\u0424\7f"+
		"\2\2\u0424\u0427\5\u00fc\177\2\u0425\u0426\7\u00f4\2\2\u0426\u0428\5\60"+
		"\31\2\u0427\u0425\3\2\2\2\u0427\u0428\3\2\2\2\u0428\u060f\3\2\2\2\u0429"+
		"\u042a\7\21\2\2\u042a\u042b\7\u00aa\2\2\u042b\u042c\5\u00fc\177\2\u042c"+
		"\u042d\7\u00a2\2\2\u042d\u042e\7\u00f5\2\2\u042e\u042f\5\64\33\2\u042f"+
		"\u060f\3\2\2\2\u0430\u0431\7\21\2\2\u0431\u0432\7\u00aa\2\2\u0432\u0435"+
		"\5\u00fc\177\2\u0433\u0434\7\u0085\2\2\u0434\u0436\5\u00b8]\2\u0435\u0433"+
		"\3\2\2\2\u0435\u0436\3\2\2\2\u0436\u0442\3\2\2\2\u0437\u0438\7\u00a2\2"+
		"\2\u0438\u0439\7\u00f3\2\2\u0439\u0443\5\64\33\2\u043a\u043b\7\u00a2\2"+
		"\2\u043b\u043c\7\u00f2\2\2\u043c\u0440\5\60\31\2\u043d\u043e\7\u00c5\2"+
		"\2\u043e\u043f\7\u00f3\2\2\u043f\u0441\5\64\33\2\u0440\u043d\3\2\2\2\u0440"+
		"\u0441\3\2\2\2\u0441\u0443\3\2\2\2\u0442\u0437\3\2\2\2\u0442\u043a\3\2"+
		"\2\2\u0443\u060f\3\2\2\2\u0444\u0445\7\21\2\2\u0445\u0446\7\u00aa\2\2"+
		"\u0446\u0463\5\u00fc\177\2\u0447\u0448\7\u00da\2\2\u0448\u0449\7\33\2"+
		"\2\u0449\u0459\5\u00aeX\2\u044a\u044b\7\u00db\2\2\u044b\u044c\7\33\2\2"+
		"\u044c\u044d\7\4\2\2\u044d\u0452\5\u0090I\2\u044e\u044f\7\5\2\2\u044f"+
		"\u0451\5\u0090I\2\u0450\u044e\3\2\2\2\u0451\u0454\3\2\2\2\u0452\u0450"+
		"\3\2\2\2\u0452\u0453\3\2\2\2\u0453\u0455\3\2\2\2\u0454\u0452\3\2\2\2\u0455"+
		"\u0457\7\6\2\2\u0456\u0458\t\n\2\2\u0457\u0456\3\2\2\2\u0457\u0458\3\2"+
		"\2\2\u0458\u045a\3\2\2\2\u0459\u044a\3\2\2\2\u0459\u045a\3\2\2\2\u045a"+
		"\u045b\3\2\2\2\u045b\u045c\7\\\2\2\u045c\u045d\7\u01af\2\2\u045d\u045e"+
		"\7\u00dc\2\2\u045e\u0464\3\2\2\2\u045f\u0460\7w\2\2\u0460\u0461\7\u00de"+
		"\2\2\u0461\u0462\7\26\2\2\u0462\u0464\5\u00ceh\2\u0463\u0447\3\2\2\2\u0463"+
		"\u045f\3\2\2\2\u0464\u060f\3\2\2\2\u0465\u0466\7\21\2\2\u0466\u0467\7"+
		"\u00aa\2\2\u0467\u0478\5\u00fc\177\2\u0468\u0469\7\u00dd\2\2\u0469\u046a"+
		"\7\33\2\2\u046a\u046b\5\u00aeX\2\u046b\u046c\7{\2\2\u046c\u0470\5\u00ae"+
		"X\2\u046d\u046e\7\u00de\2\2\u046e\u046f\7\26\2\2\u046f\u0471\5\u00ceh"+
		"\2\u0470\u046d\3\2\2\2\u0470\u0471\3\2\2\2\u0471\u0479\3\2\2\2\u0472\u0473"+
		"\7w\2\2\u0473\u0479\7\u00dd\2\2\u0474\u0475\7\u00a2\2\2\u0475\u0476\7"+
		"\u00dd\2\2\u0476\u0477\7\u00f4\2\2\u0477\u0479\5\66\34\2\u0478\u0468\3"+
		"\2\2\2\u0478\u0472\3\2\2\2\u0478\u0474\3\2\2\2\u0479\u060f\3\2\2\2\u047a"+
		"\u047b\7\21\2\2\u047b\u047c\7\u00aa\2\2\u047c\u0496\5\u00fc\177\2\u047d"+
		"\u047e\7\17\2\2\u047e\u047f\7&\2\2\u047f\u0480\5\u00fe\u0080\2\u0480\u0481"+
		"\7\u00d3\2\2\u0481\u0482\7\u00d4\2\2\u0482\u0483\5\u00aeX\2\u0483\u0484"+
		"\7\u00d5\2\2\u0484\u0485\7\u00d6\2\2\u0485\u0497\3\2\2\2\u0486\u0487\7"+
		"\17\2\2\u0487\u0488\7&\2\2\u0488\u0489\5\u00fe\u0080\2\u0489\u048a\7\u00d7"+
		"\2\2\u048a\u048b\7\u00d4\2\2\u048b\u048c\5\u00aeX\2\u048c\u048d\7\u00d8"+
		"\2\2\u048d\u048e\5\u00fc\177\2\u048e\u048f\5\u00aeX\2\u048f\u0490\7\u00d5"+
		"\2\2\u0490\u0491\7\u00d6\2\2\u0491\u0492\7\u00f6\2\2\u0492\u0497\3\2\2"+
		"\2\u0493\u0494\79\2\2\u0494\u0495\7&\2\2\u0495\u0497\5\u00fe\u0080\2\u0496"+
		"\u047d\3\2\2\2\u0496\u0486\3\2\2\2\u0496\u0493\3\2\2\2\u0497\u060f\3\2"+
		"\2\2\u0498\u0499\7\21\2\2\u0499\u049a\7\u00aa\2\2\u049a\u051b\5\u00fc"+
		"\177\2\u049b\u049f\7\17\2\2\u049c\u049d\7S\2\2\u049d\u049e\7w\2\2\u049e"+
		"\u04a0\7@\2\2\u049f\u049c\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0\u04a1\3\2"+
		"\2\2\u04a1\u04a2\7\u0085\2\2\u04a2\u04a5\5\u00b8]\2\u04a3\u04a4\7\u00f4"+
		"\2\2\u04a4\u04a6\5\60\31\2\u04a5\u04a3\3\2\2\2\u04a5\u04a6\3\2\2\2\u04a6"+
		"\u04b2\3\2\2\2\u04a7\u04a9\7\5\2\2\u04a8\u04a7\3\2\2\2\u04a8\u04a9\3\2"+
		"\2\2\u04a9\u04aa\3\2\2\2\u04aa\u04ab\7\u0085\2\2\u04ab\u04ae\5\u00b8]"+
		"\2\u04ac\u04ad\7\u00f4\2\2\u04ad\u04af\5\60\31\2\u04ae\u04ac\3\2\2\2\u04ae"+
		"\u04af\3\2\2\2\u04af\u04b1\3\2\2\2\u04b0\u04a8\3\2\2\2\u04b1\u04b4\3\2"+
		"\2\2\u04b2\u04b0\3\2\2\2\u04b2\u04b3\3\2\2\2\u04b3\u051c\3\2\2\2\u04b4"+
		"\u04b2\3\2\2\2\u04b5\u04b6\7\u0085\2\2\u04b6\u04b7\5\u00b8]\2\u04b7\u04b8"+
		"\7\u0091\2\2\u04b8\u04b9\7\u00b1\2\2\u04b9\u04ba\7\u0085\2\2\u04ba\u04bb"+
		"\5\u00b8]\2\u04bb\u051c\3\2\2\2\u04bc\u04bd\7\u00f7\2\2\u04bd\u04be\7"+
		"\u0085\2\2\u04be\u04bf\5\u00b8]\2\u04bf\u04c0\7\u00c5\2\2\u04c0\u04c1"+
		"\7\u00aa\2\2\u04c1\u04c2\5\u00fc\177\2\u04c2\u051c\3\2\2\2\u04c3\u04c4"+
		"\7\21\2\2\u04c4\u04c5\7\u00aa\2\2\u04c5\u04c6\5\u00b8]\2\u04c6\u04c7\7"+
		"\u00f8\2\2\u04c7\u04c8\7\u0086\2\2\u04c8\u051c\3\2\2\2\u04c9\u04cc\79"+
		"\2\2\u04ca\u04cb\7S\2\2\u04cb\u04cd\7@\2\2\u04cc\u04ca\3\2\2\2\u04cc\u04cd"+
		"\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce\u04cf\7\u0085\2\2\u04cf\u04d7\5\u00b8"+
		"]\2\u04d0\u04d2\7\5\2\2\u04d1\u04d0\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2"+
		"\u04d3\3\2\2\2\u04d3\u04d4\7\u0085\2\2\u04d4\u04d6\5\u00b8]\2\u04d5\u04d1"+
		"\3\2\2\2\u04d6\u04d9\3\2\2\2\u04d7\u04d5\3\2\2\2\u04d7\u04d8\3\2\2\2\u04d8"+
		"\u04dc\3\2\2\2\u04d9\u04d7\3\2\2\2\u04da\u04db\7\u00fb\2\2\u04db\u04dd"+
		"\7\u00fc\2\2\u04dc\u04da\3\2\2\2\u04dc\u04dd\3\2\2\2\u04dd\u04df\3\2\2"+
		"\2\u04de\u04e0\7\u00d1\2\2\u04df\u04de\3\2\2\2\u04df\u04e0\3\2\2\2\u04e0"+
		"\u051c\3\2\2\2\u04e1\u04e2\7\u0085\2\2\u04e2\u04e4\5\u00b8]\2\u04e3\u04e1"+
		"\3\2\2\2\u04e3\u04e4\3\2\2\2\u04e4\u04e5\3\2\2\2\u04e5\u04e6\7\u00a2\2"+
		"\2\u04e6\u04e7\7\u0113\2\2\u04e7\u051c\5,\27\2\u04e8\u04e9\7\u0085\2\2"+
		"\u04e9\u04eb\5\u00b8]\2\u04ea\u04e8\3\2\2\2\u04ea\u04eb\3\2\2\2\u04eb"+
		"\u04ec\3\2\2\2\u04ec\u04ed\7\u00a2\2\2\u04ed\u04ee\7\u00f4\2\2\u04ee\u051c"+
		"\5\60\31\2\u04ef\u04f2\7\u00fd\2\2\u04f0\u04f1\7\u0085\2\2\u04f1\u04f3"+
		"\5\u00b8]\2\u04f2\u04f0\3\2\2\2\u04f2\u04f3\3\2\2\2\u04f3\u051c\3\2\2"+
		"\2\u04f4\u04f5\7\u0085\2\2\u04f5\u04f7\5\u00b8]\2\u04f6\u04f4\3\2\2\2"+
		"\u04f6\u04f7\3\2\2\2\u04f7\u04f8\3\2\2\2\u04f8\u04fe\t\13\2\2\u04f9\u04fb"+
		"\7\u00ff\2\2\u04fa\u04fc\7\35\2\2\u04fb\u04fa\3\2\2\2\u04fb\u04fc\3\2"+
		"\2\2\u04fc\u04ff\3\2\2\2\u04fd\u04ff\7\u0100\2\2\u04fe\u04f9\3\2\2\2\u04fe"+
		"\u04fd\3\2\2\2\u04ff\u051c\3\2\2\2\u0500\u0501\7\u0085\2\2\u0501\u0503"+
		"\5\u00b8]\2\u0502\u0500\3\2\2\2\u0502\u0503\3\2\2\2\u0503\u0504\3\2\2"+
		"\2\u0504\u0505\7\u0101\2\2\u0505\u0508\5\60\31\2\u0506\u0507\7\23\2\2"+
		"\u0507\u0509\7\u0102\2\2\u0508\u0506\3\2\2\2\u0508\u0509\3\2\2\2\u0509"+
		"\u050e\3\2\2\2\u050a\u050b\7\u00c5\2\2\u050b\u050c\7\u0084\2\2\u050c\u050d"+
		"\7\u00f5\2\2\u050d\u050f\5\64\33\2\u050e\u050a\3\2\2\2\u050e\u050f\3\2"+
		"\2\2\u050f\u051c\3\2\2\2\u0510\u0511\7\u0085\2\2\u0511\u0513\5\u00b8]"+
		"\2\u0512\u0510\3\2\2\2\u0512\u0513\3\2\2\2\u0513\u0514\3\2\2\2\u0514\u051c"+
		"\7\u0103\2\2\u0515\u0516\7\u0085\2\2\u0516\u0518\5\u00b8]\2\u0517\u0515"+
		"\3\2\2\2\u0517\u0518\3\2\2\2\u0518\u0519\3\2\2\2\u0519\u051a\7\u00b7\2"+
		"\2\u051a\u051c\7\"\2\2\u051b\u049b\3\2\2\2\u051b\u04b5\3\2\2\2\u051b\u04bc"+
		"\3\2\2\2\u051b\u04c3\3\2\2\2\u051b\u04c9\3\2\2\2\u051b\u04e3\3\2\2\2\u051b"+
		"\u04ea\3\2\2\2\u051b\u04ef\3\2\2\2\u051b\u04f6\3\2\2\2\u051b\u0502\3\2"+
		"\2\2\u051b\u0512\3\2\2\2\u051b\u0517\3\2\2\2\u051c\u060f\3\2\2\2\u051d"+
		"\u051e\7\21\2\2\u051e\u051f\7\u00aa\2\2\u051f\u0520\5\u00fc\177\2\u0520"+
		"\u0521\t\f\2\2\u0521\u0522\7\u0085\2\2\u0522\u0523\5\u00b8]\2\u0523\u060f"+
		"\3\2\2\2\u0524\u0525\7\21\2\2\u0525\u0526\7\u00aa\2\2\u0526\u0529\5\u00fc"+
		"\177\2\u0527\u0528\7\u0085\2\2\u0528\u052a\5\u00b8]\2\u0529\u0527\3\2"+
		"\2\2\u0529\u052a\3\2\2\2\u052a\u054b\3\2\2\2\u052b\u052d\7\u0104\2\2\u052c"+
		"\u052e\7!\2\2\u052d\u052c\3\2\2\2\u052d\u052e\3\2\2\2\u052e\u052f\3\2"+
		"\2\2\u052f\u0530\5\u00fe\u0080\2\u0530\u0531\5\u00fe\u0080\2\u0531\u0534"+
		"\5\u00dep\2\u0532\u0533\7#\2\2\u0533\u0535\5\u00ceh\2\u0534\u0532\3\2"+
		"\2\2\u0534\u0535\3\2\2\2\u0535\u0539\3\2\2\2\u0536\u053a\7E\2\2\u0537"+
		"\u0538\7\u0105\2\2\u0538\u053a\5\u00fe\u0080\2\u0539\u0536\3\2\2\2\u0539"+
		"\u0537\3\2\2\2\u0539\u053a\3\2\2\2\u053a\u053c\3\2\2\2\u053b\u053d\t\b"+
		"\2\2\u053c\u053b\3\2\2\2\u053c\u053d\3\2\2\2\u053d\u054c\3\2\2\2\u053e"+
		"\u053f\t\r\2\2\u053f\u0540\7\"\2\2\u0540\u0541\7\4\2\2\u0541\u0542\5\u00fe"+
		"\u0080\2\u0542\u0545\5\u00dep\2\u0543\u0544\7#\2\2\u0544\u0546\5\u00ce"+
		"h\2\u0545\u0543\3\2\2\2\u0545\u0546\3\2\2\2\u0546\u0547\3\2\2\2\u0547"+
		"\u0549\7\6\2\2\u0548\u054a\t\b\2\2\u0549\u0548\3\2\2\2\u0549\u054a\3\2"+
		"\2\2\u054a\u054c\3\2\2\2\u054b\u052b\3\2\2\2\u054b\u053e\3\2\2\2\u054c"+
		"\u060f\3\2\2\2\u054d\u054e\7\'\2\2\u054e\u0552\7\u00c2\2\2\u054f\u0550"+
		"\7S\2\2\u0550\u0551\7w\2\2\u0551\u0553\7@\2\2\u0552\u054f\3\2\2\2\u0552"+
		"\u0553\3\2\2\2\u0553\u0554\3\2\2\2\u0554\u0560\5\u00fc\177\2\u0555\u0556"+
		"\7\4\2\2\u0556\u055b\58\35\2\u0557\u0558\7\5\2\2\u0558\u055a\58\35\2\u0559"+
		"\u0557\3\2\2\2\u055a\u055d\3\2\2\2\u055b\u0559\3\2\2\2\u055b\u055c\3\2"+
		"\2\2\u055c\u055e\3\2\2\2\u055d\u055b\3\2\2\2\u055e\u055f\7\6\2\2\u055f"+
		"\u0561\3\2\2\2\u0560\u0555\3\2\2\2\u0560\u0561\3\2\2\2\u0561\u0564\3\2"+
		"\2\2\u0562\u0563\7#\2\2\u0563\u0565\5\u00ceh\2\u0564\u0562\3\2\2\2\u0564"+
		"\u0565\3\2\2\2\u0565\u0568\3\2\2\2\u0566\u0567\7\u00f5\2\2\u0567\u0569"+
		"\5\66\34\2\u0568\u0566\3\2\2\2\u0568\u0569\3\2\2\2\u0569\u056a\3\2\2\2"+
		"\u056a\u056b\7\26\2\2\u056b\u056c\5H%\2\u056c\u060f\3\2\2\2\u056d\u056e"+
		"\79\2\2\u056e\u0571\7\u00c2\2\2\u056f\u0570\7S\2\2\u0570\u0572\7@\2\2"+
		"\u0571\u056f\3\2\2\2\u0571\u0572\3\2\2\2\u0572\u0573\3\2\2\2\u0573\u060f"+
		"\5\u00fc\177\2\u0574\u0575\7\21\2\2\u0575\u0576\7\u00c2\2\2\u0576\u0577"+
		"\5\u00fc\177\2\u0577\u0578\7\u00a2\2\2\u0578\u0579\7\u00f5\2\2\u0579\u057a"+
		"\5\66\34\2\u057a\u060f\3\2\2\2\u057b\u057c\7\21\2\2\u057c\u057d\7\u00c2"+
		"\2\2\u057d\u057e\5\u00fc\177\2\u057e\u057f\7\26\2\2\u057f\u0580\5H%\2"+
		"\u0580\u060f\3\2\2\2\u0581\u0582\7\'\2\2\u0582\u0583\7\u0108\2\2\u0583"+
		"\u0584\5\u00fc\177\2\u0584\u0585\7{\2\2\u0585\u0586\7\u00aa\2\2\u0586"+
		"\u0588\5\u00fc\177\2\u0587\u0589\5\u00aeX\2\u0588\u0587\3\2\2\2\u0588"+
		"\u0589\3\2\2\2\u0589\u058a\3\2\2\2\u058a\u058b\7\u00f5\2\2\u058b\u058c"+
		"\7\26\2\2\u058c\u0590\5\60\31\2\u058d\u058e\7\u00c5\2\2\u058e\u058f\7"+
		"\u0106\2\2\u058f\u0591\7\u0107\2\2\u0590\u058d\3\2\2\2\u0590\u0591\3\2"+
		"\2\2\u0591\u0594\3\2\2\2\u0592\u0593\7\u0109\2\2\u0593\u0595\5\66\34\2"+
		"\u0594\u0592\3\2\2\2\u0594\u0595\3\2\2\2\u0595\u0599\3\2\2\2\u0596\u0597"+
		"\7T\2\2\u0597\u0598\7\u00aa\2\2\u0598\u059a\5\u00fc\177\2\u0599\u0596"+
		"\3\2\2\2\u0599\u059a\3\2\2\2\u059a\u059d\3\2\2\2\u059b\u059c\7\u0085\2"+
		"\2\u059c\u059e\5\u00b8]\2\u059d\u059b\3\2\2\2\u059d\u059e\3\2\2\2\u059e"+
		"\u05b1\3\2\2\2\u059f\u05a0\7\u009a\2\2\u05a0\u05a1\7H\2\2\u05a1\u05a3"+
		"\5.\30\2\u05a2\u059f\3\2\2\2\u05a2\u05a3\3\2\2\2\u05a3\u05a7\3\2\2\2\u05a4"+
		"\u05a5\7\u00de\2\2\u05a5\u05a6\7\26\2\2\u05a6\u05a8\5,\27\2\u05a7\u05a4"+
		"\3\2\2\2\u05a7\u05a8\3\2\2\2\u05a8\u05b2\3\2\2\2\u05a9\u05aa\7\u00de\2"+
		"\2\u05aa\u05ab\7\33\2\2\u05ab\u05af\5\60\31\2\u05ac\u05ad\7\u00c5\2\2"+
		"\u05ad\u05ae\7\u00f3\2\2\u05ae\u05b0\5\64\33\2\u05af\u05ac\3\2\2\2\u05af"+
		"\u05b0\3\2\2\2\u05b0\u05b2\3\2\2\2\u05b1\u05a2\3\2\2\2\u05b1\u05a9\3\2"+
		"\2\2\u05b1\u05b2\3\2\2\2\u05b2\u05b5\3\2\2\2\u05b3\u05b4\7\u00f4\2\2\u05b4"+
		"\u05b6\5\60\31\2\u05b5\u05b3\3\2\2\2\u05b5\u05b6\3\2\2\2\u05b6\u05b9\3"+
		"\2\2\2\u05b7\u05b8\7\u00f5\2\2\u05b8\u05ba\5\64\33\2\u05b9\u05b7\3\2\2"+
		"\2\u05b9\u05ba\3\2\2\2\u05ba\u05bd\3\2\2\2\u05bb\u05bc\7#\2\2\u05bc\u05be"+
		"\5\u00ceh\2\u05bd\u05bb\3\2\2\2\u05bd\u05be\3\2\2\2\u05be\u060f\3\2\2"+
		"\2\u05bf\u05c0\79\2\2\u05c0\u05c3\7\u0108\2\2\u05c1\u05c2\7S\2\2\u05c2"+
		"\u05c4\7@\2\2\u05c3\u05c1\3\2\2\2\u05c3\u05c4\3\2\2\2\u05c4\u05c5\3\2"+
		"\2\2\u05c5\u05c6\5\u00fc\177\2\u05c6\u05c7\7{\2\2\u05c7\u05c8\5\u00fc"+
		"\177\2\u05c8\u060f\3\2\2\2\u05c9\u05ca\7\21\2\2\u05ca\u05cb\7\u0108\2"+
		"\2\u05cb\u05cc\5\u00fc\177\2\u05cc\u05cd\7{\2\2\u05cd\u05d0\5\u00fc\177"+
		"\2\u05ce\u05cf\7\u0085\2\2\u05cf\u05d1\5\u00b8]\2\u05d0\u05ce\3\2\2\2"+
		"\u05d0\u05d1\3\2\2\2\u05d1\u05d2\3\2\2\2\u05d2\u05d3\7\u0107\2\2\u05d3"+
		"\u060f\3\2\2\2\u05d4\u05d5\7\'\2\2\u05d5\u05d6\7\u00d2\2\2\u05d6\u05d7"+
		"\7\u010a\2\2\u05d7\u05d8\5\u00fc\177\2\u05d8\u05d9\7\26\2\2\u05d9\u05da"+
		"\5\60\31\2\u05da\u060f\3\2\2\2\u05db\u05dc\7\'\2\2\u05dc\u05dd\7\u010a"+
		"\2\2\u05dd\u05de\5\u00fc\177\2\u05de\u05df\7\26\2\2\u05df\u05ef\5\60\31"+
		"\2\u05e0\u05e1\7\u00be\2\2\u05e1\u05f0\7\u010b\2\2\u05e2\u05f0\7\u010c"+
		"\2\2\u05e3\u05e4\7\u00f9\2\2\u05e4\u05ec\5\60\31\2\u05e5\u05e6\7\5\2\2"+
		"\u05e6\u05eb\7\u010b\2\2\u05e7\u05eb\7\u010c\2\2\u05e8\u05e9\7\u00f9\2"+
		"\2\u05e9\u05eb\5\60\31\2\u05ea\u05e5\3\2\2\2\u05ea\u05e7\3\2\2\2\u05ea"+
		"\u05e8\3\2\2\2\u05eb\u05ee\3\2\2\2\u05ec\u05ea\3\2\2\2\u05ec\u05ed\3\2"+
		"\2\2\u05ed\u05f0\3\2\2\2\u05ee\u05ec\3\2\2\2\u05ef\u05e0\3\2\2\2\u05ef"+
		"\u05e2\3\2\2\2\u05ef\u05e3\3\2\2\2\u05ef\u05f0\3\2\2\2\u05f0\u060f\3\2"+
		"\2\2\u05f1\u05f3\79\2\2\u05f2\u05f4\7\u00d2\2\2\u05f3\u05f2\3\2\2\2\u05f3"+
		"\u05f4\3\2\2\2\u05f4\u05f5\3\2\2\2\u05f5\u05f8\7\u010a\2\2\u05f6\u05f7"+
		"\7S\2\2\u05f7\u05f9\7@\2\2\u05f8\u05f6\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9"+
		"\u05fa\3\2\2\2\u05fa\u060f\5\u00fc\177\2\u05fb\u05fc\7\u0110\2\2\u05fc"+
		"\u060f\7\u010a\2\2\u05fd\u05fe\7\u0114\2\2\u05fe\u0600\7\60\2\2\u05ff"+
		"\u0601\7\u0115\2\2\u0600\u05ff\3\2\2\2\u0600\u0601\3\2\2\2\u0601\u0602"+
		"\3\2\2\2\u0602\u0603\7\u0116\2\2\u0603\u0605\5\60\31\2\u0604\u0606\7\u0084"+
		"\2\2\u0605\u0604\3\2\2\2\u0605\u0606\3\2\2\2\u0606\u0607\3\2\2\2\u0607"+
		"\u0608\7\\\2\2\u0608\u0609\7\u00aa\2\2\u0609\u060c\5\u00fc\177\2\u060a"+
		"\u060b\7\u0085\2\2\u060b\u060d\5\u00b8]\2\u060c\u060a\3\2\2\2\u060c\u060d"+
		"\3\2\2\2\u060d\u060f\3\2\2\2\u060e\u0362\3\2\2\2\u060e\u0369\3\2\2\2\u060e"+
		"\u036a\3\2\2\2\u060e\u036f\3\2\2\2\u060e\u0384\3\2\2\2\u060e\u038e\3\2"+
		"\2\2\u060e\u039d\3\2\2\2\u060e\u03a7\3\2\2\2\u060e\u03ae\3\2\2\2\u060e"+
		"\u0415\3\2\2\2\u060e\u0429\3\2\2\2\u060e\u0430\3\2\2\2\u060e\u0444\3\2"+
		"\2\2\u060e\u0465\3\2\2\2\u060e\u047a\3\2\2\2\u060e\u0498\3\2\2\2\u060e"+
		"\u051d\3\2\2\2\u060e\u0524\3\2\2\2\u060e\u054d\3\2\2\2\u060e\u056d\3\2"+
		"\2\2\u060e\u0574\3\2\2\2\u060e\u057b\3\2\2\2\u060e\u0581\3\2\2\2\u060e"+
		"\u05bf\3\2\2\2\u060e\u05c9\3\2\2\2\u060e\u05d4\3\2\2\2\u060e\u05db\3\2"+
		"\2\2\u060e\u05f1\3\2\2\2\u060e\u05fb\3\2\2\2\u060e\u05fd\3\2\2\2\u060f"+
		"\35\3\2\2\2\u0610\u0612\7\u0118\2\2\u0611\u0613\7J\2\2\u0612\u0611\3\2"+
		"\2\2\u0612\u0613\3\2\2\2\u0613\u0615\3\2\2\2\u0614\u0616\7\u012e\2\2\u0615"+
		"\u0614\3\2\2\2\u0615\u0616\3\2\2\2\u0616\u0618\3\2\2\2\u0617\u0619\7\u00c1"+
		"\2\2\u0618\u0617\3\2\2\2\u0618\u0619\3\2\2\2\u0619\u061b\3\2\2\2\u061a"+
		"\u061c\7\22\2\2\u061b\u061a\3\2\2\2\u061b\u061c\3\2\2\2\u061c\u061d\3"+
		"\2\2\2\u061d\u061f\5\u00fc\177\2\u061e\u0620\5\u00aeX\2\u061f\u061e\3"+
		"\2\2\2\u061f\u0620\3\2\2\2\u0620\u0751\3\2\2\2\u0621\u0622\7\u00b6\2\2"+
		"\u0622\u0751\5\u00fc\177\2\u0623\u0625\7\'\2\2\u0624\u0626\7\u0126\2\2"+
		"\u0625\u0624\3\2\2\2\u0625\u0626\3\2\2\2\u0626\u0628\3\2\2\2\u0627\u0629"+
		"\7\u00d2\2\2\u0628\u0627\3\2\2\2\u0628\u0629\3\2\2\2\u0629\u062b\3\2\2"+
		"\2\u062a\u062c\7\u00d0\2\2\u062b\u062a\3\2\2\2\u062b\u062c\3\2\2\2\u062c"+
		"\u062d\3\2\2\2\u062d\u0631\7\u00aa\2\2\u062e\u062f\7S\2\2\u062f\u0630"+
		"\7w\2\2\u0630\u0632\7@\2\2\u0631\u062e\3\2\2\2\u0631\u0632\3\2\2\2\u0632"+
		"\u0633\3\2\2\2\u0633\u063e\5\u00fc\177\2\u0634\u0635\7f\2\2\u0635\u0637"+
		"\5\u00fc\177\2\u0636\u0634\3\2\2\2\u0636\u0637\3\2\2\2\u0637\u063f\3\2"+
		"\2\2\u0638\u0639\7\4\2\2\u0639\u063a\5r:\2\u063a\u063b\7\6\2\2\u063b\u063d"+
		"\3\2\2\2\u063c\u0638\3\2\2\2\u063c\u063d\3\2\2\2\u063d\u063f\3\2\2\2\u063e"+
		"\u0636\3\2\2\2\u063e\u063c\3\2\2\2\u063f\u0659\3\2\2\2\u0640\u0641\7\u00f4"+
		"\2\2\u0641\u0642\7\4\2\2\u0642\u0647\5\u00ceh\2\u0643\u0644\7\5\2\2\u0644"+
		"\u0646\5\u00ceh\2\u0645\u0643\3\2\2\2\u0646\u0649\3\2\2\2\u0647\u0645"+
		"\3\2\2\2\u0647\u0648\3\2\2\2\u0648\u064a\3\2\2\2\u0649\u0647\3\2\2\2\u064a"+
		"\u064b\7\6\2\2\u064b\u064c\7H\2\2\u064c\u064d\5\u00ceh\2\u064d\u0654\7"+
		"\4\2\2\u064e\u0650\5\u00c4c\2\u064f\u0651\5\u00ceh\2\u0650\u064f\3\2\2"+
		"\2\u0650\u0651\3\2\2\2\u0651\u0653\3\2\2\2\u0652\u064e\3\2\2\2\u0653\u0656"+
		"\3\2\2\2\u0654\u0652\3\2\2\2\u0654\u0655\3\2\2\2\u0655\u0657\3\2\2\2\u0656"+
		"\u0654\3\2\2\2\u0657\u0658\7\6\2\2\u0658\u065a\3\2\2\2\u0659\u0640\3\2"+
		"\2\2\u0659\u065a\3\2\2\2\u065a\u065d\3\2\2\2\u065b\u065c\7\u0120\2\2\u065c"+
		"\u065e\5\u00ceh\2\u065d\u065b\3\2\2\2\u065d\u065e\3\2\2\2\u065e\u0663"+
		"\3\2\2\2\u065f\u0660\7\u0121\2\2\u0660\u0661\7\u0122\2\2\u0661\u0662\7"+
		"\\\2\2\u0662\u0664\5\u00fc\177\2\u0663\u065f\3\2\2\2\u0663\u0664\3\2\2"+
		"\2\u0664\u066b\3\2\2\2\u0665\u0666\7\u0123\2\2\u0666\u0667\7\u0124\2\2"+
		"\u0667\u0668\7g\2\2\u0668\u0669\5\u0102\u0082\2\u0669\u066a\7\u0125\2"+
		"\2\u066a\u066c\3\2\2\2\u066b\u0665\3\2\2\2\u066b\u066c\3\2\2\2\u066c\u066f"+
		"\3\2\2\2\u066d\u066e\7\u00cf\2\2\u066e\u0670\5\u00fe\u0080\2\u066f\u066d"+
		"\3\2\2\2\u066f\u0670\3\2\2\2\u0670\u0675\3\2\2\2\u0671\u0672\7{\2\2\u0672"+
		"\u0673\7$\2\2\u0673\u0674\7\64\2\2\u0674\u0676\7\u009b\2\2\u0675\u0671"+
		"\3\2\2\2\u0675\u0676\3\2\2\2\u0676\u0679\3\2\2\2\u0677\u0678\7\u00c5\2"+
		"\2\u0678\u067a\5\u0082B\2\u0679\u0677\3\2\2\2\u0679\u067a\3\2\2\2\u067a"+
		"\u0681\3\2\2\2\u067b\u067c\78\2\2\u067c\u067d\7\33\2\2\u067d\u067e\7\4"+
		"\2\2\u067e\u067f\5\u00fe\u0080\2\u067f\u0680\7\6\2\2\u0680\u0682\3\2\2"+
		"\2\u0681\u067b\3\2\2\2\u0681\u0682\3\2\2\2\u0682\u068a\3\2\2\2\u0683\u0684"+
		"\7\u0085\2\2\u0684\u0685\7\33\2\2\u0685\u0686\t\16\2\2\u0686\u0687\7\4"+
		"\2\2\u0687\u0688\5\u00fe\u0080\2\u0688\u0689\7\6\2\2\u0689\u068b\3\2\2"+
		"\2\u068a\u0683\3\2\2\2\u068a\u068b\3\2\2\2\u068b\u0693\3\2\2\2\u068c\u068d"+
		"\7\u011a\2\2\u068d\u068e\7\33\2\2\u068e\u068f\t\16\2\2\u068f\u0690\7\4"+
		"\2\2\u0690\u0691\5\u00fe\u0080\2\u0691\u0692\7\6\2\2\u0692\u0694\3\2\2"+
		"\2\u0693\u068c\3\2\2\2\u0693\u0694\3\2\2\2\u0694\u0698\3\2\2\2\u0695\u0696"+
		"\7\u011a\2\2\u0696\u0697\7\u011f\2\2\u0697\u0699\5$\23\2\u0698\u0695\3"+
		"\2\2\2\u0698\u0699\3\2\2\2\u0699\u069b\3\2\2\2\u069a\u069c\5 \21\2\u069b"+
		"\u069a\3\2\2\2\u069b\u069c\3\2\2\2\u069c\u069f\3\2\2\2\u069d\u069e\7\26"+
		"\2\2\u069e\u06a0\5H%\2\u069f\u069d\3\2\2\2\u069f\u06a0\3\2\2\2\u06a0\u0751"+
		"\3\2\2\2\u06a1\u06a3\7\'\2\2\u06a2\u06a4\7\u0128\2\2\u06a3\u06a2\3\2\2"+
		"\2\u06a3\u06a4\3\2\2\2\u06a4\u06a5\3\2\2\2\u06a5\u06a7\7\u0108\2\2\u06a6"+
		"\u06a8\7\u0129\2\2\u06a7\u06a6\3\2\2\2\u06a7\u06a8\3\2\2\2\u06a8\u06a9"+
		"\3\2\2\2\u06a9\u06aa\5\u00fc\177\2\u06aa\u06ac\7{\2\2\u06ab\u06ad\7\u00aa"+
		"\2\2\u06ac\u06ab\3\2\2\2\u06ac\u06ad\3\2\2\2\u06ad\u06ae\3\2\2\2\u06ae"+
		"\u06b1\5\u00fc\177\2\u06af\u06b0\7\u00be\2\2\u06b0\u06b2\5\u00fe\u0080"+
		"\2\u06b1\u06af\3\2\2\2\u06b1\u06b2\3\2\2\2\u06b2\u06b3\3\2\2\2\u06b3\u06b4"+
		"\7\4\2\2\u06b4\u06b5\5\u00c4c\2\u06b5\u06b8\7\6\2\2\u06b6\u06b7\7\u00c5"+
		"\2\2\u06b7\u06b9\5\u0082B\2\u06b8\u06b6\3\2\2\2\u06b8\u06b9\3\2\2\2\u06b9"+
		"\u06bc\3\2\2\2\u06ba\u06bb\7\u00cf\2\2\u06bb\u06bd\5\u00fe\u0080\2\u06bc"+
		"\u06ba\3\2\2\2\u06bc\u06bd\3\2\2\2\u06bd\u0751\3\2\2\2\u06be\u06bf\7\u012d"+
		"\2\2\u06bf\u0751\5\u00fc\177\2\u06c0\u06c1\7\21\2\2\u06c1\u06c2\7\u00aa"+
		"\2\2\u06c2\u0715\5\u00fc\177\2\u06c3\u06c4\7\17\2\2\u06c4\u06c5\7\u0085"+
		"\2\2\u06c5\u06c6\5\u00fe\u0080\2\u06c6\u06c7\7\u00a6\2\2\u06c7\u06c8\7"+
		"\4\2\2\u06c8\u06c9\5\u00ccg\2\u06c9\u06ca\7\6\2\2";
	private static final String _serializedATNSegment1 =
		"\u06ca\u06cb\7;\2\2\u06cb\u06cc\7\4\2\2\u06cc\u06cd\5\u00ccg\2\u06cd\u06ce"+
		"\7\6\2\2\u06ce\u0716\3\2\2\2\u06cf\u06d0\7\17\2\2\u06d0\u06d1\7\u00ce"+
		"\2\2\u06d1\u06d2\7\u0085\2\2\u06d2\u0716\5\u00fe\u0080\2\u06d3\u06d4\7"+
		"\u0091\2\2\u06d4\u06d5\7\u0085\2\2\u06d5\u06d6\7G\2\2\u06d6\u06d7\5\u00c4"+
		"c\2\u06d7\u06d8\7\u00b1\2\2\u06d8\u06d9\5\u00fe\u0080\2\u06d9\u0716\3"+
		"\2\2\2\u06da\u06db\7\u012c\2\2\u06db\u06dc\7\u0085\2\2\u06dc\u06dd\7G"+
		"\2\2\u06dd\u06de\5\u00c4c\2\u06de\u06df\7\30\2\2\u06df\u06e0\5\u00c4c"+
		"\2\u06e0\u06e1\7\\\2\2\u06e1\u06e2\7\4\2\2\u06e2\u06e3\7\u0085\2\2\u06e3"+
		"\u06e9\5\u00fe\u0080\2\u06e4\u06e5\7\5\2\2\u06e5\u06e6\7\u0085\2\2\u06e6"+
		"\u06e8\5\u00fe\u0080\2\u06e7\u06e4\3\2\2\2\u06e8\u06eb\3\2\2\2\u06e9\u06e7"+
		"\3\2\2\2\u06e9\u06ea\3\2\2\2\u06ea\u06ec\3\2\2\2\u06eb\u06e9\3\2\2\2\u06ec"+
		"\u06ed\7\6\2\2\u06ed\u0716\3\2\2\2\u06ee\u06ef\7\u012c\2\2\u06ef\u06f0"+
		"\7\u00ce\2\2\u06f0\u06f1\7\u0085\2\2\u06f1\u06f2\7\u00a6\2\2\u06f2\u06f3"+
		"\7\4\2\2\u06f3\u06f4\5\u00ccg\2\u06f4\u06f5\7\6\2\2\u06f5\u06f6\7;\2\2"+
		"\u06f6\u06f7\7\4\2\2\u06f7\u06f8\5\u00ccg\2\u06f8\u06f9\7\6\2\2\u06f9"+
		"\u06fa\7\\\2\2\u06fa\u06fb\7\4\2\2\u06fb\u06fc\7\u0085\2\2\u06fc\u06fd"+
		"\5\u00fe\u0080\2\u06fd\u06fe\7\5\2\2\u06fe\u06ff\7\u00ce\2\2\u06ff\u0700"+
		"\7\u0085\2\2\u0700\u0701\7\6\2\2\u0701\u0716\3\2\2\2\u0702\u0703\79\2"+
		"\2\u0703\u0704\7\u0085\2\2\u0704\u0705\7G\2\2\u0705\u0716\5\u00c4c\2\u0706"+
		"\u0707\79\2\2\u0707\u0708\7\u00ce\2\2\u0708\u0716\7\u0085\2\2\u0709\u070a"+
		"\7\u00b6\2\2\u070a\u070b\7\u0085\2\2\u070b\u070c\7G\2\2\u070c\u0716\5"+
		"\u00c4c\2\u070d\u070e\7\u00f7\2\2\u070e\u070f\7\u0085\2\2\u070f\u0710"+
		"\7G\2\2\u0710\u0711\5\u00c4c\2\u0711\u0712\7\u00c5\2\2\u0712\u0713\7\u00aa"+
		"\2\2\u0713\u0714\5\u00fc\177\2\u0714\u0716\3\2\2\2\u0715\u06c3\3\2\2\2"+
		"\u0715\u06cf\3\2\2\2\u0715\u06d3\3\2\2\2\u0715\u06da\3\2\2\2\u0715\u06ee"+
		"\3\2\2\2\u0715\u0702\3\2\2\2\u0715\u0706\3\2\2\2\u0715\u0709\3\2\2\2\u0715"+
		"\u070d\3\2\2\2\u0716\u0751\3\2\2\2\u0717\u0718\7\21\2\2\u0718\u0719\7"+
		"\u00aa\2\2\u0719\u0736\5\u00fc\177\2\u071a\u071b\7\17\2\2\u071b\u071c"+
		"\7!\2\2\u071c\u0737\5v<\2\u071d\u071e\7\21\2\2\u071e\u071f\7!\2\2\u071f"+
		"\u0720\5\u00fe\u0080\2\u0720\u0721\7\u00b5\2\2\u0721\u0722\5\u00dep\2"+
		"\u0722\u0737\3\2\2\2\u0723\u0724\7\21\2\2\u0724\u0725\7!\2\2\u0725\u0726"+
		"\5\u00fe\u0080\2\u0726\u0727\7\u00a2\2\2\u0727\u072b\7\u00ce\2\2\u0728"+
		"\u072c\5\u00ceh\2\u0729\u072c\5\u00fe\u0080\2\u072a\u072c\5\u0102\u0082"+
		"\2\u072b\u0728\3\2\2\2\u072b\u0729\3\2\2\2\u072b\u072a\3\2\2\2\u072c\u0737"+
		"\3\2\2\2\u072d\u072e\7\u0091\2\2\u072e\u072f\7!\2\2\u072f\u0730\5\u00fe"+
		"\u0080\2\u0730\u0731\7\u00b1\2\2\u0731\u0732\5\u00fe\u0080\2\u0732\u0737"+
		"\3\2\2\2\u0733\u0734\79\2\2\u0734\u0735\7!\2\2\u0735\u0737\5\u00fe\u0080"+
		"\2\u0736\u071a\3\2\2\2\u0736\u071d\3\2\2\2\u0736\u0723\3\2\2\2\u0736\u072d"+
		"\3\2\2\2\u0736\u0733\3\2\2\2\u0737\u0751\3\2\2\2\u0738\u0739\7\21\2\2"+
		"\u0739\u073a\7\u00aa\2\2\u073a\u074e\5\u00fc\177\2\u073b\u073c\7\17\2"+
		"\2\u073c\u073d\7&\2\2\u073d\u073e\5\u00fe\u0080\2\u073e\u073f\7\u0127"+
		"\2\2\u073f\u0740\5\u00bc_\2\u0740\u074f\3\2\2\2\u0741\u0742\79\2\2\u0742"+
		"\u0743\7&\2\2\u0743\u074f\5\u00fe\u0080\2\u0744\u0745\7\17\2\2\u0745\u0746"+
		"\7&\2\2\u0746\u0747\5\u00fe\u0080\2\u0747\u0748\7\u00d7\2\2\u0748\u0749"+
		"\7\u00d4\2\2\u0749\u074a\5\u00aeX\2\u074a\u074b\7\u00d8\2\2\u074b\u074c"+
		"\5\u00fc\177\2\u074c\u074d\5\u00aeX\2\u074d\u074f\3\2\2\2\u074e\u073b"+
		"\3\2\2\2\u074e\u0741\3\2\2\2\u074e\u0744\3\2\2\2\u074f\u0751\3\2\2\2\u0750"+
		"\u0610\3\2\2\2\u0750\u0621\3\2\2\2\u0750\u0623\3\2\2\2\u0750\u06a1\3\2"+
		"\2\2\u0750\u06be\3\2\2\2\u0750\u06c0\3\2\2\2\u0750\u0717\3\2\2\2\u0750"+
		"\u0738\3\2\2\2\u0751\37\3\2\2\2\u0752\u0753\7\4\2\2\u0753\u0758\5\"\22"+
		"\2\u0754\u0755\7\5\2\2\u0755\u0757\5\"\22\2\u0756\u0754\3\2\2\2\u0757"+
		"\u075a\3\2\2\2\u0758\u0756\3\2\2\2\u0758\u0759\3\2\2\2\u0759\u075b\3\2"+
		"\2\2\u075a\u0758\3\2\2\2\u075b\u075c\7\6\2\2\u075c!\3\2\2\2\u075d\u075e"+
		"\7\u00a6\2\2\u075e\u075f\7\4\2\2\u075f\u0760\5\u00ccg\2\u0760\u0761\7"+
		"\6\2\2\u0761\u0762\7;\2\2\u0762\u0763\7\4\2\2\u0763\u0764\5\u00ccg\2\u0764"+
		"\u0765\7\6\2\2\u0765\u0766\7\u011c\2\2\u0766\u0767\7\4\2\2\u0767\u0768"+
		"\5\u00ccg\2\u0768\u0769\7\6\2\2\u0769\u0785\3\2\2\2\u076a\u076b\7\u0085"+
		"\2\2\u076b\u076c\5\u00fe\u0080\2\u076c\u076d\7\u00c0\2\2\u076d\u076e\5"+
		"\u00c4c\2\u076e\u0785\3\2\2\2\u076f\u0770\7\u0085\2\2\u0770\u0771\5\u00fe"+
		"\u0080\2\u0771\u0772\7\u00a6\2\2\u0772\u0773\7\4\2\2\u0773\u0774\5\u00cc"+
		"g\2\u0774\u0776\7\6\2\2\u0775\u0777\t\17\2\2\u0776\u0775\3\2\2\2\u0776"+
		"\u0777\3\2\2\2\u0777\u077f\3\2\2\2\u0778\u0779\7;\2\2\u0779\u077a\7\4"+
		"\2\2\u077a\u077b\5\u00ccg\2\u077b\u077d\7\6\2\2\u077c\u077e\t\17\2\2\u077d"+
		"\u077c\3\2\2\2\u077d\u077e\3\2\2\2\u077e\u0780\3\2\2\2\u077f\u0778\3\2"+
		"\2\2\u077f\u0780\3\2\2\2\u0780\u0785\3\2\2\2\u0781\u0782\7\u00ce\2\2\u0782"+
		"\u0783\7\u0085\2\2\u0783\u0785\5\u00fe\u0080\2\u0784\u075d\3\2\2\2\u0784"+
		"\u076a\3\2\2\2\u0784\u076f\3\2\2\2\u0784\u0781\3\2\2\2\u0785#\3\2\2\2"+
		"\u0786\u0787\7\4\2\2\u0787\u078c\5&\24\2\u0788\u0789\7\5\2\2\u0789\u078b"+
		"\5&\24\2\u078a\u0788\3\2\2\2\u078b\u078e\3\2\2\2\u078c\u078a\3\2\2\2\u078c"+
		"\u078d\3\2\2\2\u078d\u078f\3\2\2\2\u078e\u078c\3\2\2\2\u078f\u0790\7\6"+
		"\2\2\u0790%\3\2\2\2\u0791\u0792\7\u00a6\2\2\u0792\u0793\7\4\2\2\u0793"+
		"\u0794\5\u00ccg\2\u0794\u0795\7\6\2\2\u0795\u0796\7;\2\2\u0796\u0797\7"+
		"\4\2\2\u0797\u0798\5\u00ccg\2\u0798\u0799\7\6\2\2\u0799\u079a\7\u011c"+
		"\2\2\u079a\u079b\7\4\2\2\u079b\u079c\5\u00ccg\2\u079c\u079d\7\6\2\2\u079d"+
		"\u07b9\3\2\2\2\u079e\u079f\7\u011a\2\2\u079f\u07a0\5\u00fe\u0080\2\u07a0"+
		"\u07a1\7\u00c0\2\2\u07a1\u07a2\5\u00c4c\2\u07a2\u07b9\3\2\2\2\u07a3\u07a4"+
		"\7\u011a\2\2\u07a4\u07a5\5\u00fe\u0080\2\u07a5\u07a6\7\u00a6\2\2\u07a6"+
		"\u07a7\7\4\2\2\u07a7\u07a8\5\u00ccg\2\u07a8\u07aa\7\6\2\2\u07a9\u07ab"+
		"\t\17\2\2\u07aa\u07a9\3\2\2\2\u07aa\u07ab\3\2\2\2\u07ab\u07b3\3\2\2\2"+
		"\u07ac\u07ad\7;\2\2\u07ad\u07ae\7\4\2\2\u07ae\u07af\5\u00ccg\2\u07af\u07b1"+
		"\7\6\2\2\u07b0\u07b2\t\17\2\2\u07b1\u07b0\3\2\2\2\u07b1\u07b2\3\2\2\2"+
		"\u07b2\u07b4\3\2\2\2\u07b3\u07ac\3\2\2\2\u07b3\u07b4\3\2\2\2\u07b4\u07b9"+
		"\3\2\2\2\u07b5\u07b6\7\u00ce\2\2\u07b6\u07b7\7\u011a\2\2\u07b7\u07b9\5"+
		"\u00fe\u0080\2\u07b8\u0791\3\2\2\2\u07b8\u079e\3\2\2\2\u07b8\u07a3\3\2"+
		"\2\2\u07b8\u07b5\3\2\2\2\u07b9\'\3\2\2\2\u07ba\u07bb\7X\2\2\u07bb\u07bd"+
		"\7\u0084\2\2\u07bc\u07be\7\u0115\2\2\u07bd\u07bc\3\2\2\2\u07bd\u07be\3"+
		"\2\2\2\u07be\u07bf\3\2\2\2\u07bf\u07c0\7\u0117\2\2\u07c0\u07c4\5\u00ce"+
		"h\2\u07c1\u07c2\7\u009a\2\2\u07c2\u07c3\7H\2\2\u07c3\u07c5\5.\30\2\u07c4"+
		"\u07c1\3\2\2\2\u07c4\u07c5\3\2\2\2\u07c5\u07c9\3\2\2\2\u07c6\u07c7\7\u00de"+
		"\2\2\u07c7\u07c8\7\26\2\2\u07c8\u07ca\5,\27\2\u07c9\u07c6\3\2\2\2\u07c9"+
		"\u07ca\3\2\2\2\u07ca\u07cb\3\2\2\2\u07cb\u07cc\5H%\2\u07cc\u07dd\3\2\2"+
		"\2\u07cd\u07ce\7I\2\2\u07ce\u07d8\5\u00fc\177\2\u07cf\u07d0\7X\2\2\u07d0"+
		"\u07d2\7\u0084\2\2\u07d1\u07d3\7\u0115\2\2\u07d2\u07d1\3\2\2\2\u07d2\u07d3"+
		"\3\2\2\2\u07d3\u07d4\3\2\2\2\u07d4\u07d5\7\u0117\2\2\u07d5\u07d6\5\u00ce"+
		"h\2\u07d6\u07d7\5H%\2\u07d7\u07d9\3\2\2\2\u07d8\u07cf\3\2\2\2\u07d9\u07da"+
		"\3\2\2\2\u07da\u07d8\3\2\2\2\u07da\u07db\3\2\2\2\u07db\u07dd\3\2\2\2\u07dc"+
		"\u07ba\3\2\2\2\u07dc\u07cd\3\2\2\2\u07dd)\3\2\2\2\u07de\u07df\7\5\2\2"+
		"\u07df\u07e0\7\u00d3\2\2\u07e0\u07e1\7\u00d4\2\2\u07e1\u07e2\7\4\2\2\u07e2"+
		"\u07e7\5\u00fe\u0080\2\u07e3\u07e4\7\5\2\2\u07e4\u07e6\5\u00fe\u0080\2"+
		"\u07e5\u07e3\3\2\2\2\u07e6\u07e9\3\2\2\2\u07e7\u07e5\3\2\2\2\u07e7\u07e8"+
		"\3\2\2\2\u07e8\u07ea\3\2\2\2\u07e9\u07e7\3\2\2\2\u07ea\u07eb\7\6\2\2\u07eb"+
		"\u07ec\7\u00d5\2\2\u07ec\u07ed\7\u00d6\2\2\u07ed\u07ef\3\2\2\2\u07ee\u07de"+
		"\3\2\2\2\u07ee\u07ef\3\2\2\2\u07ef\u080e\3\2\2\2\u07f0\u07f1\7\5\2\2\u07f1"+
		"\u07f2\7&\2\2\u07f2\u07f3\5\u00fe\u0080\2\u07f3\u07f4\7\u00d7\2\2\u07f4"+
		"\u07f5\7\u00d4\2\2\u07f5\u07f6\7\4\2\2\u07f6\u07fb\5\u00fe\u0080\2\u07f7"+
		"\u07f8\7\5\2\2\u07f8\u07fa\5\u00fe\u0080\2\u07f9\u07f7\3\2\2\2\u07fa\u07fd"+
		"\3\2\2\2\u07fb\u07f9\3\2\2\2\u07fb\u07fc\3\2\2\2\u07fc\u07fe\3\2\2\2\u07fd"+
		"\u07fb\3\2\2\2\u07fe\u07ff\7\6\2\2\u07ff\u0800\7\u00d8\2\2\u0800\u0801"+
		"\5\u00fc\177\2\u0801\u0802\7\4\2\2\u0802\u0807\5\u00fe\u0080\2\u0803\u0804"+
		"\7\5\2\2\u0804\u0806\5\u00fe\u0080\2\u0805\u0803\3\2\2\2\u0806\u0809\3"+
		"\2\2\2\u0807\u0805\3\2\2\2\u0807\u0808\3\2\2\2\u0808\u080a\3\2\2\2\u0809"+
		"\u0807\3\2\2\2\u080a\u080b\7\6\2\2\u080b\u080c\7\u00d5\2\2\u080c\u080d"+
		"\7\u00d6\2\2\u080d\u080f\3\2\2\2\u080e\u07f0\3\2\2\2\u080e\u080f\3\2\2"+
		"\2\u080f+\3\2\2\2\u0810\u081e\7\u00e8\2\2\u0811\u081e\7\u00e9\2\2\u0812"+
		"\u081e\7\u00ea\2\2\u0813\u081e\7\u00eb\2\2\u0814\u081e\7\u00ec\2\2\u0815"+
		"\u081e\7\u00ed\2\2\u0816\u081e\7\u00ee\2\2\u0817\u081e\7\u00ef\2\2\u0818"+
		"\u0819\7\u00f0\2\2\u0819\u081a\5\60\31\2\u081a\u081b\7\u00f1\2\2\u081b"+
		"\u081c\5\60\31\2\u081c\u081e\3\2\2\2\u081d\u0810\3\2\2\2\u081d\u0811\3"+
		"\2\2\2\u081d\u0812\3\2\2\2\u081d\u0813\3\2\2\2\u081d\u0814\3\2\2\2\u081d"+
		"\u0815\3\2\2\2\u081d\u0816\3\2\2\2\u081d\u0817\3\2\2\2\u081d\u0818\3\2"+
		"\2\2\u081e-\3\2\2\2\u081f\u0829\7\u00df\2\2\u0820\u0821\7\u00e0\2\2\u0821"+
		"\u0822\7\u00e1\2\2\u0822\u0823\7\33\2\2\u0823\u0827\5\60\31\2\u0824\u0825"+
		"\7\u00e2\2\2\u0825\u0826\7\33\2\2\u0826\u0828\5\60\31\2\u0827\u0824\3"+
		"\2\2\2\u0827\u0828\3\2\2\2\u0828\u082a\3\2\2\2\u0829\u0820\3\2\2\2\u0829"+
		"\u082a\3\2\2\2\u082a\u0830\3\2\2\2\u082b\u082c\7\u00e3\2\2\u082c\u082d"+
		"\7\u00e4\2\2\u082d\u082e\7\u00e1\2\2\u082e\u082f\7\33\2\2\u082f\u0831"+
		"\5\60\31\2\u0830\u082b\3\2\2\2\u0830\u0831\3\2\2\2\u0831\u0837\3\2\2\2"+
		"\u0832\u0833\7l\2\2\u0833\u0834\7\u00e5\2\2\u0834\u0835\7\u00e1\2\2\u0835"+
		"\u0836\7\33\2\2\u0836\u0838\5\60\31\2\u0837\u0832\3\2\2\2\u0837\u0838"+
		"\3\2\2\2\u0838\u083d\3\2\2\2\u0839\u083a\7\u00e6\2\2\u083a\u083b\7\u00e1"+
		"\2\2\u083b\u083c\7\33\2\2\u083c\u083e\5\60\31\2\u083d\u0839\3\2\2\2\u083d"+
		"\u083e\3\2\2\2\u083e\u0844\3\2\2\2\u083f\u0840\5:\36\2\u0840\u0841\7\u00e7"+
		"\2\2\u0841\u0842\7\26\2\2\u0842\u0843\5\60\31\2\u0843\u0845\3\2\2\2\u0844"+
		"\u083f\3\2\2\2\u0844\u0845\3\2\2\2\u0845\u084e\3\2\2\2\u0846\u0847\7\u00f2"+
		"\2\2\u0847\u084b\5\60\31\2\u0848\u0849\7\u00c5\2\2\u0849\u084a\7\u00f3"+
		"\2\2\u084a\u084c\5\64\33\2\u084b\u0848\3\2\2\2\u084b\u084c\3\2\2\2\u084c"+
		"\u084e\3\2\2\2\u084d\u081f\3\2\2\2\u084d\u0846\3\2\2\2\u084e/\3\2\2\2"+
		"\u084f\u0852\7\u01b4\2\2\u0850\u0852\5\u00ceh\2\u0851\u084f\3\2\2\2\u0851"+
		"\u0850\3\2\2\2\u0852\61\3\2\2\2\u0853\u0857\7\u01b4\2\2\u0854\u0857\5"+
		"\u00ceh\2\u0855\u0857\5\u0102\u0082\2\u0856\u0853\3\2\2\2\u0856\u0854"+
		"\3\2\2\2\u0856\u0855\3\2\2\2\u0857\63\3\2\2\2\u0858\u0859\7\4\2\2\u0859"+
		"\u085a\5\60\31\2\u085a\u085b\7\u019a\2\2\u085b\u0863\5\60\31\2\u085c\u085d"+
		"\7\5\2\2\u085d\u085e\5\60\31\2\u085e\u085f\7\u019a\2\2\u085f\u0860\5\60"+
		"\31\2\u0860\u0862\3\2\2\2\u0861\u085c\3\2\2\2\u0862\u0865\3\2\2\2\u0863"+
		"\u0861\3\2\2\2\u0863\u0864\3\2\2\2\u0864\u0866\3\2\2\2\u0865\u0863\3\2"+
		"\2\2\u0866\u0867\7\6\2\2\u0867\65\3\2\2\2\u0868\u0869\7\4\2\2\u0869\u086a"+
		"\5\u00fe\u0080\2\u086a\u086b\7\u019a\2\2\u086b\u0873\5\62\32\2\u086c\u086d"+
		"\7\5\2\2\u086d\u086e\5\u00fe\u0080\2\u086e\u086f\7\u019a\2\2\u086f\u0870"+
		"\5\62\32\2\u0870\u0872\3\2\2\2\u0871\u086c\3\2\2\2\u0872\u0875\3\2\2\2"+
		"\u0873\u0871\3\2\2\2\u0873\u0874\3\2\2\2\u0874\u0876\3\2\2\2\u0875\u0873"+
		"\3\2\2\2\u0876\u0877\7\6\2\2\u0877\67\3\2\2\2\u0878\u087b\5\u00fe\u0080"+
		"\2\u0879\u087a\7#\2\2\u087a\u087c\5\u00ceh\2\u087b\u0879\3\2\2\2\u087b"+
		"\u087c\3\2\2\2\u087c9\3\2\2\2\u087d\u087e\7x\2\2\u087e;\3\2\2\2\u087f"+
		"\u0880\5\u00b6\\\2\u0880\u0881\7\2\2\3\u0881=\3\2\2\2\u0882\u0883\5\u00f8"+
		"}\2\u0883\u0884\7\2\2\3\u0884?\3\2\2\2\u0885\u0886\5\u0086D\2\u0886\u0887"+
		"\7\2\2\3\u0887A\3\2\2\2\u0888\u0889\5D#\2\u0889C\3\2\2\2\u088a\u0afa\5"+
		"H%\2\u088b\u0afa\5L\'\2\u088c\u088d\7\u00b7\2\2\u088d\u088f\5\u00fc\177"+
		"\2\u088e\u0890\5\u00fe\u0080\2\u088f\u088e\3\2\2\2\u088f\u0890\3\2\2\2"+
		"\u0890\u0891\3\2\2\2\u0891\u0892\7\u00a2\2\2\u0892\u0893\5\u00c4c\2\u0893"+
		"\u0894\7\u019a\2\2\u0894\u089c\5\u00c0a\2\u0895\u0896\7\5\2\2\u0896\u0897"+
		"\5\u00c4c\2\u0897\u0898\7\u019a\2\2\u0898\u0899\5\u00c0a\2\u0899\u089b"+
		"\3\2\2\2\u089a\u0895\3\2\2\2\u089b\u089e\3\2\2\2\u089c\u089a\3\2\2\2\u089c"+
		"\u089d\3\2\2\2\u089d\u08a1\3\2\2\2\u089e\u089c\3\2\2\2\u089f\u08a0\7\u00c4"+
		"\2\2\u08a0\u08a2\5\u00bc_\2\u08a1\u089f\3\2\2\2\u08a1\u08a2\3\2\2\2\u08a2"+
		"\u0afa\3\2\2\2\u08a3\u08a4\7\u00bd\2\2\u08a4\u0afa\5\u00fe\u0080\2\u08a5"+
		"\u08a6\7\u00bd\2\2\u08a6\u08a7\5\u00fe\u0080\2\u08a7\u08a8\7\7\2\2\u08a8"+
		"\u08a9\5\u00fe\u0080\2\u08a9\u0afa\3\2\2\2\u08aa\u08ab\7\'\2\2\u08ab\u08af"+
		"\7\u009c\2\2\u08ac\u08ad\7S\2\2\u08ad\u08ae\7w\2\2\u08ae\u08b0\7@\2\2"+
		"\u08af\u08ac\3\2\2\2\u08af\u08b0\3\2\2\2\u08b0\u08b1\3\2\2\2\u08b1\u08b4"+
		"\5\u00fc\177\2\u08b2\u08b3\7\u00c5\2\2\u08b3\u08b5\5\u0082B\2\u08b4\u08b2"+
		"\3\2\2\2\u08b4\u08b5\3\2\2\2\u08b5\u0afa\3\2\2\2\u08b6\u08b7\79\2\2\u08b7"+
		"\u08ba\7\u009c\2\2\u08b8\u08b9\7S\2\2\u08b9\u08bb\7@\2\2\u08ba\u08b8\3"+
		"\2\2\2\u08ba\u08bb\3\2\2\2\u08bb\u08bc\3\2\2\2\u08bc\u08be\5\u00fc\177"+
		"\2\u08bd\u08bf\t\b\2\2\u08be\u08bd\3\2\2\2\u08be\u08bf\3\2\2\2\u08bf\u0afa"+
		"\3\2\2\2\u08c0\u08c1\7\21\2\2\u08c1\u08c2\7\u009c\2\2\u08c2\u08c3\5\u00fc"+
		"\177\2\u08c3\u08c4\7\u0091\2\2\u08c4\u08c5\7\u00b1\2\2\u08c5\u08c6\5\u00fe"+
		"\u0080\2\u08c6\u0afa\3\2\2\2\u08c7\u08c8\7\'\2\2\u08c8\u08cc\7\u00aa\2"+
		"\2\u08c9\u08ca\7S\2\2\u08ca\u08cb\7w\2\2\u08cb\u08cd\7@\2\2\u08cc\u08c9"+
		"\3\2\2\2\u08cc\u08cd\3\2\2\2\u08cd\u08ce\3\2\2\2\u08ce\u08d0\5\u00fc\177"+
		"\2\u08cf\u08d1\5\u00aeX\2\u08d0\u08cf\3\2\2\2\u08d0\u08d1\3\2\2\2\u08d1"+
		"\u08d4\3\2\2\2\u08d2\u08d3\7#\2\2\u08d3\u08d5\5\u00ceh\2\u08d4\u08d2\3"+
		"\2\2\2\u08d4\u08d5\3\2\2\2\u08d5\u08d8\3\2\2\2\u08d6\u08d7\7\u00c5\2\2"+
		"\u08d7\u08d9\5\u0082B\2\u08d8\u08d6\3\2\2\2\u08d8\u08d9\3\2\2\2\u08d9"+
		"\u08db\3\2\2\2\u08da\u08dc\7\u0137\2\2\u08db\u08da\3\2\2\2\u08db\u08dc"+
		"\3\2\2\2\u08dc\u08dd\3\2\2\2\u08dd\u08e3\7\26\2\2\u08de\u08e4\5H%\2\u08df"+
		"\u08e0\7\4\2\2\u08e0\u08e1\5H%\2\u08e1\u08e2\7\6\2\2\u08e2\u08e4\3\2\2"+
		"\2\u08e3\u08de\3\2\2\2\u08e3\u08df\3\2\2\2\u08e4\u08ea\3\2\2\2\u08e5\u08e7"+
		"\7\u00c5\2\2\u08e6\u08e8\7u\2\2\u08e7\u08e6\3\2\2\2\u08e7\u08e8\3\2\2"+
		"\2\u08e8\u08e9\3\2\2\2\u08e9\u08eb\7\60\2\2\u08ea\u08e5\3\2\2\2\u08ea"+
		"\u08eb\3\2\2\2\u08eb\u08ee\3\2\2\2\u08ec\u08ed\7\u0132\2\2\u08ed\u08ef"+
		"\7|\2\2\u08ee\u08ec\3\2\2\2\u08ee\u08ef\3\2\2\2\u08ef\u08f1\3\2\2\2\u08f0"+
		"\u08f2\5R*\2\u08f1\u08f0\3\2\2\2\u08f1\u08f2\3\2\2\2\u08f2\u0afa\3\2\2"+
		"\2\u08f3\u08f5\7\'\2\2\u08f4\u08f6\7\u0139\2\2\u08f5\u08f4\3\2\2\2\u08f5"+
		"\u08f6\3\2\2\2\u08f6\u08f8\3\2\2\2\u08f7\u08f9\7\u00d2\2\2\u08f8\u08f7"+
		"\3\2\2\2\u08f8\u08f9\3\2\2\2\u08f9\u08fb\3\2\2\2\u08fa\u08fc\7\u00d0\2"+
		"\2\u08fb\u08fa\3\2\2\2\u08fb\u08fc\3\2\2\2\u08fc\u08fd\3\2\2\2\u08fd\u0901"+
		"\7\u00aa\2\2\u08fe\u08ff\7S\2\2\u08ff\u0900\7w\2\2\u0900\u0902\7@\2\2"+
		"\u0901\u08fe\3\2\2\2\u0901\u0902\3\2\2\2\u0902\u0903\3\2\2\2\u0903\u0904"+
		"\5\u00fc\177\2\u0904\u0905\7\4\2\2\u0905\u090a\5p9\2\u0906\u0907\7\5\2"+
		"\2\u0907\u0909\5p9\2\u0908\u0906\3\2\2\2\u0909\u090c\3\2\2\2\u090a\u0908"+
		"\3\2\2\2\u090a\u090b\3\2\2\2\u090b\u090d\3\2\2\2\u090c\u090a\3\2\2\2\u090d"+
		"\u090f\7\6\2\2\u090e\u0910\5T+\2\u090f\u090e\3\2\2\2\u090f\u0910\3\2\2"+
		"\2\u0910\u0912\3\2\2\2\u0911\u0913\5V,\2\u0912\u0911\3\2\2\2\u0912\u0913"+
		"\3\2\2\2\u0913\u0915\3\2\2\2\u0914\u0916\5X-\2\u0915\u0914\3\2\2\2\u0915"+
		"\u0916\3\2\2\2\u0916\u091c\3\2\2\2\u0917\u0919\7#\2\2\u0918\u091a\7\u019a"+
		"\2\2\u0919\u0918\3\2\2\2\u0919\u091a\3\2\2\2\u091a\u091b\3\2\2\2\u091b"+
		"\u091d\5\u00ceh\2\u091c\u0917\3\2\2\2\u091c\u091d\3\2\2\2\u091d\u0920"+
		"\3\2\2\2\u091e\u091f\7\u00c5\2\2\u091f\u0921\5\u0082B\2\u0920\u091e\3"+
		"\2\2\2\u0920\u0921\3\2\2\2\u0921\u0923\3\2\2\2\u0922\u0924\5N(\2\u0923"+
		"\u0922\3\2\2\2\u0923\u0924\3\2\2\2\u0924\u0926\3\2\2\2\u0925\u0927\5P"+
		")\2\u0926\u0925\3\2\2\2\u0926\u0927\3\2\2\2\u0927\u0afa\3\2\2\2\u0928"+
		"\u0929\7\u00b6\2\2\u0929\u092a\7\u00aa\2\2\u092a\u0afa\5\u00fc\177\2\u092b"+
		"\u092d\79\2\2\u092c\u092e\7\u00d2\2\2\u092d\u092c\3\2\2\2\u092d\u092e"+
		"\3\2\2\2\u092e\u0930\3\2\2\2\u092f\u0931\7\u00d0\2\2\u0930\u092f\3\2\2"+
		"\2\u0930\u0931\3\2\2\2\u0931\u0932\3\2\2\2\u0932\u0935\7\u00aa\2\2\u0933"+
		"\u0934\7S\2\2\u0934\u0936\7@\2\2\u0935\u0933\3\2\2\2\u0935\u0936\3\2\2"+
		"\2\u0936\u0937\3\2\2\2\u0937\u0afa\5\u00fc\177\2\u0938\u093a\7\'\2\2\u0939"+
		"\u093b\t\20\2\2\u093a\u0939\3\2\2\2\u093a\u093b\3\2\2\2\u093b\u093c\3"+
		"\2\2\2\u093c\u093d\7\u0108\2\2\u093d\u093e\5\u00fc\177\2\u093e\u093f\7"+
		"{\2\2\u093f\u0940\5\u00fc\177\2\u0940\u0941\5\u00b2Z\2\u0941\u0afa\3\2"+
		"\2\2\u0942\u0943\7\21\2\2\u0943\u0944\7\u00aa\2\2\u0944\u0945\5\u00fc"+
		"\177\2\u0945\u0946\7\17\2\2\u0946\u0947\7\u0108\2\2\u0947\u0948\5\u00fc"+
		"\177\2\u0948\u0949\5\u00b2Z\2\u0949\u0afa\3\2\2\2\u094a\u094b\79\2\2\u094b"+
		"\u094c\7\u0108\2\2\u094c\u094f\5\u00fc\177\2\u094d\u094e\7{\2\2\u094e"+
		"\u0950\5\u00fc\177\2\u094f\u094d\3\2\2\2\u094f\u0950\3\2\2\2\u0950\u0952"+
		"\3\2\2\2\u0951\u0953\7\u012b\2\2\u0952\u0951\3\2\2\2\u0952\u0953\3\2\2"+
		"\2\u0953\u0955\3\2\2\2\u0954\u0956\t\b\2\2\u0955\u0954\3\2\2\2\u0955\u0956"+
		"\3\2\2\2\u0956\u0afa\3\2\2\2\u0957\u0958\7\21\2\2\u0958\u0959\7\u00aa"+
		"\2\2\u0959\u095a\5\u00fc\177\2\u095a\u095b\79\2\2\u095b\u095c\t\21\2\2"+
		"\u095c\u095d\5\u00fc\177\2\u095d\u0afa\3\2\2\2\u095e\u0afa\5F$\2\u095f"+
		"\u0960\7\64\2\2\u0960\u0961\7I\2\2\u0961\u0963\5\u00fc\177\2\u0962\u0964"+
		"\5\u00fe\u0080\2\u0963\u0962\3\2\2\2\u0963\u0964\3\2\2\2\u0964\u0967\3"+
		"\2\2\2\u0965\u0966\7\u00c4\2\2\u0966\u0968\5\u00bc_\2\u0967\u0965\3\2"+
		"\2\2\u0967\u0968\3\2\2\2\u0968\u0afa\3\2\2\2\u0969\u096a\7\21\2\2\u096a"+
		"\u096b\7\u00aa\2\2\u096b\u096c\5\u00fc\177\2\u096c\u096e\7\u0091\2\2\u096d"+
		"\u096f\7\u00b1\2\2\u096e\u096d\3\2\2\2\u096e\u096f\3\2\2\2\u096f\u0970"+
		"\3\2\2\2\u0970\u0971\5\u00fc\177\2\u0971\u0afa\3\2\2\2\u0972\u0973\7\21"+
		"\2\2\u0973\u0974\7\u00aa\2\2\u0974\u0975\5\u00fc\177\2\u0975\u0976\7o"+
		"\2\2\u0976\u0977\5\u00fc\177\2\u0977\u097a\5\u00dep\2\u0978\u0979\7w\2"+
		"\2\u0979\u097b\7x\2\2\u097a\u0978\3\2\2\2\u097a\u097b\3\2\2\2\u097b\u0983"+
		"\3\2\2\2\u097c\u0981\7\u00ce\2\2\u097d\u0982\5\u00ceh\2\u097e\u0982\5"+
		"\u00fe\u0080\2\u097f\u0982\5\u0102\u0082\2\u0980\u0982\7x\2\2\u0981\u097d"+
		"\3\2\2\2\u0981\u097e\3\2\2\2\u0981\u097f\3\2\2\2\u0981\u0980\3\2\2\2\u0982"+
		"\u0984\3\2\2\2\u0983\u097c\3\2\2\2\u0983\u0984\3\2\2\2\u0984\u0988\3\2"+
		"\2\2\u0985\u0989\7E\2\2\u0986\u0987\7\u0105\2\2\u0987\u0989\5\u00fe\u0080"+
		"\2\u0988\u0985\3\2\2\2\u0988\u0986\3\2\2\2\u0988\u0989\3\2\2\2\u0989\u0afa"+
		"\3\2\2\2\u098a\u098b\7\21\2\2\u098b\u098c\7\u00aa\2\2\u098c\u098d\5\u00fc"+
		"\177\2\u098d\u098e\7\u0104\2\2\u098e\u098f\5\u00fc\177\2\u098f\u0990\5"+
		"\u00fc\177\2\u0990\u0998\5\u00dep\2\u0991\u0996\7\u00ce\2\2\u0992\u0997"+
		"\5\u00ceh\2\u0993\u0997\5\u00fe\u0080\2\u0994\u0997\5\u0102\u0082\2\u0995"+
		"\u0997\7x\2\2\u0996\u0992\3\2\2\2\u0996\u0993\3\2\2\2\u0996\u0994\3\2"+
		"\2\2\u0996\u0995\3\2\2\2\u0997\u0999\3\2\2\2\u0998\u0991\3\2\2\2\u0998"+
		"\u0999\3\2\2\2\u0999\u099c\3\2\2\2\u099a\u099b\7w\2\2\u099b\u099d\7x\2"+
		"\2\u099c\u099a\3\2\2\2\u099c\u099d\3\2\2\2\u099d\u0afa\3\2\2\2\u099e\u099f"+
		"\6#\6\2\u099f\u09a0\7\21\2\2\u09a0\u09a1\7\u00aa\2\2\u09a1\u09a2\5\u00fc"+
		"\177\2\u09a2\u09a3\7\21\2\2\u09a3\u09ae\5\u00fc\177\2\u09a4\u09a5\7\u00a2"+
		"\2\2\u09a5\u09aa\7\u00ce\2\2\u09a6\u09ab\5\u00ceh\2\u09a7\u09ab\5\u00fe"+
		"\u0080\2\u09a8\u09ab\5\u0102\u0082\2\u09a9\u09ab\7x\2\2\u09aa\u09a6\3"+
		"\2\2\2\u09aa\u09a7\3\2\2\2\u09aa\u09a8\3\2\2\2\u09aa\u09a9\3\2\2\2\u09ab"+
		"\u09af\3\2\2\2\u09ac\u09ad\79\2\2\u09ad\u09af\7\u00ce\2\2\u09ae\u09a4"+
		"\3\2\2\2\u09ae\u09ac\3\2\2\2\u09af\u0afa\3\2\2\2\u09b0\u09b1\7\21\2\2"+
		"\u09b1\u09b2\7\u00aa\2\2\u09b2\u09b3\5\u00fc\177\2\u09b3\u09b4\7\u0091"+
		"\2\2\u09b4\u09b5\7!\2\2\u09b5\u09b6\5\u00fe\u0080\2\u09b6\u09b7\7\u00b1"+
		"\2\2\u09b7\u09b9\5\u00fe\u0080\2\u09b8\u09ba\5\u00dep\2\u09b9\u09b8\3"+
		"\2\2\2\u09b9\u09ba\3\2\2\2\u09ba\u0afa\3\2\2\2\u09bb\u09bc\7\21\2\2\u09bc"+
		"\u09bd\7\u00aa\2\2\u09bd\u09be\5\u00fc\177\2\u09be\u09c0\79\2\2\u09bf"+
		"\u09c1\7!\2\2\u09c0\u09bf\3\2\2\2\u09c0\u09c1\3\2\2\2\u09c1\u09c2\3\2"+
		"\2\2\u09c2\u09cb\5\u00fc\177\2\u09c3\u09c4\7\5\2\2\u09c4\u09c6\79\2\2"+
		"\u09c5\u09c7\7!\2\2\u09c6\u09c5\3\2\2\2\u09c6\u09c7\3\2\2\2\u09c7\u09c8"+
		"\3\2\2\2\u09c8\u09ca\5\u00fc\177\2\u09c9\u09c3\3\2\2\2\u09ca\u09cd\3\2"+
		"\2\2\u09cb\u09c9\3\2\2\2\u09cb\u09cc\3\2\2\2\u09cc\u0afa\3\2\2\2\u09cd"+
		"\u09cb\3\2\2\2\u09ce\u09cf\7\21\2\2\u09cf\u09d0\7\u00aa\2\2\u09d0\u09d1"+
		"\5\u00fc\177\2\u09d1\u09d3\7\17\2\2\u09d2\u09d4\7!\2\2\u09d3\u09d2\3\2"+
		"\2\2\u09d3\u09d4\3\2\2\2\u09d4\u09e1\3\2\2\2\u09d5\u09e2\5v<\2\u09d6\u09d7"+
		"\7\4\2\2\u09d7\u09dc\5p9\2\u09d8\u09d9\7\5\2\2\u09d9\u09db\5p9\2\u09da"+
		"\u09d8\3\2\2\2\u09db\u09de\3\2\2\2\u09dc\u09da\3\2\2\2\u09dc\u09dd\3\2"+
		"\2\2\u09dd\u09df\3\2\2\2\u09de\u09dc\3\2\2\2\u09df\u09e0\7\6\2\2\u09e0"+
		"\u09e2\3\2\2\2\u09e1\u09d5\3\2\2\2\u09e1\u09d6\3\2\2\2\u09e2\u09e6\3\2"+
		"\2\2\u09e3\u09e7\7E\2\2\u09e4\u09e5\7\u0105\2\2\u09e5\u09e7\5\u00fe\u0080"+
		"\2\u09e6\u09e3\3\2\2\2\u09e6\u09e4\3\2\2\2\u09e6\u09e7\3\2\2\2\u09e7\u0afa"+
		"\3\2\2\2\u09e8\u09eb\7\'\2\2\u09e9\u09ea\7~\2\2\u09ea\u09ec\7\u0093\2"+
		"\2\u09eb\u09e9\3\2\2\2\u09eb\u09ec\3\2\2\2\u09ec\u09ed\3\2\2\2\u09ed\u09ee"+
		"\7\u00c2\2\2\u09ee\u09ef\5\u00fc\177\2\u09ef\u09f0\7\26\2\2\u09f0\u09f1"+
		"\5H%\2\u09f1\u0afa\3\2\2\2\u09f2\u09f3\79\2\2\u09f3\u09f6\7\u00c2\2\2"+
		"\u09f4\u09f5\7S\2\2\u09f5\u09f7\7@\2\2\u09f6\u09f4\3\2\2\2\u09f6\u09f7"+
		"\3\2\2\2\u09f7\u09f8\3\2\2\2\u09f8\u0afa\5\u00fc\177\2\u09f9\u09fa\7\34"+
		"\2\2\u09fa\u09fb\5\u00fc\177\2\u09fb\u0a04\7\4\2\2\u09fc\u0a01\5\u00f4"+
		"{\2\u09fd\u09fe\7\5\2\2\u09fe\u0a00\5\u00f4{\2\u09ff\u09fd\3\2\2\2\u0a00"+
		"\u0a03\3\2\2\2\u0a01\u09ff\3\2\2\2\u0a01\u0a02\3\2\2\2\u0a02\u0a05\3\2"+
		"\2\2\u0a03\u0a01\3\2\2\2\u0a04\u09fc\3\2\2\2\u0a04\u0a05\3\2\2\2\u0a05"+
		"\u0a06\3\2\2\2\u0a06\u0a07\7\6\2\2\u0a07\u0afa\3\2\2\2\u0a08\u0a13\7L"+
		"\2\2\u0a09\u0a0e\5\u00fa~\2\u0a0a\u0a0b\7\5\2\2\u0a0b\u0a0d\5\u00fa~\2"+
		"\u0a0c\u0a0a\3\2\2\2\u0a0d\u0a10\3\2\2\2\u0a0e\u0a0c\3\2\2\2\u0a0e\u0a0f"+
		"\3\2\2\2\u0a0f\u0a14\3\2\2\2\u0a10\u0a0e\3\2\2\2\u0a11\u0a12\7\20\2\2"+
		"\u0a12\u0a14\7\u008b\2\2\u0a13\u0a09\3\2\2\2\u0a13\u0a11\3\2\2\2\u0a14"+
		"\u0a15\3\2\2\2\u0a15\u0a17\7{\2\2\u0a16\u0a18\7\u00aa\2\2\u0a17\u0a16"+
		"\3\2\2\2\u0a17\u0a18\3\2\2\2\u0a18\u0a19\3\2\2\2\u0a19\u0a1a\5\u00fc\177"+
		"\2\u0a1a\u0a1b\7\u00b1\2\2\u0a1b\u0a1f\5\u00fe\u0080\2\u0a1c\u0a1d\7\u00c5"+
		"\2\2\u0a1d\u0a1e\7L\2\2\u0a1e\u0a20\7}\2\2\u0a1f\u0a1c\3\2\2\2\u0a1f\u0a20"+
		"\3\2\2\2\u0a20\u0afa\3\2\2\2\u0a21\u0a25\7\u0096\2\2\u0a22\u0a23\7L\2"+
		"\2\u0a23\u0a24\7}\2\2\u0a24\u0a26\7G\2\2\u0a25\u0a22\3\2\2\2\u0a25\u0a26"+
		"\3\2\2\2\u0a26\u0a31\3\2\2\2\u0a27\u0a2c\5\u00fa~\2\u0a28\u0a29\7\5\2"+
		"\2\u0a29\u0a2b\5\u00fa~\2\u0a2a\u0a28\3\2\2\2\u0a2b\u0a2e\3\2\2\2\u0a2c"+
		"\u0a2a\3\2\2\2\u0a2c\u0a2d\3\2\2\2\u0a2d\u0a32\3\2\2\2\u0a2e\u0a2c\3\2"+
		"\2\2\u0a2f\u0a30\7\20\2\2\u0a30\u0a32\7\u008b\2\2\u0a31\u0a27\3\2\2\2"+
		"\u0a31\u0a2f\3\2\2\2\u0a32\u0a33\3\2\2\2\u0a33\u0a35\7{\2\2\u0a34\u0a36"+
		"\7\u00aa\2\2\u0a35\u0a34\3\2\2\2\u0a35\u0a36\3\2\2\2\u0a36\u0a37\3\2\2"+
		"\2\u0a37\u0a38\5\u00fc\177\2\u0a38\u0a39\7I\2\2\u0a39\u0a3a\5\u00fe\u0080"+
		"\2\u0a3a\u0afa\3\2\2\2\u0a3b\u0a3c\7\u00a4\2\2\u0a3c\u0a42\7M\2\2\u0a3d"+
		"\u0a3f\7{\2\2\u0a3e\u0a40\7\u00aa\2\2\u0a3f\u0a3e\3\2\2\2\u0a3f\u0a40"+
		"\3\2\2\2\u0a40\u0a41\3\2\2\2\u0a41\u0a43\5\u00fc\177\2\u0a42\u0a3d\3\2"+
		"\2\2\u0a42\u0a43\3\2\2\2\u0a43\u0afa\3\2\2\2\u0a44\u0a46\7A\2\2\u0a45"+
		"\u0a47\7\22\2\2\u0a46\u0a45\3\2\2\2\u0a46\u0a47\3\2\2\2\u0a47\u0a49\3"+
		"\2\2\2\u0a48\u0a4a\7\u00c1\2\2\u0a49\u0a48\3\2\2\2\u0a49\u0a4a\3\2\2\2"+
		"\u0a4a\u0a56\3\2\2\2\u0a4b\u0a4c\7\4\2\2\u0a4c\u0a51\5\u00eex\2\u0a4d"+
		"\u0a4e\7\5\2\2\u0a4e\u0a50\5\u00eex\2\u0a4f\u0a4d\3\2\2\2\u0a50\u0a53"+
		"\3\2\2\2\u0a51\u0a4f\3\2\2\2\u0a51\u0a52\3\2\2\2\u0a52\u0a54\3\2\2\2\u0a53"+
		"\u0a51\3\2\2\2\u0a54\u0a55\7\6\2\2\u0a55\u0a57\3\2\2\2\u0a56\u0a4b\3\2"+
		"\2\2\u0a56\u0a57\3\2\2\2\u0a57\u0a58\3\2\2\2\u0a58\u0afa\5D#\2\u0a59\u0a5a"+
		"\7\u00a4\2\2\u0a5a\u0a5b\7\'\2\2\u0a5b\u0a5c\7\u00aa\2\2\u0a5c\u0afa\5"+
		"\u00fc\177\2\u0a5d\u0a5e\7\u00a4\2\2\u0a5e\u0a5f\7\'\2\2\u0a5f\u0a60\7"+
		"\u00c2\2\2\u0a60\u0afa\5\u00fc\177\2\u0a61\u0a62\7\u00a4\2\2\u0a62\u0a65"+
		"\7\u00ab\2\2\u0a63\u0a64\t\22\2\2\u0a64\u0a66\5\u00fc\177\2\u0a65\u0a63"+
		"\3\2\2\2\u0a65\u0a66\3\2\2\2\u0a66\u0a6d\3\2\2\2\u0a67\u0a68\7f\2\2\u0a68"+
		"\u0a6b\5\u00ceh\2\u0a69\u0a6a\7<\2\2\u0a6a\u0a6c\5\u00ceh\2\u0a6b\u0a69"+
		"\3\2\2\2\u0a6b\u0a6c\3\2\2\2\u0a6c\u0a6e\3\2\2\2\u0a6d\u0a67\3\2\2\2\u0a6d"+
		"\u0a6e\3\2\2\2\u0a6e\u0afa\3\2\2\2\u0a6f\u0a70\7\u00a4\2\2\u0a70\u0a73"+
		"\7\u009d\2\2\u0a71\u0a72\t\22\2\2\u0a72\u0a74\5\u00fe\u0080\2\u0a73\u0a71"+
		"\3\2\2\2\u0a73\u0a74\3\2\2\2\u0a74\u0a7b\3\2\2\2\u0a75\u0a76\7f\2\2\u0a76"+
		"\u0a79\5\u00ceh\2\u0a77\u0a78\7<\2\2\u0a78\u0a7a\5\u00ceh\2\u0a79\u0a77"+
		"\3\2\2\2\u0a79\u0a7a\3\2\2\2\u0a7a\u0a7c\3\2\2\2\u0a7b\u0a75\3\2\2\2\u0a7b"+
		"\u0a7c\3\2\2\2\u0a7c\u0afa\3\2\2\2\u0a7d\u0a7e\7\u00a4\2\2\u0a7e\u0a81"+
		"\7\u0108\2\2\u0a7f\u0a80\t\22\2\2\u0a80\u0a82\5\u00fe\u0080\2\u0a81\u0a7f"+
		"\3\2\2\2\u0a81\u0a82\3\2\2\2\u0a82\u0a89\3\2\2\2\u0a83\u0a84\7f\2\2\u0a84"+
		"\u0a87\5\u00ceh\2\u0a85\u0a86\7<\2\2\u0a86\u0a88\5\u00ceh\2\u0a87\u0a85"+
		"\3\2\2\2\u0a87\u0a88\3\2\2\2\u0a88\u0a8a\3\2\2\2\u0a89\u0a83\3\2\2\2\u0a89"+
		"\u0a8a\3\2\2\2\u0a8a\u0afa\3\2\2\2\u0a8b\u0a8c\7\u00a4\2\2\u0a8c\u0a8f"+
		"\7 \2\2\u0a8d\u0a8e\7f\2\2\u0a8e\u0a90\5\u00ceh\2\u0a8f\u0a8d\3\2\2\2"+
		"\u0a8f\u0a90\3\2\2\2\u0a90\u0afa\3\2\2\2\u0a91\u0a92\7\u00a4\2\2\u0a92"+
		"\u0a93\7\"\2\2\u0a93\u0a94\t\22\2\2\u0a94\u0afa\5\u00fc\177\2\u0a95\u0a96"+
		"\7\u00a4\2\2\u0a96\u0a97\7\u00a7\2\2\u0a97\u0a98\t\23\2\2\u0a98\u0afa"+
		"\5\u00fc\177\2\u0a99\u0a9a\7\u00a4\2\2\u0a9a\u0a9b\7\u00a7\2\2\u0a9b\u0a9c"+
		"\7G\2\2\u0a9c\u0a9d\7\4\2\2\u0a9d\u0a9e\5\u0092J\2\u0a9e\u0a9f\7\6\2\2"+
		"\u0a9f\u0afa\3\2\2\2\u0aa0\u0aa1\7\66\2\2\u0aa1\u0afa\5\u00fc\177\2\u0aa2"+
		"\u0aa3\7\65\2\2\u0aa3\u0afa\5\u00fc\177\2\u0aa4\u0aa5\7\u00a4\2\2\u0aa5"+
		"\u0afa\7K\2\2\u0aa6\u0aa7\7\u00a4\2\2\u0aa7\u0afa\7\u00a1\2\2\u0aa8\u0aa9"+
		"\7\u00a4\2\2\u0aa9\u0aaa\7\u0086\2\2\u0aaa\u0afa\5\u00fe\u0080\2\u0aab"+
		"\u0aac\7\u00a2\2\2\u0aac\u0aad\7\u00a1\2\2\u0aad\u0aae\5\u00fc\177\2\u0aae"+
		"\u0aaf\7\u019a\2\2\u0aaf\u0ab0\5\u00b6\\\2\u0ab0\u0afa\3\2\2\2\u0ab1\u0ab2"+
		"\7\u0094\2\2\u0ab2\u0ab3\7\u00a1\2\2\u0ab3\u0afa\5\u00fc\177\2\u0ab4\u0ab5"+
		"\7\u00a6\2\2\u0ab5\u0abe\7\u00b2\2\2\u0ab6\u0abb\5\u00f0y\2\u0ab7\u0ab8"+
		"\7\5\2\2\u0ab8\u0aba\5\u00f0y\2\u0ab9\u0ab7\3\2\2\2\u0aba\u0abd\3\2\2"+
		"\2\u0abb\u0ab9\3\2\2\2\u0abb\u0abc\3\2\2\2\u0abc\u0abf\3\2\2\2\u0abd\u0abb"+
		"\3\2\2\2\u0abe\u0ab6\3\2\2\2\u0abe\u0abf\3\2\2\2\u0abf\u0afa\3\2\2\2\u0ac0"+
		"\u0ac1\6#\7\2\u0ac1\u0ac3\7$\2\2\u0ac2\u0ac4\7\u00c7\2\2\u0ac3\u0ac2\3"+
		"\2\2\2\u0ac3\u0ac4\3\2\2\2\u0ac4\u0afa\3\2\2\2\u0ac5\u0ac6\6#\b\2\u0ac6"+
		"\u0ac8\7\u0098\2\2\u0ac7\u0ac9\7\u00c7\2\2\u0ac8\u0ac7\3\2\2\2\u0ac8\u0ac9"+
		"\3\2\2\2\u0ac9\u0afa\3\2\2\2\u0aca\u0acb\7\u008a\2\2\u0acb\u0acc\5\u00fe"+
		"\u0080\2\u0acc\u0acd\7I\2\2\u0acd\u0ace\5D#\2\u0ace\u0afa\3\2\2\2\u0acf"+
		"\u0ad0\7\63\2\2\u0ad0\u0ad1\7\u008a\2\2\u0ad1\u0afa\5\u00fe\u0080\2\u0ad2"+
		"\u0ad3\7?\2\2\u0ad3\u0add\5\u00fe\u0080\2\u0ad4\u0ad5\7\u00be\2\2\u0ad5"+
		"\u0ada\5\u00b6\\\2\u0ad6\u0ad7\7\5\2\2\u0ad7\u0ad9\5\u00b6\\\2\u0ad8\u0ad6"+
		"\3\2\2\2\u0ad9\u0adc\3\2\2\2\u0ada\u0ad8\3\2\2\2\u0ada\u0adb\3\2\2\2\u0adb"+
		"\u0ade\3\2\2\2\u0adc\u0ada\3\2\2\2\u0add\u0ad4\3\2\2\2\u0add\u0ade\3\2"+
		"\2\2\u0ade\u0afa\3\2\2\2\u0adf\u0ae0\7\66\2\2\u0ae0\u0ae1\7W\2\2\u0ae1"+
		"\u0afa\5\u00fe\u0080\2\u0ae2\u0ae3\7\66\2\2\u0ae3\u0ae4\7\u0082\2\2\u0ae4"+
		"\u0afa\5\u00fe\u0080\2\u0ae5\u0ae6\7\u00a2\2\2\u0ae6\u0ae7\7\u0087\2\2"+
		"\u0ae7\u0afa\5\u00f8}\2\u0ae8\u0aee\7\u00a2\2\2\u0ae9\u0aea\5\u0100\u0081"+
		"\2\u0aea\u0aeb\7\7\2\2\u0aeb\u0aed\3\2\2\2\u0aec\u0ae9\3\2\2\2\u0aed\u0af0"+
		"\3\2\2\2\u0aee\u0aec\3\2\2\2\u0aee\u0aef\3\2\2\2\u0aef\u0af1\3\2\2\2\u0af0"+
		"\u0aee\3\2\2\2\u0af1\u0af2\5\u0100\u0081\2\u0af2\u0af3\7\u019a\2\2\u0af3"+
		"\u0af4\5\u00c4c\2\u0af4\u0afa\3\2\2\2\u0af5\u0af6\7\u012f\2\2\u0af6\u0af7"+
		"\7\u0130\2\2\u0af7\u0af8\7\u00aa\2\2\u0af8\u0afa\5\u00fc\177\2\u0af9\u088a"+
		"\3\2\2\2\u0af9\u088b\3\2\2\2\u0af9\u088c\3\2\2\2\u0af9\u08a3\3\2\2\2\u0af9"+
		"\u08a5\3\2\2\2\u0af9\u08aa\3\2\2\2\u0af9\u08b6\3\2\2\2\u0af9\u08c0\3\2"+
		"\2\2\u0af9\u08c7\3\2\2\2\u0af9\u08f3\3\2\2\2\u0af9\u0928\3\2\2\2\u0af9"+
		"\u092b\3\2\2\2\u0af9\u0938\3\2\2\2\u0af9\u0942\3\2\2\2\u0af9\u094a\3\2"+
		"\2\2\u0af9\u0957\3\2\2\2\u0af9\u095e\3\2\2\2\u0af9\u095f\3\2\2\2\u0af9"+
		"\u0969\3\2\2\2\u0af9\u0972\3\2\2\2\u0af9\u098a\3\2\2\2\u0af9\u099e\3\2"+
		"\2\2\u0af9\u09b0\3\2\2\2\u0af9\u09bb\3\2\2\2\u0af9\u09ce\3\2\2\2\u0af9"+
		"\u09e8\3\2\2\2\u0af9\u09f2\3\2\2\2\u0af9\u09f9\3\2\2\2\u0af9\u0a08\3\2"+
		"\2\2\u0af9\u0a21\3\2\2\2\u0af9\u0a3b\3\2\2\2\u0af9\u0a44\3\2\2\2\u0af9"+
		"\u0a59\3\2\2\2\u0af9\u0a5d\3\2\2\2\u0af9\u0a61\3\2\2\2\u0af9\u0a6f\3\2"+
		"\2\2\u0af9\u0a7d\3\2\2\2\u0af9\u0a8b\3\2\2\2\u0af9\u0a91\3\2\2\2\u0af9"+
		"\u0a95\3\2\2\2\u0af9\u0a99\3\2\2\2\u0af9\u0aa0\3\2\2\2\u0af9\u0aa2\3\2"+
		"\2\2\u0af9\u0aa4\3\2\2\2\u0af9\u0aa6\3\2\2\2\u0af9\u0aa8\3\2\2\2\u0af9"+
		"\u0aab\3\2\2\2\u0af9\u0ab1\3\2\2\2\u0af9\u0ab4\3\2\2\2\u0af9\u0ac0\3\2"+
		"\2\2\u0af9\u0ac5\3\2\2\2\u0af9\u0aca\3\2\2\2\u0af9\u0acf\3\2\2\2\u0af9"+
		"\u0ad2\3\2\2\2\u0af9\u0adf\3\2\2\2\u0af9\u0ae2\3\2\2\2\u0af9\u0ae5\3\2"+
		"\2\2\u0af9\u0ae8\3\2\2\2\u0af9\u0af5\3\2\2\2\u0afaE\3\2\2\2\u0afb\u0afc"+
		"\7X\2\2\u0afc\u0afe\7\\\2\2\u0afd\u0aff\7\u00aa\2\2\u0afe\u0afd\3\2\2"+
		"\2\u0afe\u0aff\3\2\2\2\u0aff\u0b00\3\2\2\2\u0b00\u0b02\5\u00fc\177\2\u0b01"+
		"\u0b03\5\u00fe\u0080\2\u0b02\u0b01\3\2\2\2\u0b02\u0b03\3\2\2\2\u0b03\u0b06"+
		"\3\2\2\2\u0b04\u0b05\7\u0085\2\2\u0b05\u0b07\5\u00b8]\2\u0b06\u0b04\3"+
		"\2\2\2\u0b06\u0b07\3\2\2\2\u0b07\u0b09\3\2\2\2\u0b08\u0b0a\5\u00aeX\2"+
		"\u0b09\u0b08\3\2\2\2\u0b09\u0b0a\3\2\2\2\u0b0a\u0b0b\3\2\2\2\u0b0b\u0b0c"+
		"\5\u008eH\2\u0b0c\u0b31\3\2\2\2\u0b0d\u0b0e\6$\t\2\u0b0e\u0b15\7X\2\2"+
		"\u0b0f\u0b11\7\\\2\2\u0b10\u0b12\7\u00aa\2\2\u0b11\u0b10\3\2\2\2\u0b11"+
		"\u0b12\3\2\2\2\u0b12\u0b16\3\2\2\2\u0b13\u0b14\7\u0084\2\2\u0b14\u0b16"+
		"\7\u00aa\2\2\u0b15\u0b0f\3\2\2\2\u0b15\u0b13\3\2\2\2\u0b16\u0b17\3\2\2"+
		"\2\u0b17\u0b1a\5\u00fc\177\2\u0b18\u0b19\7\u0085\2\2\u0b19\u0b1b\5\u00b8"+
		"]\2\u0b1a\u0b18\3\2\2\2\u0b1a\u0b1b\3\2\2\2\u0b1b\u0b1d\3\2\2\2\u0b1c"+
		"\u0b1e\5\u00aeX\2\u0b1d\u0b1c\3\2\2\2\u0b1d\u0b1e\3\2\2\2\u0b1e\u0b1f"+
		"\3\2\2\2\u0b1f\u0b20\5H%\2\u0b20\u0b31\3\2\2\2\u0b21\u0b22\6$\n\2\u0b22"+
		"\u0b23\7X\2\2\u0b23\u0b25\7\\\2\2\u0b24\u0b26\7\u00aa\2\2\u0b25\u0b24"+
		"\3\2\2\2\u0b25\u0b26\3\2\2\2\u0b26\u0b27\3\2\2\2\u0b27\u0b29\5\u00fc\177"+
		"\2\u0b28\u0b2a\7\u0137\2\2\u0b29\u0b28\3\2\2\2\u0b29\u0b2a\3\2\2\2\u0b2a"+
		"\u0b2c\3\2\2\2\u0b2b\u0b2d\5\u00aeX\2\u0b2c\u0b2b\3\2\2\2\u0b2c\u0b2d"+
		"\3\2\2\2\u0b2d\u0b2e\3\2\2\2\u0b2e\u0b2f\5H%\2\u0b2f\u0b31\3\2\2\2\u0b30"+
		"\u0afb\3\2\2\2\u0b30\u0b0d\3\2\2\2\u0b30\u0b21\3\2\2\2\u0b31G\3\2\2\2"+
		"\u0b32\u0b34\5J&\2\u0b33\u0b32\3\2\2\2\u0b33\u0b34\3\2\2\2\u0b34\u0b35"+
		"\3\2\2\2\u0b35\u0b36\5\u0086D\2\u0b36I\3\2\2\2\u0b37\u0b39\7\u00c5\2\2"+
		"\u0b38\u0b3a\7\u0090\2\2\u0b39\u0b38\3\2\2\2\u0b39\u0b3a\3\2\2\2\u0b3a"+
		"\u0b3b\3\2\2\2\u0b3b\u0b40\5\u009aN\2\u0b3c\u0b3d\7\5\2\2\u0b3d\u0b3f"+
		"\5\u009aN\2\u0b3e\u0b3c\3\2\2\2\u0b3f\u0b42\3\2\2\2\u0b40\u0b3e\3\2\2"+
		"\2\u0b40\u0b41\3\2\2\2\u0b41K\3\2\2\2\u0b42\u0b40\3\2\2\2\u0b43\u0b44"+
		"\6\'\13\2\u0b44\u0b45\7#\2\2\u0b45\u0b46\7{\2\2\u0b46\u0b47\7\u00aa\2"+
		"\2\u0b47\u0b48\5\u00fc\177\2\u0b48\u0b49\7^\2\2\u0b49\u0b4a\5\u00ceh\2"+
		"\u0b4a\u0b54\3\2\2\2\u0b4b\u0b4c\6\'\f\2\u0b4c\u0b4d\7#\2\2\u0b4d\u0b4e"+
		"\7{\2\2\u0b4e\u0b4f\7!\2\2\u0b4f\u0b50\5\u00fc\177\2\u0b50\u0b51\7^\2"+
		"\2\u0b51\u0b52\5\u00ceh\2\u0b52\u0b54\3\2\2\2\u0b53\u0b43\3\2\2\2\u0b53"+
		"\u0b4b\3\2\2\2\u0b54M\3\2\2\2\u0b55\u0b56\6(\r\2\u0b56\u0b5e\5Z.\2\u0b57"+
		"\u0b58\6(\16\2\u0b58\u0b5e\5b\62\2\u0b59\u0b5a\6(\17\2\u0b5a\u0b5e\5^"+
		"\60\2\u0b5b\u0b5c\6(\20\2\u0b5c\u0b5e\5f\64\2\u0b5d\u0b55\3\2\2\2\u0b5d"+
		"\u0b57\3\2\2\2\u0b5d\u0b59\3\2\2\2\u0b5d\u0b5b\3\2\2\2\u0b5eO\3\2\2\2"+
		"\u0b5f\u0b60\6)\21\2\u0b60\u0b61\7\u0085\2\2\u0b61\u0b62\7\33\2\2\u0b62"+
		"\u0b63\7\u008e\2\2\u0b63\u0b64\5\u00aeX\2\u0b64\u0b65\7\4\2\2\u0b65\u0b69"+
		"\7\u016f\2\2\u0b66\u0b6a\5\u00ceh\2\u0b67\u0b6a\5\u00fe\u0080\2\u0b68"+
		"\u0b6a\5\u0102\u0082\2\u0b69\u0b66\3\2\2\2\u0b69\u0b67\3\2\2\2\u0b69\u0b68"+
		"\3\2\2\2\u0b6a\u0b6b\3\2\2\2\u0b6b\u0b6f\7\u0170\2\2\u0b6c\u0b70\5\u00ce"+
		"h\2\u0b6d\u0b70\5\u00fe\u0080\2\u0b6e\u0b70\5\u0102\u0082\2\u0b6f\u0b6c"+
		"\3\2\2\2\u0b6f\u0b6d\3\2\2\2\u0b6f\u0b6e\3\2\2\2\u0b70\u0b71\3\2\2\2\u0b71"+
		"\u0b72\7\6\2\2\u0b72Q\3\2\2\2\u0b73\u0b74\6*\22\2\u0b74\u0b75\7\60\2\2"+
		"\u0b75\u0b76\7\u0171\2\2\u0b76\u0b77\7\u0106\2\2\u0b77\u0b78\7\u0172\2"+
		"\2\u0b78\u0b79\7\u0106\2\2\u0b79S\3\2\2\2\u0b7a\u0b7b\6+\23\2\u0b7b\u0b7c"+
		"\7{\2\2\u0b7c\u0b7d\7$\2\2\u0b7d\u0b7e\t\24\2\2\u0b7e\u0b7f\7\u009b\2"+
		"\2\u0b7fU\3\2\2\2\u0b80\u0b81\6,\24\2\u0b81\u0b82\7\u00b5\2\2\u0b82\u0b83"+
		"\7\u019a\2\2\u0b83\u0b96\5\u00c4c\2\u0b84\u0b88\6,\25\2\u0b85\u0b86\7"+
		"\u013c\2\2\u0b86\u0b87\7\u019a\2\2\u0b87\u0b89\5\u00c4c\2\u0b88\u0b85"+
		"\3\2\2\2\u0b88\u0b89\3\2\2\2\u0b89\u0b8d\3\2\2\2\u0b8a\u0b8b\7\u013b\2"+
		"\2\u0b8b\u0b8c\7\u019a\2\2\u0b8c\u0b8e\5\u0102\u0082\2\u0b8d\u0b8a\3\2"+
		"\2\2\u0b8d\u0b8e\3\2\2\2\u0b8e\u0b93\3\2\2\2\u0b8f\u0b90\7\u00ce\2\2\u0b90"+
		"\u0b91\7\u013d\2\2\u0b91\u0b92\7\u019a\2\2\u0b92\u0b94\5\u00fe\u0080\2"+
		"\u0b93\u0b8f\3\2\2\2\u0b93\u0b94\3\2\2\2\u0b94\u0b96\3\2\2\2\u0b95\u0b80"+
		"\3\2\2\2\u0b95\u0b84\3\2\2\2\u0b96W\3\2\2\2\u0b97\u0b9e\6-\26\2\u0b98"+
		"\u0b99\7\u013e\2\2\u0b99\u0b9a\7\4\2\2\u0b9a\u0b9b\7\u01af\2\2\u0b9b\u0b9c"+
		"\7\5\2\2\u0b9c\u0b9d\7\u01af\2\2\u0b9d\u0b9f\7\6\2\2\u0b9e\u0b98\3\2\2"+
		"\2\u0b9e\u0b9f\3\2\2\2\u0b9f\u0ba3\3\2\2\2\u0ba0\u0ba1\7\u013c\2\2\u0ba1"+
		"\u0ba2\7\u019a\2\2\u0ba2\u0ba4\7\u013f\2\2\u0ba3\u0ba0\3\2\2\2\u0ba3\u0ba4"+
		"\3\2\2\2\u0ba4\u0bac\3\2\2\2\u0ba5\u0bad\7\u0140\2\2\u0ba6\u0ba7\78\2"+
		"\2\u0ba7\u0ba8\7\33\2\2\u0ba8\u0ba9\7\4\2\2\u0ba9\u0baa\5\u00ceh\2\u0baa"+
		"\u0bab\7\6\2\2\u0bab\u0bad\3\2\2\2\u0bac\u0ba5\3\2\2\2\u0bac\u0ba6\3\2"+
		"\2\2\u0bac\u0bad\3\2\2\2\u0bad\u0baf\3\2\2\2\u0bae\u0bb0\7\u0141\2\2\u0baf"+
		"\u0bae\3\2\2\2\u0baf\u0bb0\3\2\2\2\u0bb0\u0bb5\3\2\2\2\u0bb1\u0bb2\7\u00ce"+
		"\2\2\u0bb2\u0bb3\7\u013d\2\2\u0bb3\u0bb4\7\u019a\2\2\u0bb4\u0bb6\5\u00fe"+
		"\u0080\2\u0bb5\u0bb1\3\2\2\2\u0bb5\u0bb6\3\2\2\2\u0bb6\u0bba\3\2\2\2\u0bb7"+
		"\u0bb8\7\u00cf\2\2\u0bb8\u0bb9\7\u019a\2\2\u0bb9\u0bbb\5\u00ceh\2\u0bba"+
		"\u0bb7\3\2\2\2\u0bba\u0bbb\3\2\2\2\u0bbb\u0bc0\3\2\2\2\u0bbc\u0bbd\7\u0146"+
		"\2\2\u0bbd\u0bbe\7{\2\2\u0bbe\u0bbf\7\u0147\2\2\u0bbf\u0bc1\5\u00fe\u0080"+
		"\2\u0bc0\u0bbc\3\2\2\2\u0bc0\u0bc1\3\2\2\2\u0bc1Y\3\2\2\2\u0bc2\u0bc3"+
		"\7\u0085\2\2\u0bc3\u0bc4\7\33\2\2\u0bc4\u0bc5\7\u008e\2\2\u0bc5\u0bc6"+
		"\5\u00aeX\2\u0bc6\u0bc7\7\4\2\2\u0bc7\u0bcc\5\\/\2\u0bc8\u0bc9\7\5\2\2"+
		"\u0bc9\u0bcb\5\\/\2\u0bca\u0bc8\3\2\2\2\u0bcb\u0bce\3\2\2\2\u0bcc\u0bca"+
		"\3\2\2\2\u0bcc\u0bcd\3\2\2\2\u0bcd\u0bcf\3\2\2\2\u0bce\u0bcc\3\2\2\2\u0bcf"+
		"\u0bd0\7\6\2\2\u0bd0[\3\2\2\2\u0bd1\u0bd2\7\u0085\2\2\u0bd2\u0bd3\5\u00fe"+
		"\u0080\2\u0bd3\u0bd4\7\u00c0\2\2\u0bd4\u0bd5\7\u0133\2\2\u0bd5\u0bd6\7"+
		"\u0134\2\2\u0bd6\u0bd9\5\u00bc_\2\u0bd7\u0bd8\7\u00cf\2\2\u0bd8\u0bda"+
		"\5\u00fe\u0080\2\u0bd9\u0bd7\3\2\2\2\u0bd9\u0bda\3\2\2\2\u0bda]\3\2\2"+
		"\2\u0bdb\u0bdc\7\u0085\2\2\u0bdc\u0bdd\7\33\2\2\u0bdd\u0bde\7\u0119\2"+
		"\2\u0bde\u0bdf\5\u00aeX\2\u0bdf\u0be0\7\4\2\2\u0be0\u0be5\5`\61\2\u0be1"+
		"\u0be2\7\5\2\2\u0be2\u0be4\5`\61\2\u0be3\u0be1\3\2\2\2\u0be4\u0be7\3\2"+
		"\2\2\u0be5\u0be3\3\2\2\2\u0be5\u0be6\3\2\2\2\u0be6\u0be8\3\2\2\2\u0be7"+
		"\u0be5\3\2\2\2\u0be8\u0be9\7\6\2\2\u0be9_\3\2\2\2\u0bea\u0beb\t\25\2\2"+
		"\u0beb\u0bec\5\u00fe\u0080\2\u0bec\u0bed\7\u00c0\2\2\u0bed\u0bf0\5\u00bc"+
		"_\2\u0bee\u0bef\7\u00cf\2\2\u0bef\u0bf1\5\u00fe\u0080\2\u0bf0\u0bee\3"+
		"\2\2\2\u0bf0\u0bf1\3\2\2\2\u0bf1a\3\2\2\2\u0bf2\u0bf3\7\u0085\2\2\u0bf3"+
		"\u0bf4\7\33\2\2\u0bf4\u0bf5\7\u0135\2\2\u0bf5\u0bf6\5\u00aeX\2\u0bf6\u0bf7"+
		"\7\4\2\2\u0bf7\u0bfc\5d\63\2\u0bf8\u0bf9\7\5\2\2\u0bf9\u0bfb\5d\63\2\u0bfa"+
		"\u0bf8\3\2\2\2\u0bfb\u0bfe\3\2\2\2\u0bfc\u0bfa\3\2\2\2\u0bfc\u0bfd\3\2"+
		"\2\2\u0bfd\u0bff\3\2\2\2\u0bfe\u0bfc\3\2\2\2\u0bff\u0c00\7\6\2\2\u0c00"+
		"c\3\2\2\2\u0c01\u0c02\t\25\2\2\u0c02\u0c05\5\u00fe\u0080\2\u0c03\u0c04"+
		"\7\u00cf\2\2\u0c04\u0c06\5\u00fe\u0080\2\u0c05\u0c03\3\2\2\2\u0c05\u0c06"+
		"\3\2\2\2\u0c06\u0c0f\3\2\2\2\u0c07\u0c08\t\26\2\2\u0c08\u0c0c\5\u0102"+
		"\u0082\2\u0c09\u0c0a\7\u0136\2\2\u0c0a\u0c0b\7T\2\2\u0c0b\u0c0d\5\u00ae"+
		"X\2\u0c0c\u0c09\3\2\2\2\u0c0c\u0c0d\3\2\2\2\u0c0d\u0c0f\3\2\2\2\u0c0e"+
		"\u0c01\3\2\2\2\u0c0e\u0c07\3\2\2\2\u0c0fe\3\2\2\2\u0c10\u0c11\7\u0085"+
		"\2\2\u0c11\u0c12\7\33\2\2\u0c12\u0c13\7\u008e\2\2\u0c13\u0c14\5\u00ae"+
		"X\2\u0c14\u0c15\7\u011a\2\2\u0c15\u0c16\7\33\2\2\u0c16\u0c17\t\27\2\2"+
		"\u0c17\u0c18\5\u00aeX\2\u0c18\u0c19\7\4\2\2\u0c19\u0c1e\5h\65\2\u0c1a"+
		"\u0c1b\7\5\2\2\u0c1b\u0c1d\5h\65\2\u0c1c\u0c1a\3\2\2\2\u0c1d\u0c20\3\2"+
		"\2\2\u0c1e\u0c1c\3\2\2\2\u0c1e\u0c1f\3\2\2\2\u0c1f\u0c21\3\2\2\2\u0c20"+
		"\u0c1e\3\2\2\2\u0c21\u0c22\7\6\2\2\u0c22g\3\2\2\2\u0c23\u0c2f\5\\/\2\u0c24"+
		"\u0c25\7\4\2\2\u0c25\u0c2a\5d\63\2\u0c26\u0c27\7\5\2\2\u0c27\u0c29\5d"+
		"\63\2\u0c28\u0c26\3\2\2\2\u0c29\u0c2c\3\2\2\2\u0c2a\u0c28\3\2\2\2\u0c2a"+
		"\u0c2b\3\2\2\2\u0c2b\u0c2d\3\2\2\2\u0c2c\u0c2a\3\2\2\2\u0c2d\u0c2e\7\6"+
		"\2\2\u0c2e\u0c30\3\2\2\2\u0c2f\u0c24\3\2\2\2\u0c2f\u0c30\3\2\2\2\u0c30"+
		"\u0c48\3\2\2\2\u0c31\u0c3d\5\\/\2\u0c32\u0c33\7\4\2\2\u0c33\u0c38\5`\61"+
		"\2\u0c34\u0c35\7\5\2\2\u0c35\u0c37\5`\61\2\u0c36\u0c34\3\2\2\2\u0c37\u0c3a"+
		"\3\2\2\2\u0c38\u0c36\3\2\2\2\u0c38\u0c39\3\2\2\2\u0c39\u0c3b\3\2\2\2\u0c3a"+
		"\u0c38\3\2\2\2\u0c3b\u0c3c\7\6\2\2\u0c3c\u0c3e\3\2\2\2\u0c3d\u0c32\3\2"+
		"\2\2\u0c3d\u0c3e\3\2\2\2\u0c3e\u0c48\3\2\2\2\u0c3f\u0c40\5\\/\2\u0c40"+
		"\u0c41\7\u011b\2\2\u0c41\u0c45\5\u0102\u0082\2\u0c42\u0c43\7\u0136\2\2"+
		"\u0c43\u0c44\7T\2\2\u0c44\u0c46\5\u00aeX\2\u0c45\u0c42\3\2\2\2\u0c45\u0c46"+
		"\3\2\2\2\u0c46\u0c48\3\2\2\2\u0c47\u0c23\3\2\2\2\u0c47\u0c31\3\2\2\2\u0c47"+
		"\u0c3f\3\2\2\2\u0c48i\3\2\2\2\u0c49\u0c4b\7&\2\2\u0c4a\u0c4c\5\u00fe\u0080"+
		"\2\u0c4b\u0c4a\3\2\2\2\u0c4b\u0c4c\3\2\2\2\u0c4c\u0c4d\3\2\2\2\u0c4d\u0c4e"+
		"\7\u00d3\2\2\u0c4e\u0c4f\7\u00d4\2\2\u0c4f\u0c6b\5\u00aeX\2\u0c50\u0c52"+
		"\7&\2\2\u0c51\u0c53\5\u00fe\u0080\2\u0c52\u0c51\3\2\2\2\u0c52\u0c53\3"+
		"\2\2\2\u0c53\u0c54\3\2\2\2\u0c54\u0c55\7\u0128\2\2\u0c55\u0c6b\5\u00ae"+
		"X\2\u0c56\u0c58\7&\2\2\u0c57\u0c59\5\u00fe\u0080\2\u0c58\u0c57\3\2\2\2"+
		"\u0c58\u0c59\3\2\2\2\u0c59\u0c5a\3\2\2\2\u0c5a\u0c5b\7\u00d7\2\2\u0c5b"+
		"\u0c5c\7\u00d4\2\2\u0c5c\u0c5d\5\u00aeX\2\u0c5d\u0c5e\7\u00d8\2\2\u0c5e"+
		"\u0c5f\5\u00fc\177\2\u0c5f\u0c60\5\u00aeX\2\u0c60\u0c6b\3\2\2\2\u0c61"+
		"\u0c63\7&\2\2\u0c62\u0c64\5\u00fe\u0080\2\u0c63\u0c62\3\2\2\2\u0c63\u0c64"+
		"\3\2\2\2\u0c64\u0c65\3\2\2\2\u0c65\u0c66\7\u0127\2\2\u0c66\u0c67\7\4\2"+
		"\2\u0c67\u0c68\5\u00bc_\2\u0c68\u0c69\7\6\2\2\u0c69\u0c6b\3\2\2\2\u0c6a"+
		"\u0c49\3\2\2\2\u0c6a\u0c50\3\2\2\2\u0c6a\u0c56\3\2\2\2\u0c6a\u0c61\3\2"+
		"\2\2\u0c6bk\3\2\2\2\u0c6c\u0c6d\7\u0108\2\2\u0c6d\u0c6e\5\u00fc\177\2"+
		"\u0c6e\u0c6f\5\u00b2Z\2\u0c6fm\3\2\2\2\u0c70\u0c71\7\u00d4\2\2\u0c71\u0c72"+
		"\5\u00fc\177\2\u0c72\u0c73\5\u00b2Z\2\u0c73\u0c74\7\u00be\2\2\u0c74\u0c75"+
		"\7\u0135\2\2\u0c75\u0c76\t\2\2\2\u0c76o\3\2\2\2\u0c77\u0c80\5v<\2\u0c78"+
		"\u0c80\5\u0080A\2\u0c79\u0c7a\69\27\2\u0c7a\u0c80\5n8\2\u0c7b\u0c7c\6"+
		"9\30\2\u0c7c\u0c80\5j\66\2\u0c7d\u0c7e\69\31\2\u0c7e\u0c80\5l\67\2\u0c7f"+
		"\u0c77\3\2\2\2\u0c7f\u0c78\3\2\2\2\u0c7f\u0c79\3\2\2\2\u0c7f\u0c7b\3\2"+
		"\2\2\u0c7f\u0c7d\3\2\2\2\u0c80q\3\2\2\2\u0c81\u0c86\5p9\2\u0c82\u0c83"+
		"\7\5\2\2\u0c83\u0c85\5p9\2\u0c84\u0c82\3\2\2\2\u0c85\u0c88\3\2\2\2\u0c86"+
		"\u0c84\3\2\2\2\u0c86\u0c87\3\2\2\2\u0c87s\3\2\2\2\u0c88\u0c86\3\2\2\2"+
		"\u0c89\u0c8b\5~@\2\u0c8a\u0c89\3\2\2\2\u0c8a\u0c8b\3\2\2\2\u0c8b\u0c99"+
		"\3\2\2\2\u0c8c\u0c8d\5~@\2\u0c8d\u0c8e\5~@\2\u0c8e\u0c99\3\2\2\2\u0c8f"+
		"\u0c90\5~@\2\u0c90\u0c91\5~@\2\u0c91\u0c92\5~@\2\u0c92\u0c99\3\2\2\2\u0c93"+
		"\u0c94\5~@\2\u0c94\u0c95\5~@\2\u0c95\u0c96\5~@\2\u0c96\u0c97\5~@\2\u0c97"+
		"\u0c99\3\2\2\2\u0c98\u0c8a\3\2\2\2\u0c98\u0c8c\3\2\2\2\u0c98\u0c8f\3\2"+
		"\2\2\u0c98\u0c93\3\2\2\2\u0c99u\3\2\2\2\u0c9a\u0c9b\5\u00fe\u0080\2\u0c9b"+
		"\u0c9c\5\u00dep\2\u0c9c\u0ca8\5t;\2\u0c9d\u0ca6\7\u00ce\2\2\u0c9e\u0ca7"+
		"\5\u00ceh\2\u0c9f\u0ca7\5\u00fe\u0080\2\u0ca0\u0ca7\5\u0102\u0082\2\u0ca1"+
		"\u0ca7\7x\2\2\u0ca2\u0ca3\7.\2\2\u0ca3\u0ca4\7{\2\2\u0ca4\u0ca5\7\u00b7"+
		"\2\2\u0ca5\u0ca7\7.\2\2\u0ca6\u0c9e\3\2\2\2\u0ca6\u0c9f\3\2\2\2\u0ca6"+
		"\u0ca0\3\2\2\2\u0ca6\u0ca1\3\2\2\2\u0ca6\u0ca2\3\2\2\2\u0ca7\u0ca9\3\2"+
		"\2\2\u0ca8\u0c9d\3\2\2\2\u0ca8\u0ca9\3\2\2\2\u0ca9\u0cab\3\2\2\2\u0caa"+
		"\u0cac\5|?\2\u0cab\u0caa\3\2\2\2\u0cab\u0cac\3\2\2\2\u0cac\u0cae\3\2\2"+
		"\2\u0cad\u0caf\5x=\2\u0cae\u0cad\3\2\2\2\u0cae\u0caf\3\2\2\2\u0caf\u0cb1"+
		"\3\2\2\2\u0cb0\u0cb2\5z>\2\u0cb1\u0cb0\3\2\2\2\u0cb1\u0cb2\3\2\2\2\u0cb2"+
		"\u0cb5\3\2\2\2\u0cb3\u0cb4\7#\2\2\u0cb4\u0cb6\5\u00ceh\2\u0cb5\u0cb3\3"+
		"\2\2\2\u0cb5\u0cb6\3\2\2\2\u0cb6w\3\2\2\2\u0cb7\u0cb8\6=\32\2\u0cb8\u0cb9"+
		"\7\u013b\2\2\u0cb9y\3\2\2\2\u0cba\u0cbb\6>\33\2\u0cbb\u0cbc\7\u013e\2"+
		"\2\u0cbc\u0cbd\7\4\2\2\u0cbd\u0cbe\7\u01af\2\2\u0cbe\u0cbf\7\6\2\2\u0cbf"+
		"{\3\2\2\2\u0cc0\u0cc1\7&\2\2\u0cc1\u0cc3\5\u00fe\u0080\2\u0cc2\u0cc0\3"+
		"\2\2\2\u0cc2\u0cc3\3\2\2\2\u0cc3\u0cc5\3\2\2\2\u0cc4\u0cc6\7w\2\2\u0cc5"+
		"\u0cc4\3\2\2\2\u0cc5\u0cc6\3\2\2\2\u0cc6\u0cc7\3\2\2\2\u0cc7\u0cc8\7x"+
		"\2\2\u0cc8}\3\2\2\2\u0cc9\u0cca\7\u00c5\2\2\u0cca\u0ccc\5\u0082B\2\u0ccb"+
		"\u0cc9\3\2\2\2\u0ccb\u0ccc\3\2\2\2\u0ccc\u0d09\3\2\2\2\u0ccd\u0cce\7&"+
		"\2\2\u0cce\u0cd0\5\u00fe\u0080\2\u0ccf\u0ccd\3\2\2\2\u0ccf\u0cd0\3\2\2"+
		"\2\u0cd0\u0cd2\3\2\2\2\u0cd1\u0cd3\7w\2\2\u0cd2\u0cd1\3\2\2\2\u0cd2\u0cd3"+
		"\3\2\2\2\u0cd3\u0cd4\3\2\2\2\u0cd4\u0d09\7x\2\2\u0cd5\u0cd6\6@\34\2\u0cd6"+
		"\u0cd7\7&\2\2\u0cd7\u0cd8\5\u00fe\u0080\2\u0cd8\u0cd9\7\u00d3\2\2\u0cd9"+
		"\u0cda\7\u00d4\2\2\u0cda\u0cdb\7\u00be\2\2\u0cdb\u0cdc\7\u0108\2\2\u0cdc"+
		"\u0cdd\7\u00cf\2\2\u0cdd\u0cde\5\u00fe\u0080\2\u0cde\u0d09\3\2\2\2\u0cdf"+
		"\u0ce0\6@\35\2\u0ce0\u0ce1\7&\2\2\u0ce1\u0ce2\5\u00fe\u0080\2\u0ce2\u0ce3"+
		"\7\u0127\2\2\u0ce3\u0ce4\5\u00bc_\2\u0ce4\u0d09\3\2\2\2\u0ce5\u0ce6\6"+
		"@\36\2\u0ce6\u0ce7\7\u0120\2\2\u0ce7\u0d09\5\u0082B\2\u0ce8\u0ceb\6@\37"+
		"\2\u0ce9\u0cea\7&\2\2\u0cea\u0cec\5\u00fe\u0080\2\u0ceb\u0ce9\3\2\2\2"+
		"\u0ceb\u0cec\3\2\2\2\u0cec\u0ced\3\2\2\2\u0ced\u0d09\7\u0128\2\2\u0cee"+
		"\u0cf1\6@ \2\u0cef\u0cf0\7&\2\2\u0cf0\u0cf2\5\u00fe\u0080\2\u0cf1\u0cef"+
		"\3\2\2\2\u0cf1\u0cf2\3\2\2\2\u0cf2\u0cf3\3\2\2\2\u0cf3\u0cf4\7\u00d3\2"+
		"\2\u0cf4\u0d09\7\u00d4\2\2\u0cf5\u0cf8\6@!\2\u0cf6\u0cf7\7&\2\2\u0cf7"+
		"\u0cf9\5\u00fe\u0080\2\u0cf8\u0cf6\3\2\2\2\u0cf8\u0cf9\3\2\2\2\u0cf9\u0cfa"+
		"\3\2\2\2\u0cfa\u0cfb\7\u00d8\2\2\u0cfb\u0cfc\5\u00fc\177\2\u0cfc\u0cfd"+
		"\5\u00aeX\2\u0cfd\u0d09\3\2\2\2\u0cfe\u0d01\6@\"\2\u0cff\u0d00\7&\2\2"+
		"\u0d00\u0d02\5\u00fe\u0080\2\u0d01\u0cff\3\2\2\2\u0d01\u0d02\3\2\2\2\u0d02"+
		"\u0d03\3\2\2\2\u0d03\u0d04\7\u0127\2\2\u0d04\u0d05\7\4\2\2\u0d05\u0d06"+
		"\5\u00bc_\2\u0d06\u0d07\7\6\2\2\u0d07\u0d09\3\2\2\2\u0d08\u0ccb\3\2\2"+
		"\2\u0d08\u0ccf\3\2\2\2\u0d08\u0cd5\3\2\2\2\u0d08\u0cdf\3\2\2\2\u0d08\u0ce5"+
		"\3\2\2\2\u0d08\u0ce8\3\2\2\2\u0d08\u0cee\3\2\2\2\u0d08\u0cf5\3\2\2\2\u0d08"+
		"\u0cfe\3\2\2\2\u0d09\177\3\2\2\2\u0d0a\u0d0b\7f\2\2\u0d0b\u0d0e\5\u00fc"+
		"\177\2\u0d0c\u0d0d\t\30\2\2\u0d0d\u0d0f\7\u008c\2\2\u0d0e\u0d0c\3\2\2"+
		"\2\u0d0e\u0d0f\3\2\2\2\u0d0f\u0081\3\2\2\2\u0d10\u0d11\7\4\2\2\u0d11\u0d16"+
		"\5\u0084C\2\u0d12\u0d13\7\5\2\2\u0d13\u0d15\5\u0084C\2\u0d14\u0d12\3\2"+
		"\2\2\u0d15\u0d18\3\2\2\2\u0d16\u0d14\3\2\2\2\u0d16\u0d17\3\2\2\2\u0d17"+
		"\u0d19\3\2\2\2\u0d18\u0d16\3\2\2\2\u0d19\u0d1a\7\6\2\2\u0d1a\u0083\3\2"+
		"\2\2\u0d1b\u0d1c\5\u00fe\u0080\2\u0d1c\u0d1d\7\u019a\2\2\u0d1d\u0d1e\5"+
		"\u00b6\\\2\u0d1e\u0085\3\2\2\2\u0d1f\u0d2a\5\u008aF\2\u0d20\u0d21\7\177"+
		"\2\2\u0d21\u0d22\7\33\2\2\u0d22\u0d27\5\u0090I\2\u0d23\u0d24\7\5\2\2\u0d24"+
		"\u0d26\5\u0090I\2\u0d25\u0d23\3\2\2\2\u0d26\u0d29\3\2\2\2\u0d27\u0d25"+
		"\3\2\2\2\u0d27\u0d28\3\2\2\2\u0d28\u0d2b\3\2\2\2\u0d29\u0d27\3\2\2\2\u0d2a"+
		"\u0d20\3\2\2\2\u0d2a\u0d2b\3\2\2\2\u0d2b\u0d36\3\2\2\2\u0d2c\u0d2d\7\u00cc"+
		"\2\2\u0d2d\u0d2e\7\33\2\2\u0d2e\u0d33\5\u0090I\2\u0d2f\u0d30\7\5\2\2\u0d30"+
		"\u0d32\5\u0090I\2\u0d31\u0d2f\3\2\2\2\u0d32\u0d35\3\2\2\2\u0d33\u0d31"+
		"\3\2\2\2\u0d33\u0d34\3\2\2\2\u0d34\u0d37\3\2\2\2\u0d35\u0d33\3\2\2\2\u0d36"+
		"\u0d2c\3\2\2\2\u0d36\u0d37\3\2\2\2\u0d37\u0d42\3\2\2\2\u0d38\u0d39\78"+
		"\2\2\u0d39\u0d3a\7\33\2\2\u0d3a\u0d3f\5\u0090I\2\u0d3b\u0d3c\7\5\2\2\u0d3c"+
		"\u0d3e\5\u0090I\2\u0d3d\u0d3b\3\2\2\2\u0d3e\u0d41\3\2\2\2\u0d3f\u0d3d"+
		"\3\2\2\2\u0d3f\u0d40\3\2\2\2\u0d40\u0d43\3\2\2\2\u0d41\u0d3f\3\2\2\2\u0d42"+
		"\u0d38\3\2\2\2\u0d42\u0d43\3\2\2\2\u0d43\u0d46\3\2\2\2\u0d44\u0d45\7g"+
		"\2\2\u0d45\u0d47\5\u0088E\2\u0d46\u0d44\3\2\2\2\u0d46\u0d47\3\2\2\2\u0d47"+
		"\u0d4e\3\2\2\2\u0d48\u0d49\7\u0131\2\2\u0d49\u0d4a\7E\2\2\u0d4a\u0d4b"+
		"\5\u0102\u0082\2\u0d4b\u0d4c\7\u009b\2\2\u0d4c\u0d4d\7|\2\2\u0d4d\u0d4f"+
		"\3\2\2\2\u0d4e\u0d48\3\2\2\2\u0d4e\u0d4f\3\2\2\2\u0d4f\u0087\3\2\2\2\u0d50"+
		"\u0d53\t\31\2\2\u0d51\u0d52\7\u00cd\2\2\u0d52\u0d54\7\u01af\2\2\u0d53"+
		"\u0d51\3\2\2\2\u0d53\u0d54\3\2\2\2\u0d54\u0d59\3\2\2\2\u0d55\u0d56\7\u01af"+
		"\2\2\u0d56\u0d57\7\5\2\2\u0d57\u0d59\7\u01af\2\2\u0d58\u0d50\3\2\2\2\u0d58"+
		"\u0d55\3\2\2\2\u0d59\u0089\3\2\2\2\u0d5a\u0d5b\bF\1\2\u0d5b\u0d5c\5\u008c"+
		"G\2\u0d5c\u0d6b\3\2\2\2\u0d5d\u0d5e\f\4\2\2\u0d5e\u0d60\t\32\2\2\u0d5f"+
		"\u0d61\5\u009cO\2\u0d60\u0d5f\3\2\2\2\u0d60\u0d61\3\2\2\2\u0d61\u0d62"+
		"\3\2\2\2\u0d62\u0d6a\5\u008aF\5\u0d63\u0d64\f\3\2\2\u0d64\u0d66\t\33\2"+
		"\2\u0d65\u0d67\5\u009cO\2\u0d66\u0d65\3\2\2\2\u0d66\u0d67\3\2\2\2\u0d67"+
		"\u0d68\3\2\2\2\u0d68\u0d6a\5\u008aF\4\u0d69\u0d5d\3\2\2\2\u0d69\u0d63"+
		"\3\2\2\2\u0d6a\u0d6d\3\2\2\2\u0d6b\u0d69\3\2\2\2\u0d6b\u0d6c\3\2\2\2\u0d6c"+
		"\u008b\3\2\2\2\u0d6d\u0d6b\3\2\2\2\u0d6e\u0d76\5\u0092J\2\u0d6f\u0d70"+
		"\7\u00aa\2\2\u0d70\u0d76\5\u00fc\177\2\u0d71\u0d72\7\4\2\2\u0d72\u0d73"+
		"\5\u0086D\2\u0d73\u0d74\7\6\2\2\u0d74\u0d76\3\2\2\2\u0d75\u0d6e\3\2\2"+
		"\2\u0d75\u0d6f\3\2\2\2\u0d75\u0d71\3\2\2\2\u0d76\u008d\3\2\2\2\u0d77\u0d78"+
		"\7\u00c0\2\2\u0d78\u0d7d\5\u00b6\\\2\u0d79\u0d7a\7\5\2\2\u0d7a\u0d7c\5"+
		"\u00b6\\\2\u0d7b\u0d79\3\2\2\2\u0d7c\u0d7f\3\2\2\2\u0d7d\u0d7b\3\2\2\2"+
		"\u0d7d\u0d7e\3\2\2\2\u0d7e\u008f\3\2\2\2\u0d7f\u0d7d\3\2\2\2\u0d80\u0d82"+
		"\5\u00b6\\\2\u0d81\u0d83\t\n\2\2\u0d82\u0d81\3\2\2\2\u0d82\u0d83\3\2\2"+
		"\2\u0d83\u0d86\3\2\2\2\u0d84\u0d85\7z\2\2\u0d85\u0d87\t\34\2\2\u0d86\u0d84"+
		"\3\2\2\2\u0d86\u0d87\3\2\2\2\u0d87\u0091\3\2\2\2\u0d88\u0d8a\t\35\2\2"+
		"\u0d89\u0d8b\5\u009cO\2\u0d8a\u0d89\3\2\2\2\u0d8a\u0d8b\3\2\2\2\u0d8b"+
		"\u0d8c\3\2\2\2\u0d8c\u0d91\5\u009eP\2\u0d8d\u0d8e\7\5\2\2\u0d8e\u0d90"+
		"\5\u009eP\2\u0d8f\u0d8d\3\2\2\2\u0d90\u0d93\3\2\2\2\u0d91\u0d8f\3\2\2"+
		"\2\u0d91\u0d92\3\2\2\2\u0d92\u0d9d\3\2\2\2\u0d93\u0d91\3\2\2\2\u0d94\u0d95"+
		"\7I\2\2\u0d95\u0d9a\5\u00a2R\2\u0d96\u0d97\7\5\2\2\u0d97\u0d99\5\u00a2"+
		"R\2\u0d98\u0d96\3\2\2\2\u0d99\u0d9c\3\2\2\2\u0d9a\u0d98\3\2\2\2\u0d9a"+
		"\u0d9b\3\2\2\2\u0d9b\u0d9e\3\2\2\2\u0d9c\u0d9a\3\2\2\2\u0d9d\u0d94\3\2"+
		"\2\2\u0d9d\u0d9e\3\2\2\2\u0d9e\u0da1\3\2\2\2\u0d9f\u0da0\7\u00c4\2\2\u0da0"+
		"\u0da2\5\u00bc_\2\u0da1\u0d9f\3\2\2\2\u0da1\u0da2\3\2\2\2\u0da2\u0daa"+
		"\3\2\2\2\u0da3\u0da4\7O\2\2\u0da4\u0da5\7\33\2\2\u0da5\u0da8\5\u0094K"+
		"\2\u0da6\u0da7\7\u00c5\2\2\u0da7\u0da9\7\u0099\2\2\u0da8\u0da6\3\2\2\2"+
		"\u0da8\u0da9\3\2\2\2\u0da9\u0dab\3\2\2\2\u0daa\u0da3\3\2\2\2\u0daa\u0dab"+
		"\3\2\2\2\u0dab\u0dae\3\2\2\2\u0dac\u0dad\7Q\2\2\u0dad\u0daf\5\u00bc_\2"+
		"\u0dae\u0dac\3\2\2\2\u0dae\u0daf\3\2\2\2\u0daf\u0093\3\2\2\2\u0db0\u0db2"+
		"\5\u009cO\2\u0db1\u0db0\3\2\2\2\u0db1\u0db2\3\2\2\2\u0db2\u0db3\3\2\2"+
		"\2\u0db3\u0db8\5\u0096L\2\u0db4\u0db5\7\5\2\2\u0db5\u0db7\5\u0096L\2\u0db6"+
		"\u0db4\3\2\2\2\u0db7\u0dba\3\2\2\2\u0db8\u0db6\3\2\2\2\u0db8\u0db9\3\2"+
		"\2\2\u0db9\u0095\3\2\2\2\u0dba\u0db8\3\2\2\2\u0dbb\u0de4\5\u0098M\2\u0dbc"+
		"\u0dbd\7\u0099\2\2\u0dbd\u0dc6\7\4\2\2\u0dbe\u0dc3\5\u00b6\\\2\u0dbf\u0dc0"+
		"\7\5\2\2\u0dc0\u0dc2\5\u00b6\\\2\u0dc1\u0dbf\3\2\2\2\u0dc2\u0dc5\3\2\2"+
		"\2\u0dc3\u0dc1\3\2\2\2\u0dc3\u0dc4\3\2\2\2\u0dc4\u0dc7\3\2\2\2\u0dc5\u0dc3"+
		"\3\2\2\2\u0dc6\u0dbe\3\2\2\2\u0dc6\u0dc7\3\2\2\2\u0dc7\u0dc8\3\2\2\2\u0dc8"+
		"\u0de4\7\6\2\2\u0dc9\u0dca\7)\2\2\u0dca\u0dd3\7\4\2\2\u0dcb\u0dd0\5\u00b6"+
		"\\\2\u0dcc\u0dcd\7\5\2\2\u0dcd\u0dcf\5\u00b6\\\2\u0dce\u0dcc\3\2\2\2\u0dcf"+
		"\u0dd2\3\2\2\2\u0dd0\u0dce\3\2\2\2\u0dd0\u0dd1\3\2\2\2\u0dd1\u0dd4\3\2"+
		"\2\2\u0dd2\u0dd0\3\2\2\2\u0dd3\u0dcb\3\2\2\2\u0dd3\u0dd4\3\2\2\2\u0dd4"+
		"\u0dd5\3\2\2\2\u0dd5\u0de4\7\6\2\2\u0dd6\u0dd7\7P\2\2\u0dd7\u0dd8\7\u00a3"+
		"\2\2\u0dd8\u0dd9\7\4\2\2\u0dd9\u0dde\5\u0098M\2\u0dda\u0ddb\7\5\2\2\u0ddb"+
		"\u0ddd\5\u0098M\2\u0ddc\u0dda\3\2\2\2\u0ddd\u0de0\3\2\2\2\u0dde\u0ddc"+
		"\3\2\2\2\u0dde\u0ddf\3\2\2\2\u0ddf\u0de1\3\2\2\2\u0de0\u0dde\3\2\2\2\u0de1"+
		"\u0de2\7\6\2\2\u0de2\u0de4\3\2\2\2\u0de3\u0dbb\3\2\2\2\u0de3\u0dbc\3\2"+
		"\2\2\u0de3\u0dc9\3\2\2\2\u0de3\u0dd6\3\2\2\2\u0de4\u0097\3\2\2\2\u0de5"+
		"\u0dee\7\4\2\2\u0de6\u0deb\5\u00b6\\\2\u0de7\u0de8\7\5\2\2\u0de8\u0dea"+
		"\5\u00b6\\\2\u0de9\u0de7\3\2\2\2\u0dea\u0ded\3\2\2\2\u0deb\u0de9\3\2\2"+
		"\2\u0deb\u0dec\3\2\2\2\u0dec\u0def\3\2\2\2\u0ded\u0deb\3\2\2\2\u0dee\u0de6"+
		"\3\2\2\2\u0dee\u0def\3\2\2\2\u0def\u0df0\3\2\2\2\u0df0\u0df3\7\6\2\2\u0df1"+
		"\u0df3\5\u00b6\\\2\u0df2\u0de5\3\2\2\2\u0df2\u0df1\3\2\2\2\u0df3\u0099"+
		"\3\2\2\2\u0df4\u0df6\5\u00fe\u0080\2\u0df5\u0df7\5\u00aeX\2\u0df6\u0df5"+
		"\3\2\2\2\u0df6\u0df7\3\2\2\2\u0df7\u0df8\3\2\2\2\u0df8\u0df9\7\26\2\2"+
		"\u0df9\u0dfa\7\4\2\2\u0dfa\u0dfb\5H%\2\u0dfb\u0dfc\7\6\2\2\u0dfc\u009b"+
		"\3\2\2\2\u0dfd\u0dfe\t\36\2\2\u0dfe\u009d\3\2\2\2\u0dff\u0e04\5\u00b6"+
		"\\\2\u0e00\u0e02\7\26\2\2\u0e01\u0e00\3\2\2\2\u0e01\u0e02\3\2\2\2\u0e02"+
		"\u0e03\3\2\2\2\u0e03\u0e05\5\u00a0Q\2\u0e04\u0e01\3\2\2\2\u0e04\u0e05"+
		"\3\2\2\2\u0e05\u0e0e\3\2\2\2\u0e06\u0e07\6P%\2\u0e07\u0e08\5\u00fc\177"+
		"\2\u0e08\u0e09\7\7\2\2\u0e09\u0e0a\7\u01a2\2\2\u0e0a\u0e0e\3\2\2\2\u0e0b"+
		"\u0e0c\6P&\2\u0e0c\u0e0e\7\u01a2\2\2\u0e0d\u0dff\3\2\2\2\u0e0d\u0e06\3"+
		"\2\2\2\u0e0d\u0e0b\3\2\2\2\u0e0e\u009f\3\2\2\2\u0e0f\u0e12\5\u00fe\u0080"+
		"\2\u0e10\u0e12\5\u00ceh\2\u0e11\u0e0f\3\2\2\2\u0e11\u0e10\3\2\2\2\u0e12"+
		"\u00a1\3\2\2\2\u0e13\u0e14\bR\1\2\u0e14\u0e15\5\u00a8U\2\u0e15\u0e30\3"+
		"\2\2\2\u0e16\u0e2c\f\4\2\2\u0e17\u0e18\7(\2\2\u0e18\u0e19\7a\2\2\u0e19"+
		"\u0e2d\5\u00a8U\2\u0e1a\u0e1b\6R(\2\u0e1b\u0e1c\5\u00a4S\2\u0e1c\u0e1d"+
		"\7a\2\2\u0e1d\u0e1f\5\u00a8U\2\u0e1e\u0e20\5\u00a6T\2\u0e1f\u0e1e\3\2"+
		"\2\2\u0e1f\u0e20\3\2\2\2\u0e20\u0e2d\3\2\2\2\u0e21\u0e22\6R)\2\u0e22\u0e23"+
		"\5\u00a4S\2\u0e23\u0e24\7a\2\2\u0e24\u0e25\5\u00a8U\2\u0e25\u0e26\5\u00a6"+
		"T\2\u0e26\u0e2d\3\2\2\2\u0e27\u0e28\7p\2\2\u0e28\u0e29\5\u00a4S\2\u0e29"+
		"\u0e2a\7a\2\2\u0e2a\u0e2b\5\u00a8U\2\u0e2b\u0e2d\3\2\2\2\u0e2c\u0e17\3"+
		"\2\2\2\u0e2c\u0e1a\3\2\2\2\u0e2c\u0e21\3\2\2\2\u0e2c\u0e27\3\2\2\2\u0e2d"+
		"\u0e2f\3\2\2\2\u0e2e\u0e16\3\2\2\2\u0e2f\u0e32\3\2\2\2\u0e30\u0e2e\3\2"+
		"\2\2\u0e30\u0e31\3\2\2\2\u0e31\u00a3\3\2\2\2\u0e32\u0e30\3\2\2\2\u0e33"+
		"\u0e35\7V\2\2\u0e34\u0e33\3\2\2\2\u0e34\u0e35\3\2\2\2\u0e35\u0e47\3\2"+
		"\2\2\u0e36\u0e38\7d\2\2\u0e37\u0e39\7\u00cb\2\2\u0e38\u0e37\3\2\2\2\u0e38"+
		"\u0e39\3\2\2\2\u0e39\u0e3b\3\2\2\2\u0e3a\u0e3c\7\u0081\2\2\u0e3b\u0e3a"+
		"\3\2\2\2\u0e3b\u0e3c\3\2\2\2\u0e3c\u0e47\3\2\2\2\u0e3d\u0e3f\7\u0097\2"+
		"\2\u0e3e\u0e40\7\u0081\2\2\u0e3f\u0e3e\3\2\2\2\u0e3f\u0e40\3\2\2\2\u0e40"+
		"\u0e47\3\2\2\2\u0e41\u0e43\7J\2\2\u0e42\u0e44\7\u0081\2\2\u0e43\u0e42"+
		"\3\2\2\2\u0e43\u0e44\3\2\2\2\u0e44\u0e47\3\2\2\2\u0e45\u0e47\7\u00cb\2"+
		"\2\u0e46\u0e34\3\2\2\2\u0e46\u0e36\3\2\2\2\u0e46\u0e3d\3\2\2\2\u0e46\u0e41"+
		"\3\2\2\2\u0e46\u0e45\3\2\2\2\u0e47\u00a5\3\2\2\2\u0e48\u0e49\7{\2\2\u0e49"+
		"\u0e57\5\u00bc_\2\u0e4a\u0e4b\7\u00be\2\2\u0e4b\u0e4c\7\4\2\2\u0e4c\u0e51"+
		"\5\u00fe\u0080\2\u0e4d\u0e4e\7\5\2\2\u0e4e\u0e50\5\u00fe\u0080\2\u0e4f"+
		"\u0e4d\3\2\2\2\u0e50\u0e53\3\2\2\2\u0e51\u0e4f\3\2\2\2\u0e51\u0e52\3\2"+
		"\2\2\u0e52\u0e54\3\2\2\2\u0e53\u0e51\3\2\2\2\u0e54\u0e55\7\6\2\2\u0e55"+
		"\u0e57\3\2\2\2\u0e56\u0e48\3\2\2\2\u0e56\u0e4a\3\2\2\2\u0e57\u00a7\3\2"+
		"\2\2\u0e58\u0e5f\5\u00acW\2\u0e59\u0e5a\7\u00ac\2\2\u0e5a\u0e5b\5\u00aa"+
		"V\2\u0e5b\u0e5c\7\4\2\2\u0e5c\u0e5d\5\u00b6\\\2\u0e5d\u0e5e\7\6\2\2\u0e5e"+
		"\u0e60\3\2\2\2\u0e5f\u0e59\3\2\2\2\u0e5f\u0e60\3\2\2\2\u0e60\u00a9\3\2"+
		"\2\2\u0e61\u0e62\t\37\2\2\u0e62\u00ab\3\2\2\2\u0e63\u0e6b\5\u00b4[\2\u0e64"+
		"\u0e66\7\26\2\2\u0e65\u0e64\3\2\2\2\u0e65\u0e66\3\2\2\2\u0e66\u0e67\3"+
		"\2\2\2\u0e67\u0e69\5\u00fe\u0080\2\u0e68\u0e6a\5\u00aeX\2\u0e69\u0e68"+
		"\3\2\2\2\u0e69\u0e6a\3\2\2\2\u0e6a\u0e6c\3\2\2\2\u0e6b\u0e65\3\2\2\2\u0e6b"+
		"\u0e6c\3\2\2\2\u0e6c\u00ad\3\2\2\2\u0e6d\u0e6e\7\4\2\2\u0e6e\u0e73\5\u00fe"+
		"\u0080\2\u0e6f\u0e70\7\5\2\2\u0e70\u0e72\5\u00fe\u0080\2\u0e71\u0e6f\3"+
		"\2\2\2\u0e72\u0e75\3\2\2\2\u0e73\u0e71\3\2\2\2\u0e73\u0e74\3\2\2\2\u0e74"+
		"\u0e76\3\2\2\2\u0e75\u0e73\3\2\2\2\u0e76\u0e77\7\6\2\2\u0e77\u00af\3\2"+
		"\2\2\u0e78\u0e79\7\4\2\2\u0e79\u0e7a\5\u0102\u0082\2\u0e7a\u0e7b\7\6\2"+
		"\2\u0e7b\u00b1\3\2\2\2\u0e7c\u0e7d\7\4\2\2\u0e7d\u0e7f\5\u00fe\u0080\2"+
		"\u0e7e\u0e80\5\u00b0Y\2\u0e7f\u0e7e\3\2\2\2\u0e7f\u0e80\3\2\2\2\u0e80"+
		"\u0e88\3\2\2\2\u0e81\u0e82\7\5\2\2\u0e82\u0e84\5\u00fe\u0080\2\u0e83\u0e85"+
		"\5\u00b0Y\2\u0e84\u0e83\3\2\2\2\u0e84\u0e85\3\2\2\2\u0e85\u0e87\3\2\2"+
		"\2\u0e86\u0e81\3\2\2\2\u0e87\u0e8a\3\2\2\2\u0e88\u0e86\3\2\2\2\u0e88\u0e89"+
		"\3\2\2\2\u0e89\u0e8c\3\2\2\2\u0e8a\u0e88\3\2\2\2\u0e8b\u0e8d\t\n\2\2\u0e8c"+
		"\u0e8b\3\2\2\2\u0e8c\u0e8d\3\2\2\2\u0e8d\u0e8e\3\2\2\2\u0e8e\u0e8f\7\6"+
		"\2\2\u0e8f\u00b3\3\2\2\2\u0e90\u0e96\5\u00fc\177\2\u0e91\u0e92\7\u0085"+
		"\2\2\u0e92\u0e93\7\4\2\2\u0e93\u0e94\5\u00fe\u0080\2\u0e94\u0e95\7\6\2"+
		"\2\u0e95\u0e97\3\2\2\2\u0e96\u0e91\3\2\2\2\u0e96\u0e97\3\2\2\2\u0e97\u0eb5"+
		"\3\2\2\2\u0e98\u0e99\7\4\2\2\u0e99\u0e9a\5H%\2\u0e9a\u0e9b\7\6\2\2\u0e9b"+
		"\u0eb5\3\2\2\2\u0e9c\u0e9d\7\u00bc\2\2\u0e9d\u0e9e\7\4\2\2\u0e9e\u0ea3"+
		"\5\u00b6\\\2\u0e9f\u0ea0\7\5\2\2\u0ea0\u0ea2\5\u00b6\\\2\u0ea1\u0e9f\3"+
		"\2\2\2\u0ea2\u0ea5\3\2\2\2\u0ea3\u0ea1\3\2\2\2\u0ea3\u0ea4\3\2\2\2\u0ea4"+
		"\u0ea6\3\2\2\2\u0ea5\u0ea3\3\2\2\2\u0ea6\u0ea9\7\6\2\2\u0ea7\u0ea8\7\u00c5"+
		"\2\2\u0ea8\u0eaa\7\u0080\2\2\u0ea9\u0ea7\3\2\2\2\u0ea9\u0eaa\3\2\2\2\u0eaa"+
		"\u0eb5\3\2\2\2\u0eab\u0eac\7c\2\2\u0eac\u0ead\7\4\2\2\u0ead\u0eae\5H%"+
		"\2\u0eae\u0eaf\7\6\2\2\u0eaf\u0eb5\3\2\2\2\u0eb0\u0eb1\7\4\2\2\u0eb1\u0eb2"+
		"\5\u00a2R\2\u0eb2\u0eb3\7\6\2\2\u0eb3\u0eb5\3\2\2\2\u0eb4\u0e90\3\2\2"+
		"\2\u0eb4\u0e98\3\2\2\2\u0eb4\u0e9c\3\2\2\2\u0eb4\u0eab\3\2\2\2\u0eb4\u0eb0"+
		"\3\2\2\2\u0eb5\u00b5\3\2\2\2\u0eb6\u0eb7\5\u00bc_\2\u0eb7\u00b7\3\2\2"+
		"\2\u0eb8\u0eb9\7\4\2\2\u0eb9\u0ebe\5\u00ba^\2\u0eba\u0ebb\7\5\2\2\u0ebb"+
		"\u0ebd\5\u00ba^\2\u0ebc\u0eba\3\2\2\2\u0ebd\u0ec0\3\2\2\2\u0ebe\u0ebc"+
		"\3\2\2\2\u0ebe\u0ebf\3\2\2\2\u0ebf\u0ec1\3\2\2\2\u0ec0\u0ebe\3\2\2\2\u0ec1"+
		"\u0ec2\7\6\2\2\u0ec2\u00b9\3\2\2\2\u0ec3\u0ec4\5\u00fe\u0080\2\u0ec4\u0ec5"+
		"\7\u019a\2\2\u0ec5\u0ec7\3\2\2\2\u0ec6\u0ec3\3\2\2\2\u0ec6\u0ec7\3\2\2"+
		"\2\u0ec7\u0ec8\3\2\2\2\u0ec8\u0ec9\5\u00c0a\2\u0ec9\u00bb\3\2\2\2\u0eca"+
		"\u0ecb\b_\1\2\u0ecb\u0ecd\5\u00c0a\2\u0ecc\u0ece\5\u00be`\2\u0ecd\u0ecc"+
		"\3\2\2\2\u0ecd\u0ece\3\2\2\2\u0ece\u0ed2\3\2\2\2\u0ecf\u0ed0\7w\2\2\u0ed0"+
		"\u0ed2\5\u00bc_\5\u0ed1\u0eca\3\2\2\2\u0ed1\u0ecf\3\2\2\2\u0ed2\u0edb"+
		"\3\2\2\2\u0ed3\u0ed4\f\4\2\2\u0ed4\u0ed5\7\23\2\2\u0ed5\u0eda\5\u00bc"+
		"_\5\u0ed6\u0ed7\f\3\2\2\u0ed7\u0ed8\7~\2\2\u0ed8\u0eda\5\u00bc_\4\u0ed9"+
		"\u0ed3\3\2\2\2\u0ed9\u0ed6\3\2\2\2\u0eda\u0edd\3\2\2\2\u0edb\u0ed9\3\2"+
		"\2\2\u0edb\u0edc\3\2\2\2\u0edc\u00bd\3\2\2\2\u0edd\u0edb\3\2\2\2\u0ede"+
		"\u0edf\5\u00d2j\2\u0edf\u0ee0\5\u00c0a\2\u0ee0\u0f26\3\2\2\2\u0ee1\u0ee2"+
		"\5\u00d2j\2\u0ee2\u0ee3\5\u00d4k\2\u0ee3\u0ee4\7\4\2\2\u0ee4\u0ee5\5H"+
		"%\2\u0ee5\u0ee6\7\6\2\2\u0ee6\u0f26\3\2\2\2\u0ee7\u0ee9\7w\2\2\u0ee8\u0ee7"+
		"\3\2\2\2\u0ee8\u0ee9\3\2\2\2\u0ee9\u0eea\3\2\2\2\u0eea\u0eeb\7\32\2\2"+
		"\u0eeb\u0eec\5\u00c0a\2\u0eec\u0eed\7\23\2\2\u0eed\u0eee\5\u00c0a\2\u0eee"+
		"\u0f26\3\2\2\2\u0eef\u0ef1\7w\2\2\u0ef0\u0eef\3\2\2\2\u0ef0\u0ef1\3\2"+
		"\2\2\u0ef1\u0ef2\3\2\2\2\u0ef2\u0ef3\7T\2\2\u0ef3\u0ef4\7\4\2\2\u0ef4"+
		"\u0ef9\5\u00b6\\\2\u0ef5\u0ef6\7\5\2\2\u0ef6\u0ef8\5\u00b6\\\2\u0ef7\u0ef5"+
		"\3\2\2\2\u0ef8\u0efb\3\2\2\2\u0ef9\u0ef7\3\2\2\2\u0ef9\u0efa\3\2\2\2\u0efa"+
		"\u0efc\3\2\2\2\u0efb\u0ef9\3\2\2\2\u0efc\u0efd\7\6\2\2\u0efd\u0f26\3\2"+
		"\2\2\u0efe\u0f00\7w\2\2\u0eff\u0efe\3\2\2\2\u0eff\u0f00\3\2\2\2\u0f00"+
		"\u0f01\3\2\2\2\u0f01\u0f02\7T\2\2\u0f02\u0f03\7\4\2\2\u0f03\u0f04\5H%"+
		"\2\u0f04\u0f05\7\6\2\2\u0f05\u0f26\3\2\2\2\u0f06\u0f08\7w\2\2\u0f07\u0f06"+
		"\3\2\2\2\u0f07\u0f08\3\2\2\2\u0f08\u0f09\3\2\2\2\u0f09\u0f0a\7f\2\2\u0f0a"+
		"\u0f0d\5\u00c0a\2\u0f0b\u0f0c\7<\2\2\u0f0c\u0f0e\5\u00c0a\2\u0f0d\u0f0b"+
		"\3\2\2\2\u0f0d\u0f0e\3\2\2\2\u0f0e\u0f26\3\2\2\2\u0f0f\u0f11\7w\2\2\u0f10"+
		"\u0f0f\3\2\2\2\u0f10\u0f11\3\2\2\2\u0f11\u0f12\3\2\2\2\u0f12\u0f13\7\u0189"+
		"\2\2\u0f13\u0f26\5\u00c0a\2\u0f14\u0f16\7w\2\2\u0f15\u0f14\3\2\2\2\u0f15"+
		"\u0f16\3\2\2\2\u0f16\u0f17\3\2\2\2\u0f17\u0f18\7\u018d\2\2\u0f18\u0f26"+
		"\5\u00c0a\2\u0f19\u0f1b\7^\2\2\u0f1a\u0f1c\7w\2\2\u0f1b\u0f1a\3\2\2\2"+
		"\u0f1b\u0f1c\3\2\2\2\u0f1c\u0f1d\3\2\2\2\u0f1d\u0f26\7x\2\2\u0f1e\u0f20"+
		"\7^\2\2\u0f1f\u0f21\7w\2\2\u0f20\u0f1f\3\2\2\2\u0f20\u0f21\3\2\2\2\u0f21"+
		"\u0f22\3\2\2\2\u0f22\u0f23\7\67\2\2\u0f23\u0f24\7I\2\2\u0f24\u0f26\5\u00c0"+
		"a\2\u0f25\u0ede\3\2\2\2\u0f25\u0ee1\3\2\2\2\u0f25\u0ee8\3\2\2\2\u0f25"+
		"\u0ef0\3\2\2\2\u0f25\u0eff\3\2\2\2\u0f25\u0f07\3\2\2\2\u0f25\u0f10\3\2"+
		"\2\2\u0f25\u0f15\3\2\2\2\u0f25\u0f19\3\2\2\2\u0f25\u0f1e\3\2\2\2\u0f26"+
		"\u00bf\3\2\2\2\u0f27\u0f28\ba\1\2\u0f28\u0f34\5\u00c4c\2\u0f29\u0f2a\6"+
		"a,\2\u0f2a\u0f2b\5\u00c4c\2\u0f2b\u0f2c\7\b\2\2\u0f2c\u0f2d\5\u00dep\2"+
		"\u0f2d\u0f34\3\2\2\2\u0f2e\u0f2f\6a-\2\u0f2f\u0f30\7\u018a\2\2\u0f30\u0f34"+
		"\5\u00c4c\2\u0f31\u0f32\t \2\2\u0f32\u0f34\5\u00c0a\7\u0f33\u0f27\3\2"+
		"\2\2\u0f33\u0f29\3\2\2\2\u0f33\u0f2e\3\2\2\2\u0f33\u0f31\3\2\2\2\u0f34"+
		"\u0f47\3\2\2\2\u0f35\u0f36\f\6\2\2\u0f36\u0f37\t!\2\2\u0f37\u0f46\5\u00c0"+
		"a\7\u0f38\u0f39\f\5\2\2\u0f39\u0f3a\t\"\2\2\u0f3a\u0f46\5\u00c0a\6\u0f3b"+
		"\u0f3c\f\4\2\2\u0f3c\u0f3d\5\u00c2b\2\u0f3d\u0f3e\5\u00c0a\5\u0f3e\u0f46"+
		"\3\2\2\2\u0f3f\u0f40\f\3\2\2\u0f40\u0f41\7\u01a6\2\2\u0f41\u0f46\5\u00c0"+
		"a\4\u0f42\u0f43\f\b\2\2\u0f43\u0f44\7\30\2\2\u0f44\u0f46\5\u00d0i\2\u0f45"+
		"\u0f35\3\2\2\2\u0f45\u0f38\3\2\2\2\u0f45\u0f3b\3\2\2\2\u0f45\u0f3f\3\2"+
		"\2\2\u0f45\u0f42\3\2\2\2\u0f46\u0f49\3\2\2\2\u0f47\u0f45\3\2\2\2\u0f47"+
		"\u0f48\3\2\2\2\u0f48\u00c1\3\2\2\2\u0f49\u0f47\3\2\2\2\u0f4a\u0f4b\7\u019c"+
		"\2\2\u0f4b\u0f4f\7\u019c\2\2\u0f4c\u0f4d\7\u019e\2\2\u0f4d\u0f4f\7\u019e"+
		"\2\2\u0f4e\u0f4a\3\2\2\2\u0f4e\u0f4c\3\2\2\2\u0f4f\u00c3\3\2\2\2\u0f50"+
		"\u0f51\bc\1\2\u0f51\u1050\7x\2\2\u0f52\u1050\5\u00d8m\2\u0f53\u1050\5"+
		"\u0102\u0082\2\u0f54\u1050\5\u00d6l\2\u0f55\u1050\5\u00ceh\2\u0f56\u1050"+
		"\7\u01ae\2\2\u0f57\u1050\7\t\2\2\u0f58\u0f59\7\u0088\2\2\u0f59\u0f5a\7"+
		"\4\2\2\u0f5a\u0f5b\5\u00c0a\2\u0f5b\u0f5c\7T\2\2\u0f5c\u0f5d\5\u00c0a"+
		"\2\u0f5d\u0f5e\7\6\2\2\u0f5e\u1050\3\2\2\2\u0f5f\u0f60\7\4\2\2\u0f60\u0f63"+
		"\5\u00b6\\\2\u0f61\u0f62\7\5\2\2\u0f62\u0f64\5\u00b6\\\2\u0f63\u0f61\3"+
		"\2\2\2\u0f64\u0f65\3\2\2\2\u0f65\u0f63\3\2\2\2\u0f65\u0f66\3\2\2\2\u0f66"+
		"\u0f67\3\2\2\2\u0f67\u0f68\7\6\2\2\u0f68\u1050\3\2\2\2\u0f69\u0f6a\7\u009a"+
		"\2\2\u0f6a\u0f6b\7\4\2\2\u0f6b\u0f70\5\u00b6\\\2\u0f6c\u0f6d\7\5\2\2\u0f6d"+
		"\u0f6f\5\u00b6\\\2\u0f6e\u0f6c\3\2\2\2\u0f6f\u0f72\3\2\2\2\u0f70\u0f6e"+
		"\3\2\2\2\u0f70\u0f71\3\2\2\2\u0f71\u0f73\3\2\2\2\u0f72\u0f70\3\2\2\2\u0f73"+
		"\u0f74\7\6\2\2\u0f74\u1050\3\2\2\2\u0f75\u0f76\5\u00fc\177\2\u0f76\u0f77"+
		"\7\4\2\2\u0f77\u0f78\7\u01a2\2\2\u0f78\u0f7a\7\6\2\2\u0f79\u0f7b\5\u00e6"+
		"t\2\u0f7a\u0f79\3\2\2\2\u0f7a\u0f7b\3\2\2\2\u0f7b\u0f7d\3\2\2\2\u0f7c"+
		"\u0f7e\5\u00e8u\2\u0f7d\u0f7c\3\2\2\2\u0f7d\u0f7e\3\2\2\2\u0f7e\u1050"+
		"\3\2\2\2\u0f7f\u0f80\5\u00fc\177\2\u0f80\u0f8c\7\4\2\2\u0f81\u0f83\5\u009c"+
		"O\2\u0f82\u0f81\3\2\2\2\u0f82\u0f83\3\2\2\2\u0f83\u0f84\3\2\2\2\u0f84"+
		"\u0f89\5\u00b6\\\2\u0f85\u0f86\7\5\2\2\u0f86\u0f88\5\u00b6\\\2\u0f87\u0f85"+
		"\3\2\2\2\u0f88\u0f8b\3\2\2\2\u0f89\u0f87\3\2\2\2\u0f89\u0f8a\3\2\2\2\u0f8a"+
		"\u0f8d\3\2\2\2\u0f8b\u0f89\3\2\2\2\u0f8c\u0f82\3\2\2\2\u0f8c\u0f8d\3\2"+
		"\2\2\u0f8d\u0f98\3\2\2\2\u0f8e\u0f8f\7\177\2\2\u0f8f\u0f90\7\33\2\2\u0f90"+
		"\u0f95\5\u0090I\2\u0f91\u0f92\7\5\2\2\u0f92\u0f94\5\u0090I\2\u0f93\u0f91"+
		"\3\2\2\2\u0f94\u0f97\3\2\2\2\u0f95\u0f93\3\2\2\2\u0f95\u0f96\3\2\2\2\u0f96"+
		"\u0f99\3\2\2\2\u0f97\u0f95\3\2\2\2\u0f98\u0f8e\3\2\2\2\u0f98\u0f99\3\2"+
		"\2\2\u0f99\u0f9a\3\2\2\2\u0f9a\u0f9c\7\6\2\2\u0f9b\u0f9d\5\u00e6t\2\u0f9c"+
		"\u0f9b\3\2\2\2\u0f9c\u0f9d\3\2\2\2\u0f9d\u0f9f\3\2\2\2\u0f9e\u0fa0\5\u00e8"+
		"u\2\u0f9f\u0f9e\3\2\2\2\u0f9f\u0fa0\3\2\2\2\u0fa0\u1050\3\2\2\2\u0fa1"+
		"\u0fa2\7h\2\2\u0fa2\u0fa3\7\4\2\2\u0fa3\u0fa6\5\u00b6\\\2\u0fa4\u0fa5"+
		"\7\5\2\2\u0fa5\u0fa7\5\u00c4c\2\u0fa6\u0fa4\3\2\2\2\u0fa6\u0fa7\3\2\2"+
		"\2\u0fa7\u0fa8\3\2\2\2\u0fa8\u0fa9\7\6\2\2\u0fa9\u0faa\7\u00c6\2\2\u0faa"+
		"\u0fab\7O\2\2\u0fab\u0fac\7\4\2\2\u0fac\u0fad\7\177\2\2\u0fad\u0fae\7"+
		"\33\2\2\u0fae\u0faf\5\u00b6\\\2\u0faf\u0fb0\7\6\2\2\u0fb0\u1050\3\2\2"+
		"\2\u0fb1\u0fb2\6c\63\2\u0fb2\u1050\5\u00c6d\2\u0fb3\u0fb4\6c\64\2\u0fb4"+
		"\u1050\5\u00c8e\2\u0fb5\u0fb6\6c\65\2\u0fb6\u0fb7\7*\2\2\u0fb7\u1050\t"+
		"#\2\2\u0fb8\u0fb9\5\u00fe\u0080\2\u0fb9\u0fba\7\n\2\2\u0fba\u0fbb\5\u00b6"+
		"\\\2\u0fbb\u1050\3\2\2\2\u0fbc\u0fc5\7\4\2\2\u0fbd\u0fc2\5\u00fe\u0080"+
		"\2\u0fbe\u0fbf\7\5\2\2\u0fbf\u0fc1\5\u00fe\u0080\2\u0fc0\u0fbe\3\2\2\2"+
		"\u0fc1\u0fc4\3\2\2\2\u0fc2\u0fc0\3\2\2\2\u0fc2\u0fc3\3\2\2\2\u0fc3\u0fc6"+
		"\3\2\2\2\u0fc4\u0fc2\3\2\2\2\u0fc5\u0fbd\3\2\2\2\u0fc5\u0fc6\3\2\2\2\u0fc6"+
		"\u0fc7\3\2\2\2\u0fc7\u0fc8\7\6\2\2\u0fc8\u0fc9\7\n\2\2\u0fc9\u1050\5\u00b6"+
		"\\\2\u0fca\u0fcb\7\4\2\2\u0fcb\u0fcc\5H%\2\u0fcc\u0fcd\7\6\2\2\u0fcd\u1050"+
		"\3\2\2\2\u0fce\u0fcf\7@\2\2\u0fcf\u0fd0\7\4\2\2\u0fd0\u0fd1\5H%\2\u0fd1"+
		"\u0fd2\7\6\2\2\u0fd2\u1050\3\2\2\2\u0fd3\u0fd4\7\36\2\2\u0fd4\u0fd6\5"+
		"\u00c0a\2\u0fd5\u0fd7\5\u00e4s\2\u0fd6\u0fd5\3\2\2\2\u0fd7\u0fd8\3\2\2"+
		"\2\u0fd8\u0fd6\3\2\2\2\u0fd8\u0fd9\3\2\2\2\u0fd9\u0fdc\3\2\2\2\u0fda\u0fdb"+
		"\7:\2\2\u0fdb\u0fdd\5\u00b6\\\2\u0fdc\u0fda\3\2\2\2\u0fdc\u0fdd\3\2\2"+
		"\2\u0fdd\u0fde\3\2\2\2\u0fde\u0fdf\7;\2\2\u0fdf\u1050\3\2\2\2\u0fe0\u0fe2"+
		"\7\36\2\2\u0fe1\u0fe3\5\u00e4s\2\u0fe2\u0fe1\3\2\2\2\u0fe3\u0fe4\3\2\2"+
		"\2\u0fe4\u0fe2\3\2\2\2\u0fe4\u0fe5\3\2\2\2\u0fe5\u0fe8\3\2\2\2\u0fe6\u0fe7"+
		"\7:\2\2\u0fe7\u0fe9\5\u00b6\\\2\u0fe8\u0fe6\3\2\2\2\u0fe8\u0fe9\3\2\2"+
		"\2\u0fe9\u0fea\3\2\2\2\u0fea\u0feb\7;\2\2\u0feb\u1050\3\2\2\2\u0fec\u0fed"+
		"\7\37\2\2\u0fed\u0fee\7\4\2\2\u0fee\u0fef\5\u00b6\\\2\u0fef\u0ff0\7\26"+
		"\2\2\u0ff0\u0ff1\5\u00dep\2\u0ff1\u0ff2\7\6\2\2\u0ff2\u1050\3\2\2\2\u0ff3"+
		"\u0ff4\7\u00b4\2\2\u0ff4\u0ff5\7\4\2\2\u0ff5\u0ff6\5\u00b6\\\2\u0ff6\u0ff7"+
		"\7\26\2\2\u0ff7\u0ff8\5\u00dep\2\u0ff8\u0ff9\7\6\2\2\u0ff9\u1050\3\2\2"+
		"\2\u0ffa\u0ffb\7\25\2\2\u0ffb\u1004\7\13\2\2\u0ffc\u1001\5\u00b6\\\2\u0ffd"+
		"\u0ffe\7\5\2\2\u0ffe\u1000\5\u00b6\\\2\u0fff\u0ffd\3\2\2\2\u1000\u1003"+
		"\3\2\2\2\u1001\u0fff\3\2\2\2\u1001\u1002\3\2\2\2\u1002\u1005\3\2\2\2\u1003"+
		"\u1001\3\2\2\2\u1004\u0ffc\3\2\2\2\u1004\u1005\3\2\2\2\u1005\u1006\3\2"+
		"\2\2\u1006\u1050\7\f\2\2\u1007\u1050\5\u00fe\u0080\2\u1008\u1050\7+\2"+
		"\2\u1009\u100d\7-\2\2\u100a\u100b\7\4\2\2\u100b\u100c\7\u01af\2\2\u100c"+
		"\u100e\7\6\2\2\u100d\u100a\3\2\2\2\u100d\u100e\3\2\2\2\u100e\u1050\3\2"+
		"\2\2\u100f\u1013\7.\2\2\u1010\u1011\7\4\2\2\u1011\u1012\7\u01af\2\2\u1012"+
		"\u1014\7\6\2\2\u1013\u1010\3\2\2\2\u1013\u1014\3\2\2\2\u1014\u1050\3\2"+
		"\2\2\u1015\u1019\7i\2\2\u1016\u1017\7\4\2\2\u1017\u1018\7\u01af\2\2\u1018"+
		"\u101a\7\6\2\2\u1019\u1016\3\2\2\2\u1019\u101a\3\2\2\2\u101a\u1050\3\2"+
		"\2\2\u101b\u101f\7j\2\2\u101c\u101d\7\4\2\2\u101d\u101e\7\u01af\2\2\u101e"+
		"\u1020\7\6\2\2\u101f\u101c\3\2\2\2\u101f\u1020\3\2\2\2\u1020\u1050\3\2"+
		"\2\2\u1021\u1050\7/\2\2\u1022\u1050\7,\2\2\u1023\u1024\7\u00a8\2\2\u1024"+
		"\u1025\7\4\2\2\u1025\u1026\5\u00c0a\2\u1026\u1027\7I\2\2\u1027\u102a\5"+
		"\u00c0a\2\u1028\u1029\7G\2\2\u1029\u102b\5\u00c0a\2\u102a\u1028\3\2\2"+
		"\2\u102a\u102b\3\2\2\2\u102b\u102c\3\2\2\2\u102c\u102d\7\6\2\2\u102d\u1050"+
		"\3\2\2\2\u102e\u102f\7v\2\2\u102f\u1030\7\4\2\2\u1030\u1033\5\u00c0a\2"+
		"\u1031\u1032\7\5\2\2\u1032\u1034\5\u00dco\2\u1033\u1031\3\2\2\2\u1033"+
		"\u1034\3\2\2\2\u1034\u1035\3\2\2\2\u1035\u1036\7\6\2\2\u1036\u1050\3\2"+
		"\2\2\u1037\u1038\7B\2\2\u1038\u1039\7\4\2\2\u1039\u103a\5\u00fe\u0080"+
		"\2\u103a\u103b\7I\2\2\u103b\u103c\5\u00c0a\2\u103c\u103d\7\6\2\2\u103d"+
		"\u1050\3\2\2\2\u103e\u103f\7\4\2\2\u103f\u1040\5\u00b6\\\2\u1040\u1041"+
		"\7\6\2\2\u1041\u1050\3\2\2\2\u1042\u1043\7P\2\2\u1043\u104c\7\4\2\2\u1044"+
		"\u1049\5\u00fc\177\2\u1045\u1046\7\5\2\2\u1046\u1048\5\u00fc\177\2\u1047"+
		"\u1045\3\2\2\2\u1048\u104b\3\2\2\2\u1049\u1047\3\2\2\2\u1049\u104a\3\2"+
		"\2\2\u104a\u104d\3\2\2\2\u104b\u1049\3\2\2\2\u104c\u1044\3\2\2\2\u104c"+
		"\u104d\3\2\2\2\u104d\u104e\3\2\2\2\u104e\u1050\7\6\2\2\u104f\u0f50\3\2"+
		"\2\2\u104f\u0f52\3\2\2\2\u104f\u0f53\3\2\2\2\u104f\u0f54\3\2\2\2\u104f"+
		"\u0f55\3\2\2\2\u104f\u0f56\3\2\2\2\u104f\u0f57\3\2\2\2\u104f\u0f58\3\2"+
		"\2\2\u104f\u0f5f\3\2\2\2\u104f\u0f69\3\2\2\2\u104f\u0f75\3\2\2\2\u104f"+
		"\u0f7f\3\2\2\2\u104f\u0fa1\3\2\2\2\u104f\u0fb1\3\2\2\2\u104f\u0fb3\3\2"+
		"\2\2\u104f\u0fb5\3\2\2\2\u104f\u0fb8\3\2\2\2\u104f\u0fbc\3\2\2\2\u104f"+
		"\u0fca\3\2\2\2\u104f\u0fce\3\2\2\2\u104f\u0fd3\3\2\2\2\u104f\u0fe0\3\2"+
		"\2\2\u104f\u0fec\3\2\2\2\u104f\u0ff3\3\2\2\2\u104f\u0ffa\3\2\2\2\u104f"+
		"\u1007\3\2\2\2\u104f\u1008\3\2\2\2\u104f\u1009\3\2\2\2\u104f\u100f\3\2"+
		"\2\2\u104f\u1015\3\2\2\2\u104f\u101b\3\2\2\2\u104f\u1021\3\2\2\2\u104f"+
		"\u1022\3\2\2\2\u104f\u1023\3\2\2\2\u104f\u102e\3\2\2\2\u104f\u1037\3\2"+
		"\2\2\u104f\u103e\3\2\2\2\u104f\u1042\3\2\2\2\u1050\u1064\3\2\2\2\u1051"+
		"\u1052\f\'\2\2\u1052\u1054\7^\2\2\u1053\u1055\7w\2\2\u1054\u1053\3\2\2"+
		"\2\u1054\u1055\3\2\2\2\u1055\u1056\3\2\2\2\u1056\u1063\t$\2\2\u1057\u1058"+
		"\f\21\2\2\u1058\u1059\7\13\2\2\u1059\u105a\5\u00c0a\2\u105a\u105b\7\f"+
		"\2\2\u105b\u1063\3\2\2\2\u105c\u105d\f\17\2\2\u105d\u105e\7\7\2\2\u105e"+
		"\u1060\5\u00fe\u0080\2\u105f\u1061\5\u00caf\2\u1060\u105f\3\2\2\2\u1060"+
		"\u1061\3\2\2\2\u1061\u1063\3\2\2\2\u1062\u1051\3\2\2\2\u1062\u1057\3\2"+
		"\2\2\u1062\u105c\3\2\2\2\u1063\u1066\3\2\2\2\u1064\u1062\3\2\2\2\u1064"+
		"\u1065\3\2\2\2\u1065\u00c5\3\2\2\2\u1066\u1064\3\2\2\2\u1067\u1068\7\u017a"+
		"\2\2\u1068\u1069\7\4\2\2\u1069\u106a\5\u00b6\\\2\u106a\u106b\7\u017b\2"+
		"\2\u106b\u106c\5\u00b6\\\2\u106c\u106d\7I\2\2\u106d\u106e\5\u00b6\\\2"+
		"\u106e\u106f\7G\2\2\u106f\u1070\5\u00b6\\\2\u1070\u1071\7\6\2\2\u1071"+
		"\u10b4\3\2\2\2\u1072\u1073\7\u017c\2\2\u1073\u1074\7\4\2\2\u1074\u1075"+
		"\7\u017f\2\2\u1075\u1076\5\u00b6\\\2\u1076\u1077\7I\2\2\u1077\u1078\5"+
		"\u00b6\\\2\u1078\u1079\7\6\2\2\u1079\u10b4\3\2\2\2\u107a\u107b\7\u0180"+
		"\2\2\u107b\u107c\7\4\2\2\u107c\u107d\7[\2\2\u107d\u107e\5\u00ceh\2\u107e"+
		"\u107f\7\5\2\2\u107f\u1080\5\u00ceh\2\u1080\u1081\7\6\2\2\u1081\u10b4"+
		"\3\2\2\2\u1082\u1083\7\u0181\2\2\u1083\u1084\7\4\2\2\u1084\u1085\7\u00b0"+
		"\2\2\u1085\u1086\5\u00ceh\2\u1086\u1087\7\5\2\2\u1087\u1088\7\u00b0\2"+
		"\2\u1088\u1089\5\u00ceh\2\u1089\u108a\7\6\2\2\u108a\u10b4\3\2\2\2\u108b"+
		"\u108c\7\u0182\2\2\u108c\u108d\7\4\2\2\u108d\u108e\5\u00ceh\2\u108e\u108f"+
		"\7\5\2\2\u108f\u1090\7\u00b0\2\2\u1090\u1091\5\u00ceh\2\u1091\u1092\7"+
		"\6\2\2\u1092\u10b4\3\2\2\2\u1093\u1094\7B\2\2\u1094\u1095\7\4\2\2\u1095"+
		"\u1096\5\u00b6\\\2\u1096\u1097\7I\2\2\u1097\u1098\7\u00b0\2\2\u1098\u1099"+
		"\5\u00ceh\2\u1099\u109a\7\6\2\2\u109a\u10b4\3\2\2\2\u109b\u109c\7\u0183"+
		"\2\2\u109c\u109d\7\4\2\2\u109d\u109e\7[\2\2\u109e\u109f\5\u00ceh\2\u109f"+
		"\u10a0\7\6\2\2\u10a0\u10b4\3\2\2\2\u10a1\u10a2\7\u0184\2\2\u10a2\u10a3"+
		"\7\4\2\2\u10a3\u10a4\7[\2\2\u10a4\u10a5\5\u00ceh\2\u10a5\u10a6\7\6\2\2"+
		"\u10a6\u10b4\3\2\2\2\u10a7\u10a8\7\u0185\2\2\u10a8\u10a9\7\4\2\2\u10a9"+
		"\u10aa\7[\2\2\u10aa\u10ab\5\u00ceh\2\u10ab\u10ac\7\6\2\2\u10ac\u10b4\3"+
		"\2\2\2\u10ad\u10ae\7\u0186\2\2\u10ae\u10af\7\4\2\2\u10af\u10b0\7[\2\2"+
		"\u10b0\u10b1\5\u00ceh\2\u10b1\u10b2\7\6\2\2\u10b2\u10b4\3\2\2\2\u10b3"+
		"\u1067\3\2\2\2\u10b3\u1072\3\2\2\2\u10b3\u107a\3\2\2\2\u10b3\u1082\3\2"+
		"\2\2\u10b3\u108b\3\2\2\2\u10b3\u1093\3\2\2\2\u10b3\u109b\3\2\2\2\u10b3"+
		"\u10a1\3\2\2\2\u10b3\u10a7\3\2\2\2\u10b3\u10ad\3\2\2\2\u10b4\u00c7\3\2"+
		"\2\2\u10b5\u10b6\t%\2\2\u10b6\u10b7\7\4\2\2\u10b7\u10b8\t&\2\2\u10b8\u10b9"+
		"\5\u00ceh\2\u10b9\u10ba\7I\2\2\u10ba\u10bb\5\u00ceh\2\u10bb\u10bc\7\6"+
		"\2\2\u10bc\u10ca\3\2\2\2\u10bd\u10be\t\'\2\2\u10be\u10bf\7\4\2\2\u10bf"+
		"\u10c0\5\u00ceh\2\u10c0\u10c1\7\5\2\2\u10c1\u10c4\7[\2\2\u10c2\u10c5\5"+
		"\u00ceh\2\u10c3\u10c5\5\u0102\u0082\2\u10c4\u10c2\3\2\2\2\u10c4\u10c3"+
		"\3\2\2\2\u10c5\u10c6\3\2\2\2\u10c6\u10c7\5\u00dan\2\u10c7\u10c8\7\6\2"+
		"\2\u10c8\u10ca\3\2\2\2\u10c9\u10b5\3\2\2\2\u10c9\u10bd\3\2\2\2\u10ca\u00c9"+
		"\3\2\2\2\u10cb\u10cc\6f9\2\u10cc\u10cd\7\4\2\2\u10cd\u10ce\7\u01a0\2\2"+
		"\u10ce\u10cf\7\6\2\2\u10cf\u00cb\3\2\2\2\u10d0\u10d4\5\u00fe\u0080\2\u10d1"+
		"\u10d4\7\u01b9\2\2\u10d2\u10d4\5\u0102\u0082\2\u10d3\u10d0\3\2\2\2\u10d3"+
		"\u10d1\3\2\2\2\u10d3\u10d2\3\2\2\2\u10d4\u10d6\3\2\2\2\u10d5\u10d7\5\u00ce"+
		"h\2\u10d6\u10d5\3\2\2\2\u10d6\u10d7\3\2\2\2\u10d7\u00cd\3\2\2\2\u10d8"+
		"\u10df\7\u01ac\2\2\u10d9\u10dc\7\u01ad\2\2\u10da\u10db\7\u00b8\2\2\u10db"+
		"\u10dd\7\u01ac\2\2\u10dc\u10da\3\2\2\2\u10dc\u10dd\3\2\2\2\u10dd\u10df"+
		"\3\2\2\2\u10de\u10d8\3\2\2\2\u10de\u10d9\3\2\2\2\u10df\u00cf\3\2\2\2\u10e0"+
		"\u10e1\7\u00af\2\2\u10e1\u10e2\7\u00ca\2\2\u10e2\u10e7\5\u00d8m\2\u10e3"+
		"\u10e4\7\u00af\2\2\u10e4\u10e5\7\u00ca\2\2\u10e5\u10e7\5\u00ceh\2\u10e6"+
		"\u10e0\3\2\2\2\u10e6\u10e3\3\2\2\2\u10e7\u00d1\3\2\2\2\u10e8\u10e9\t("+
		"\2\2\u10e9\u00d3\3\2\2\2\u10ea\u10eb\t)\2\2\u10eb\u00d5\3\2\2\2\u10ec"+
		"\u10ed\t*\2\2\u10ed\u00d7\3\2\2\2\u10ee\u10f0\7[\2\2\u10ef\u10f1\t+\2"+
		"\2\u10f0\u10ef\3\2\2\2\u10f0\u10f1\3\2\2\2\u10f1\u10f2\3\2\2\2\u10f2\u10f3"+
		"\5\u00ceh\2\u10f3\u10f6\5\u00dan\2\u10f4\u10f5\7\u00b1\2\2\u10f5\u10f7"+
		"\5\u00dan\2\u10f6\u10f4\3\2\2\2\u10f6\u10f7\3\2\2\2\u10f7\u00d9\3\2\2"+
		"\2\u10f8\u10f9\t,\2\2\u10f9\u00db\3\2\2\2\u10fa\u10fb\t-\2\2\u10fb\u00dd"+
		"\3\2\2\2\u10fc\u10fd\bp\1\2\u10fd\u10fe\7\u0138\2\2\u10fe\u10ff\7\u019c"+
		"\2\2\u10ff\u1104\5\u00fe\u0080\2\u1100\u1101\7\5\2\2\u1101\u1103\5\u00fe"+
		"\u0080\2\u1102\u1100\3\2\2\2\u1103\u1106\3\2\2\2\u1104\u1102\3\2\2\2\u1104"+
		"\u1105\3\2\2\2\u1105\u1107\3\2\2\2\u1106\u1104\3\2\2\2\u1107\u1108\7\u019e"+
		"\2\2\u1108\u1138\3\2\2\2\u1109\u110a\7\25\2\2\u110a\u110b\7\u019c\2\2"+
		"\u110b\u110c\5\u00dep\2\u110c\u110d\7\u019e\2\2\u110d\u1138\3\2\2\2\u110e"+
		"\u110f\7l\2\2\u110f\u1110\7\u019c\2\2\u1110\u1111\5\u00dep\2\u1111\u1112"+
		"\7\5\2\2\u1112\u1113\5\u00dep\2\u1113\u1114\7\u019e\2\2\u1114\u1138\3"+
		"\2\2\2\u1115\u1116\7\u009a\2\2\u1116\u1117\7\4\2\2\u1117\u1118\5\u00fe"+
		"\u0080\2\u1118\u111f\5\u00dep\2\u1119\u111a\7\5\2\2\u111a\u111b\5\u00fe"+
		"\u0080\2\u111b\u111c\5\u00dep\2\u111c\u111e\3\2\2\2\u111d\u1119\3\2\2"+
		"\2\u111e\u1121\3\2\2\2\u111f\u111d\3\2\2\2\u111f\u1120\3\2\2\2\u1120\u1122"+
		"\3\2\2\2\u1121\u111f\3\2\2\2\u1122\u1123\7\6\2\2\u1123\u1138\3\2\2\2\u1124"+
		"\u1130\5\u00e2r\2\u1125\u1126\7\4\2\2\u1126\u112b\5\u00e0q\2\u1127\u1128"+
		"\7\5\2\2\u1128\u112a\5\u00e0q\2\u1129\u1127\3\2\2\2\u112a\u112d\3\2\2"+
		"\2\u112b\u1129\3\2\2\2\u112b\u112c\3\2\2\2\u112c\u112e\3\2\2\2\u112d\u112b"+
		"\3\2\2\2\u112e\u112f\7\6\2\2\u112f\u1131\3\2\2\2\u1130\u1125\3\2\2\2\u1130"+
		"\u1131\3\2\2\2\u1131\u1138\3\2\2\2\u1132\u1133\7[\2\2\u1133\u1134\5\u00da"+
		"n\2\u1134\u1135\7\u00b1\2\2\u1135\u1136\5\u00dan\2\u1136\u1138\3\2\2\2"+
		"\u1137\u10fc\3\2\2\2\u1137\u1109\3\2\2\2\u1137\u110e\3\2\2\2\u1137\u1115"+
		"\3\2\2\2\u1137\u1124\3\2\2\2\u1137\u1132\3\2\2\2\u1138\u113d\3\2\2\2\u1139"+
		"\u113a\f\t\2\2\u113a\u113c\7\25\2\2\u113b\u1139\3\2\2\2\u113c\u113f\3"+
		"\2\2\2\u113d\u113b\3\2\2\2\u113d\u113e\3\2\2\2\u113e\u00df\3\2\2\2\u113f"+
		"\u113d\3\2\2\2\u1140\u1143\7\u01af\2\2\u1141\u1143\5\u00dep\2\u1142\u1140"+
		"\3\2\2\2\u1142\u1141\3\2\2\2\u1143\u00e1\3\2\2\2\u1144\u114a\7\u01b6\2"+
		"\2\u1145\u114a\7\u01b7\2\2\u1146\u114a\7\u01b9\2\2\u1147\u114a\7\u01b8"+
		"\2\2\u1148\u114a\5\u00fe\u0080\2\u1149\u1144\3\2\2\2\u1149\u1145\3\2\2"+
		"\2\u1149\u1146\3\2\2\2\u1149\u1147\3\2\2\2\u1149\u1148\3\2\2\2\u114a\u00e3"+
		"\3\2\2\2\u114b\u114c\7\u00c3\2\2\u114c\u114d\5\u00b6\\\2\u114d\u114e\7"+
		"\u00ae\2\2\u114e\u114f\5\u00b6\\\2\u114f\u00e5\3\2\2\2\u1150\u1151\7D"+
		"\2\2\u1151\u1152\7\4\2\2\u1152\u1153\7\u00c4\2\2\u1153\u1154\5\u00bc_"+
		"\2\u1154\u1155\7\6\2\2\u1155\u00e7\3\2\2\2\u1156\u1157\7\u0083\2\2\u1157"+
		"\u1162\7\4\2\2\u1158\u1159\7\u0085\2\2\u1159\u115a\7\33\2\2\u115a\u115f"+
		"\5\u00b6\\\2\u115b\u115c\7\5\2\2\u115c\u115e\5\u00b6\\\2\u115d\u115b\3"+
		"\2\2\2\u115e\u1161\3\2\2\2\u115f\u115d\3\2\2\2\u115f\u1160\3\2\2\2\u1160"+
		"\u1163\3\2\2\2\u1161\u115f\3\2\2\2\u1162\u1158\3\2\2\2\u1162\u1163\3\2"+
		"\2\2\u1163\u116e\3\2\2\2\u1164\u1165\7\177\2\2\u1165\u1166\7\33\2\2\u1166"+
		"\u116b\5\u0090I\2\u1167\u1168\7\5\2\2\u1168\u116a\5\u0090I\2\u1169\u1167"+
		"\3\2\2\2\u116a\u116d\3\2\2\2\u116b\u1169\3\2\2\2\u116b\u116c\3\2\2\2\u116c"+
		"\u116f\3\2\2\2\u116d\u116b\3\2\2\2\u116e\u1164\3\2\2\2\u116e\u116f\3\2"+
		"\2\2\u116f\u1171\3\2\2\2\u1170\u1172\5\u00eav\2\u1171\u1170\3\2\2\2\u1171"+
		"\u1172\3\2\2\2\u1172\u1173\3\2\2\2\u1173\u1174\7\6\2\2\u1174\u00e9\3\2"+
		"\2\2\u1175\u1176\7\u008e\2\2\u1176\u1186\5\u00ecw\2\u1177\u1178\7\u009b"+
		"\2\2\u1178\u1186\5\u00ecw\2\u1179\u117a\7\u008e\2\2\u117a\u117b\7\32\2"+
		"\2\u117b\u117c\5\u00ecw\2\u117c\u117d\7\23\2\2\u117d\u117e\5\u00ecw\2"+
		"\u117e\u1186\3\2\2\2\u117f\u1180\7\u009b\2\2\u1180\u1181\7\32\2\2\u1181"+
		"\u1182\5\u00ecw\2\u1182\u1183\7\23\2\2\u1183\u1184\5\u00ecw\2\u1184\u1186"+
		"\3\2\2\2\u1185\u1175\3\2\2\2\u1185\u1177\3\2\2\2\u1185\u1179\3\2\2\2\u1185"+
		"\u117f\3\2\2\2\u1186\u00eb\3\2\2\2\u1187\u1188\7\u00b9\2\2\u1188\u1191"+
		"\7\u0089\2\2\u1189\u118a\7\u00b9\2\2\u118a\u1191\7F\2\2\u118b\u118c\7"+
		"*\2\2\u118c\u1191\7\u009a\2\2\u118d\u118e\5\u00b6\\\2\u118e\u118f\t.\2"+
		"\2\u118f\u1191\3\2\2\2\u1190\u1187\3\2\2\2\u1190\u1189\3\2\2\2\u1190\u118b"+
		"\3\2\2\2\u1190\u118d\3\2\2\2\u1191\u00ed\3\2\2\2\u1192\u1193\7H\2\2\u1193"+
		"\u1197\t/\2\2\u1194\u1195\7\u00b5\2\2\u1195\u1197\t\60\2\2\u1196\u1192"+
		"\3\2\2\2\u1196\u1194\3\2\2\2\u1197\u00ef\3\2\2\2\u1198\u1199\7_\2\2\u1199"+
		"\u119a\7e\2\2\u119a\u119e\5\u00f2z\2\u119b\u119c\7\u008f\2\2\u119c\u119e"+
		"\t\61\2\2\u119d\u1198\3\2\2\2\u119d\u119b\3\2\2\2\u119e\u00f1\3\2\2\2"+
		"\u119f\u11a0\7\u008f\2\2\u11a0\u11a7\7\u00ba\2\2\u11a1\u11a2\7\u008f\2"+
		"\2\u11a2\u11a7\7%\2\2\u11a3\u11a4\7\u0092\2\2\u11a4\u11a7\7\u008f\2\2"+
		"\u11a5\u11a7\7\u00a0\2\2\u11a6\u119f\3\2\2\2\u11a6\u11a1\3\2\2\2\u11a6"+
		"\u11a3\3\2\2\2\u11a6\u11a5\3\2\2\2\u11a7\u00f3\3\2\2\2\u11a8\u11ae\5\u00b6"+
		"\\\2\u11a9\u11aa\5\u00fe\u0080\2\u11aa\u11ab\7\r\2\2\u11ab\u11ac\5\u00b6"+
		"\\\2\u11ac\u11ae\3\2\2\2\u11ad\u11a8\3\2\2\2\u11ad\u11a9\3\2\2\2\u11ae"+
		"\u00f5\3\2\2\2\u11af\u11b0\5\u00fe\u0080\2\u11b0\u11b1\7\7\2\2\u11b1\u11b2"+
		"\5\u00fe\u0080\2\u11b2\u11b5\3\2\2\2\u11b3\u11b5\5\u00fe\u0080\2\u11b4"+
		"\u11af\3\2\2\2\u11b4\u11b3\3\2\2\2\u11b5\u00f7\3\2\2\2\u11b6\u11bb\5\u00f6"+
		"|\2\u11b7\u11b8\7\5\2\2\u11b8\u11ba\5\u00f6|\2\u11b9\u11b7\3\2\2\2\u11ba"+
		"\u11bd\3\2\2\2\u11bb\u11b9\3\2\2\2\u11bb\u11bc\3\2\2\2\u11bc\u00f9\3\2"+
		"\2\2\u11bd\u11bb\3\2\2\2\u11be\u11c3\7\u009f\2\2\u11bf\u11c3\7\64\2\2"+
		"\u11c0\u11c3\7X\2\2\u11c1\u11c3\5\u00fe\u0080\2\u11c2\u11be\3\2\2\2\u11c2"+
		"\u11bf\3\2\2\2\u11c2\u11c0\3\2\2\2\u11c2\u11c1\3\2\2\2\u11c3\u00fb\3\2"+
		"\2\2\u11c4\u11c9\5\u00fe\u0080\2\u11c5\u11c6\7\7\2\2\u11c6\u11c8\5\u00fe"+
		"\u0080\2\u11c7\u11c5\3\2\2\2\u11c8\u11cb\3\2\2\2\u11c9\u11c7\3\2\2\2\u11c9"+
		"\u11ca\3\2\2\2\u11ca\u00fd\3\2\2\2\u11cb\u11c9\3\2\2\2\u11cc\u11cd\b\u0080"+
		"\1\2\u11cd\u11d2\7\u01b2\2\2\u11ce\u11cf\7\16\2\2\u11cf\u11d3\7\u01b2"+
		"\2\2\u11d0\u11d1\7\b\2\2\u11d1\u11d3\7\u01b2\2\2\u11d2\u11ce\3\2\2\2\u11d2"+
		"\u11d0\3\2\2\2\u11d2\u11d3\3\2\2\2\u11d3\u11d9\3\2\2\2\u11d4\u11d9\7\u01b4"+
		"\2\2\u11d5\u11d9\5\u0106\u0084\2\u11d6\u11d9\7\u01b5\2\2\u11d7\u11d9\7"+
		"\u01b3\2\2\u11d8\u11cc\3\2\2\2\u11d8\u11d4\3\2\2\2\u11d8\u11d5\3\2\2\2"+
		"\u11d8\u11d6\3\2\2\2\u11d8\u11d7\3\2\2\2\u11d9\u11e0\3\2\2\2\u11da\u11db"+
		"\f\3\2\2\u11db\u11dc\5\u00ceh\2\u11dc\u11dd\7\f\2\2\u11dd\u11df\3\2\2"+
		"\2\u11de\u11da\3\2\2\2\u11df\u11e2\3\2\2\2\u11e0\u11de\3\2\2\2\u11e0\u11e1"+
		"\3\2\2\2\u11e1\u00ff\3\2\2\2\u11e2\u11e0\3\2\2\2\u11e3\u11ea\7\u01b2\2"+
		"\2\u11e4\u11ea\7\u01b4\2\2\u11e5\u11ea\5\u0106\u0084\2\u11e6\u11ea\5\u0104"+
		"\u0083\2\u11e7\u11ea\7\u01b5\2\2\u11e8\u11ea\7\u01b3\2\2\u11e9\u11e3\3"+
		"\2\2\2\u11e9\u11e4\3\2\2\2\u11e9\u11e5\3\2\2\2\u11e9\u11e6\3\2\2\2\u11e9"+
		"\u11e7\3\2\2\2\u11e9\u11e8\3\2\2\2\u11ea\u0101\3\2\2\2\u11eb\u11ef\7\u01b0"+
		"\2\2\u11ec\u11ef\7\u01b1\2\2\u11ed\u11ef\7\u01af\2\2\u11ee\u11eb\3\2\2"+
		"\2\u11ee\u11ec\3\2\2\2\u11ee\u11ed\3\2\2\2\u11ef\u0103\3\2\2\2\u11f0\u11f1"+
		"\t\62\2\2\u11f1\u0105\3\2\2\2\u11f2\u11f3\t\63\2\2\u11f3\u0107\3\2\2\2"+
		"\u0235\u010d\u0111\u0121\u0151\u016a\u0170\u0174\u017a\u0188\u0191\u0196"+
		"\u019a\u01ab\u01b1\u01b5\u01bb\u01bf\u01c2\u01c5\u01c9\u01cc\u01d2\u01d8"+
		"\u01fb\u0207\u0217\u021c\u0221\u022f\u0234\u0239\u023f\u024d\u0254\u0269"+
		"\u026d\u0272\u0285\u0288\u0293\u029a\u029f\u02a5\u02ae\u02b6\u02be\u02c1"+
		"\u02cb\u02d3\u02d9\u02ec\u0314\u031c\u0321\u0327\u032d\u0336\u033f\u0345"+
		"\u034d\u0360\u0367\u0374\u0379\u037d\u0382\u0388\u038c\u0396\u039b\u03a1"+
		"\u03a5\u03ac\u03b0\u03b3\u03b9\u03c1\u03c5\u03cd\u03da\u03df\u03e1\u03e7"+
		"\u03f1\u03f3\u03f8\u03fd\u0405\u0407\u040b\u040f\u0413\u0417\u041a\u0420"+
		"\u0427\u0435\u0440\u0442\u0452\u0457\u0459\u0463\u0470\u0478\u0496\u049f"+
		"\u04a5\u04a8\u04ae\u04b2\u04cc\u04d1\u04d7\u04dc\u04df\u04e3\u04ea\u04f2"+
		"\u04f6\u04fb\u04fe\u0502\u0508\u050e\u0512\u0517\u051b\u0529\u052d\u0534"+
		"\u0539\u053c\u0545\u0549\u054b\u0552\u055b\u0560\u0564\u0568\u0571\u0588"+
		"\u0590\u0594\u0599\u059d\u05a2\u05a7\u05af\u05b1\u05b5\u05b9\u05bd\u05c3"+
		"\u05d0\u05ea\u05ec\u05ef\u05f3\u05f8\u0600\u0605\u060c\u060e\u0612\u0615"+
		"\u0618\u061b\u061f\u0625\u0628\u062b\u0631\u0636\u063c\u063e\u0647\u0650"+
		"\u0654\u0659\u065d\u0663\u066b\u066f\u0675\u0679\u0681\u068a\u0693\u0698"+
		"\u069b\u069f\u06a3\u06a7\u06ac\u06b1\u06b8\u06bc\u06e9\u0715\u072b\u0736"+
		"\u074e\u0750\u0758\u0776\u077d\u077f\u0784\u078c\u07aa\u07b1\u07b3\u07b8"+
		"\u07bd\u07c4\u07c9\u07d2\u07da\u07dc\u07e7\u07ee\u07fb\u0807\u080e\u081d"+
		"\u0827\u0829\u0830\u0837\u083d\u0844\u084b\u084d\u0851\u0856\u0863\u0873"+
		"\u087b\u088f\u089c\u08a1\u08af\u08b4\u08ba\u08be\u08cc\u08d0\u08d4\u08d8"+
		"\u08db\u08e3\u08e7\u08ea\u08ee\u08f1\u08f5\u08f8\u08fb\u0901\u090a\u090f"+
		"\u0912\u0915\u0919\u091c\u0920\u0923\u0926\u092d\u0930\u0935\u093a\u094f"+
		"\u0952\u0955\u0963\u0967\u096e\u097a\u0981\u0983\u0988\u0996\u0998\u099c"+
		"\u09aa\u09ae\u09b9\u09c0\u09c6\u09cb\u09d3\u09dc\u09e1\u09e6\u09eb\u09f6"+
		"\u0a01\u0a04\u0a0e\u0a13\u0a17\u0a1f\u0a25\u0a2c\u0a31\u0a35\u0a3f\u0a42"+
		"\u0a46\u0a49\u0a51\u0a56\u0a65\u0a6b\u0a6d\u0a73\u0a79\u0a7b\u0a81\u0a87"+
		"\u0a89\u0a8f\u0abb\u0abe\u0ac3\u0ac8\u0ada\u0add\u0aee\u0af9\u0afe\u0b02"+
		"\u0b06\u0b09\u0b11\u0b15\u0b1a\u0b1d\u0b25\u0b29\u0b2c\u0b30\u0b33\u0b39"+
		"\u0b40\u0b53\u0b5d\u0b69\u0b6f\u0b88\u0b8d\u0b93\u0b95\u0b9e\u0ba3\u0bac"+
		"\u0baf\u0bb5\u0bba\u0bc0\u0bcc\u0bd9\u0be5\u0bf0\u0bfc\u0c05\u0c0c\u0c0e"+
		"\u0c1e\u0c2a\u0c2f\u0c38\u0c3d\u0c45\u0c47\u0c4b\u0c52\u0c58\u0c63\u0c6a"+
		"\u0c7f\u0c86\u0c8a\u0c98\u0ca6\u0ca8\u0cab\u0cae\u0cb1\u0cb5\u0cc2\u0cc5"+
		"\u0ccb\u0ccf\u0cd2\u0ceb\u0cf1\u0cf8\u0d01\u0d08\u0d0e\u0d16\u0d27\u0d2a"+
		"\u0d33\u0d36\u0d3f\u0d42\u0d46\u0d4e\u0d53\u0d58\u0d60\u0d66\u0d69\u0d6b"+
		"\u0d75\u0d7d\u0d82\u0d86\u0d8a\u0d91\u0d9a\u0d9d\u0da1\u0da8\u0daa\u0dae"+
		"\u0db1\u0db8\u0dc3\u0dc6\u0dd0\u0dd3\u0dde\u0de3\u0deb\u0dee\u0df2\u0df6"+
		"\u0e01\u0e04\u0e0d\u0e11\u0e1f\u0e2c\u0e30\u0e34\u0e38\u0e3b\u0e3f\u0e43"+
		"\u0e46\u0e51\u0e56\u0e5f\u0e65\u0e69\u0e6b\u0e73\u0e7f\u0e84\u0e88\u0e8c"+
		"\u0e96\u0ea3\u0ea9\u0eb4\u0ebe\u0ec6\u0ecd\u0ed1\u0ed9\u0edb\u0ee8\u0ef0"+
		"\u0ef9\u0eff\u0f07\u0f0d\u0f10\u0f15\u0f1b\u0f20\u0f25\u0f33\u0f45\u0f47"+
		"\u0f4e\u0f65\u0f70\u0f7a\u0f7d\u0f82\u0f89\u0f8c\u0f95\u0f98\u0f9c\u0f9f"+
		"\u0fa6\u0fc2\u0fc5\u0fd8\u0fdc\u0fe4\u0fe8\u1001\u1004\u100d\u1013\u1019"+
		"\u101f\u102a\u1033\u1049\u104c\u104f\u1054\u1060\u1062\u1064\u10b3\u10c4"+
		"\u10c9\u10d3\u10d6\u10dc\u10de\u10e6\u10f0\u10f6\u1104\u111f\u112b\u1130"+
		"\u1137\u113d\u1142\u1149\u115f\u1162\u116b\u116e\u1171\u1185\u1190\u1196"+
		"\u119d\u11a6\u11ad\u11b4\u11bb\u11c2\u11c9\u11d2\u11d8\u11e0\u11e9\u11ee";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}